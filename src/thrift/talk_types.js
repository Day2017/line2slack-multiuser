//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.AccountMigrationCheckType = {
  'SKIP' : 0,
  'PINCODE' : 1,
  'SECURITY_CENTER' : 2
};
ttypes.AccountMigrationPincodeType = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.ApplicationType = {
  'IOS' : 16,
  'IOS_RC' : 17,
  'IOS_BETA' : 18,
  'IOS_ALPHA' : 19,
  'ANDROID' : 32,
  'ANDROID_RC' : 33,
  'ANDROID_BETA' : 34,
  'ANDROID_ALPHA' : 35,
  'WAP' : 48,
  'WAP_RC' : 49,
  'WAP_BETA' : 50,
  'WAP_ALPHA' : 51,
  'BOT' : 64,
  'BOT_RC' : 65,
  'BOT_BETA' : 66,
  'BOT_ALPHA' : 67,
  'WEB' : 80,
  'WEB_RC' : 81,
  'WEB_BETA' : 82,
  'WEB_ALPHA' : 83,
  'DESKTOPWIN' : 96,
  'DESKTOPWIN_RC' : 97,
  'DESKTOPWIN_BETA' : 98,
  'DESKTOPWIN_ALPHA' : 99,
  'DESKTOPMAC' : 112,
  'DESKTOPMAC_RC' : 113,
  'DESKTOPMAC_BETA' : 114,
  'DESKTOPMAC_ALPHA' : 115,
  'CHANNELGW' : 128,
  'CHANNELGW_RC' : 129,
  'CHANNELGW_BETA' : 130,
  'CHANNELGW_ALPHA' : 131,
  'CHANNELCP' : 144,
  'CHANNELCP_RC' : 145,
  'CHANNELCP_BETA' : 146,
  'CHANNELCP_ALPHA' : 147,
  'WINPHONE' : 160,
  'WINPHONE_RC' : 161,
  'WINPHONE_BETA' : 162,
  'WINPHONE_ALPHA' : 163,
  'BLACKBERRY' : 176,
  'BLACKBERRY_RC' : 177,
  'BLACKBERRY_BETA' : 178,
  'BLACKBERRY_ALPHA' : 179,
  'WINMETRO' : 192,
  'WINMETRO_RC' : 193,
  'WINMETRO_BETA' : 194,
  'WINMETRO_ALPHA' : 195,
  'S40' : 208,
  'S40_RC' : 209,
  'S40_BETA' : 210,
  'S40_ALPHA' : 211,
  'CHRONO' : 224,
  'CHRONO_RC' : 225,
  'CHRONO_BETA' : 226,
  'CHRONO_ALPHA' : 227,
  'TIZEN' : 256,
  'TIZEN_RC' : 257,
  'TIZEN_BETA' : 258,
  'TIZEN_ALPHA' : 259,
  'VIRTUAL' : 272,
  'FIREFOXOS' : 288,
  'FIREFOXOS_RC' : 289,
  'FIREFOXOS_BETA' : 290,
  'FIREFOXOS_ALPHA' : 291,
  'IOSIPAD' : 304,
  'IOSIPAD_RC' : 305,
  'IOSIPAD_BETA' : 306,
  'IOSIPAD_ALPHA' : 307,
  'BIZIOS' : 320,
  'BIZIOS_RC' : 321,
  'BIZIOS_BETA' : 322,
  'BIZIOS_ALPHA' : 323,
  'BIZANDROID' : 336,
  'BIZANDROID_RC' : 337,
  'BIZANDROID_BETA' : 338,
  'BIZANDROID_ALPHA' : 339,
  'BIZBOT' : 352,
  'BIZBOT_RC' : 353,
  'BIZBOT_BETA' : 354,
  'BIZBOT_ALPHA' : 355,
  'CHROMEOS' : 368,
  'CHROMEOS_RC' : 369,
  'CHROMEOS_BETA' : 370,
  'CHROMEOS_ALPHA' : 371,
  'ANDROIDLITE' : 384,
  'ANDROIDLITE_RC' : 385,
  'ANDROIDLITE_BETA' : 386,
  'ANDROIDLITE_ALPHA' : 387,
  'WIN10' : 400,
  'WIN10_RC' : 401,
  'WIN10_BETA' : 402,
  'WIN10_ALPHA' : 403,
  'BIZWEB' : 416,
  'BIZWEB_RC' : 417,
  'BIZWEB_BETA' : 418,
  'BIZWEB_ALPHA' : 419,
  'DUMMYPRIMARY' : 432,
  'DUMMYPRIMARY_RC' : 433,
  'DUMMYPRIMARY_BETA' : 434,
  'DUMMYPRIMARY_ALPHA' : 435,
  'SQUARE' : 448,
  'SQUARE_RC' : 449,
  'SQUARE_BETA' : 450,
  'SQUARE_ALPHA' : 451,
  'INTERNAL' : 464,
  'INTERNAL_RC' : 465,
  'INTERNAL_BETA' : 466,
  'INTERNAL_ALPHA' : 467
};
ttypes.AsymmetricKeyAlgorithm = {
  'ASYMMETRIC_KEY_ALGORITHM_RSA' : 1,
  'ASYMMETRIC_KEY_ALGORITHM_ECDH' : 2
};
ttypes.BeaconNotificationType = {
  'BUTTON' : 1,
  'ENTRY_SELECTED' : 2,
  'BROADCAST_ENTER' : 3,
  'BROADCAST_LEAVE' : 4
};
ttypes.BotType = {
  'RESERVED' : 0,
  'OFFICIAL' : 1,
  'LINE_AT_0' : 2,
  'LINE_AT' : 3
};
ttypes.BuddyBannerLinkType = {
  'BUDDY_BANNER_LINK_HIDDEN' : 0,
  'BUDDY_BANNER_LINK_MID' : 1,
  'BUDDY_BANNER_LINK_URL' : 2
};
ttypes.BuddyCollectionType = {
  'NORMAL' : 0,
  'NEW' : 1,
  'ONAIR' : 2,
  'POPULAR' : 3
};
ttypes.BuddyOnAirLabel = {
  'ON_AIR' : 0,
  'LIVE' : 1
};
ttypes.BuddyOnAirType = {
  'NORMAL' : 0,
  'VIDEOCAM' : 1,
  'VOIP' : 2,
  'RECORD' : 3
};
ttypes.BuddyProfilePopupType = {
  'NONE' : 0,
  'WEB' : 1
};
ttypes.BuddyResultState = {
  'ACCEPTED' : 1,
  'SUCCEEDED' : 2,
  'FAILED' : 3,
  'CANCELLED' : 4,
  'NOTIFY_FAILED' : 5,
  'STORING' : 11,
  'UPLOADING' : 21,
  'NOTIFYING' : 31,
  'REMOVING_SUBSCRIPTION' : 41,
  'UNREGISTERING_ACCOUNT' : 42,
  'NOTIFYING_LEAVE_CHAT' : 43
};
ttypes.BuddySearchRequestSource = {
  'NA' : 0,
  'FRIEND_VIEW' : 1,
  'OFFICIAL_ACCOUNT_VIEW' : 2
};
ttypes.BuddyStatusBarDisplayType = {
  'NOT_A_FRIEND' : 0,
  'ALWAYS' : 1
};
ttypes.CarrierCode = {
  'NOT_SPECIFIED' : 0,
  'JP_DOCOMO' : 1,
  'JP_AU' : 2,
  'JP_SOFTBANK' : 3,
  'KR_SKT' : 17,
  'KR_KT' : 18,
  'KR_LGT' : 19,
  'JP_DOCOMO_LINE' : 4
};
ttypes.ChannelConfiguration = {
  'MESSAGE' : 0,
  'MESSAGE_NOTIFICATION' : 1,
  'NOTIFICATION_CENTER' : 2
};
ttypes.ChannelErrorCode = {
  'ILLEGAL_ARGUMENT' : 0,
  'INTERNAL_ERROR' : 1,
  'CONNECTION_ERROR' : 2,
  'AUTHENTICATIONI_FAILED' : 3,
  'NEED_PERMISSION_APPROVAL' : 4,
  'COIN_NOT_USABLE' : 5,
  'WEBVIEW_NOT_ALLOWED' : 6
};
ttypes.ChannelPermission = {
  'PROFILE' : 0,
  'FRIENDS' : 1,
  'GROUP' : 2
};
ttypes.ChannelSyncTarget = {
  'ALL' : 255,
  'CHANNEL_INFO' : 1,
  'CHANNEL_TOKEN' : 2,
  'COMMON_DOMAIN' : 4
};
ttypes.ChannelSyncType = {
  'SYNC' : 0,
  'REMOVE' : 1,
  'REMOVE_ALL' : 2
};
ttypes.CommitMessageResultCode = {
  'DELIVERED' : 0,
  'DELIVERY_SKIPPED' : 1,
  'DELIVERY_RESTRICTED' : 2
};
ttypes.ContactAttribute = {
  'CONTACT_ATTRIBUTE_CAPABLE_VOICE_CALL' : 1,
  'CONTACT_ATTRIBUTE_CAPABLE_VIDEO_CALL' : 2,
  'CONTACT_ATTRIBUTE_CAPABLE_MY_HOME' : 16,
  'CONTACT_ATTRIBUTE_CAPABLE_BUDDY' : 32
};
ttypes.ContactCategory = {
  'NORMAL' : 0,
  'RECOMMEND' : 1,
  'BLOCKED' : 2
};
ttypes.ContactRelation = {
  'ONEWAY' : 0,
  'BOTH' : 1,
  'NOT_REGISTERED' : 2
};
ttypes.ContactSetting = {
  'CONTACT_SETTING_NOTIFICATION_DISABLE' : 1,
  'CONTACT_SETTING_DISPLAY_NAME_OVERRIDE' : 2,
  'CONTACT_SETTING_CONTACT_HIDE' : 4,
  'CONTACT_SETTING_FAVORITE' : 8,
  'CONTACT_SETTING_DELETE' : 16
};
ttypes.ContactStatus = {
  'UNSPECIFIED' : 0,
  'FRIEND' : 1,
  'FRIEND_BLOCKED' : 2,
  'RECOMMEND' : 3,
  'RECOMMEND_BLOCKED' : 4,
  'DELETED' : 5,
  'DELETED_BLOCKED' : 6
};
ttypes.ContactType = {
  'MID' : 0,
  'PHONE' : 1,
  'EMAIL' : 2,
  'USERID' : 3,
  'PROXIMITY' : 4,
  'GROUP' : 5,
  'USER' : 6,
  'QRCODE' : 7,
  'PROMOTION_BOT' : 8,
  'CONTACT_MESSAGE' : 9,
  'FRIEND_REQUEST' : 10,
  'REPAIR' : 128,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308,
  'BBM' : 2309,
  'BEACON' : 11
};
ttypes.ContentType = {
  'NONE' : 0,
  'IMAGE' : 1,
  'VIDEO' : 2,
  'AUDIO' : 3,
  'HTML' : 4,
  'PDF' : 5,
  'CALL' : 6,
  'STICKER' : 7,
  'PRESENCE' : 8,
  'GIFT' : 9,
  'GROUPBOARD' : 10,
  'APPLINK' : 11,
  'LINK' : 12,
  'CONTACT' : 13,
  'FILE' : 14,
  'LOCATION' : 15,
  'POSTNOTIFICATION' : 16,
  'RICH' : 17,
  'CHATEVENT' : 18,
  'MUSIC' : 19,
  'PAYMENT' : 20,
  'EXTIMAGE' : 21
};
ttypes.CustomMode = {
  'PROMOTION_FRIENDS_INVITE' : 1,
  'CAPABILITY_SERVER_SIDE_SMS' : 2,
  'LINE_CLIENT_ANALYTICS_CONFIGURATION' : 3
};
ttypes.DeviceBooleanStateKey = {
  'BEACON_AGREEMENT' : 1,
  'BLUETOOTH' : 2
};
ttypes.DeviceStringStateKey = {
  'LOCATION_OS' : 1,
  'LOCATION_APP' : 2
};
ttypes.Diff = {
  'ADDED' : 0,
  'UPDATED' : 1,
  'REMOVED' : 2
};
ttypes.EmailConfirmationStatus = {
  'NOT_SPECIFIED' : 0,
  'NOT_YET' : 1,
  'DONE' : 3,
  'NEED_ENFORCED_INPUT' : 4
};
ttypes.EmailConfirmationType = {
  'SERVER_SIDE_EMAIL' : 0,
  'CLIENT_SIDE_EMAIL' : 1
};
ttypes.ErrorCode = {
  'ILLEGAL_ARGUMENT' : 0,
  'AUTHENTICATION_FAILED' : 1,
  'DB_FAILED' : 2,
  'INVALID_STATE' : 3,
  'EXCESSIVE_ACCESS' : 4,
  'NOT_FOUND' : 5,
  'INVALID_MID' : 9,
  'NOT_A_MEMBER' : 10,
  'INVALID_LENGTH' : 6,
  'NOT_AVAILABLE_USER' : 7,
  'NOT_AUTHORIZED_DEVICE' : 8,
  'NOT_AUTHORIZED_SESSION' : 14,
  'INCOMPATIBLE_APP_VERSION' : 11,
  'NOT_READY' : 12,
  'NOT_AVAILABLE_SESSION' : 13,
  'SYSTEM_ERROR' : 15,
  'NO_AVAILABLE_VERIFICATION_METHOD' : 16,
  'NOT_AUTHENTICATED' : 17,
  'INVALID_IDENTITY_CREDENTIAL' : 18,
  'NOT_AVAILABLE_IDENTITY_IDENTIFIER' : 19,
  'INTERNAL_ERROR' : 20,
  'NO_SUCH_IDENTITY_IDENFIER' : 21,
  'DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY' : 22,
  'ILLEGAL_IDENTITY_CREDENTIAL' : 23,
  'UNKNOWN_CHANNEL' : 24,
  'NO_SUCH_MESSAGE_BOX' : 25,
  'NOT_AVAILABLE_MESSAGE_BOX' : 26,
  'CHANNEL_DOES_NOT_MATCH' : 27,
  'NOT_YOUR_MESSAGE' : 28,
  'MESSAGE_DEFINED_ERROR' : 29,
  'USER_CANNOT_ACCEPT_PRESENTS' : 30,
  'USER_NOT_STICKER_OWNER' : 32,
  'MAINTENANCE_ERROR' : 33,
  'ACCOUNT_NOT_MATCHED' : 34,
  'ABUSE_BLOCK' : 35,
  'NOT_FRIEND' : 36,
  'NOT_ALLOWED_CALL' : 37,
  'BLOCK_FRIEND' : 38,
  'INCOMPATIBLE_VOIP_VERSION' : 39,
  'INVALID_SNS_ACCESS_TOKEN' : 40,
  'EXTERNAL_SERVICE_NOT_AVAILABLE' : 41,
  'NOT_ALLOWED_ADD_CONTACT' : 42,
  'NOT_CERTIFICATED' : 43,
  'NOT_ALLOWED_SECONDARY_DEVICE' : 44,
  'INVALID_PIN_CODE' : 45,
  'NOT_FOUND_IDENTITY_CREDENTIAL' : 46,
  'EXCEED_FILE_MAX_SIZE' : 47,
  'EXCEED_DAILY_QUOTA' : 48,
  'NOT_SUPPORT_SEND_FILE' : 49,
  'MUST_UPGRADE' : 50,
  'NOT_AVAILABLE_PIN_CODE_SESSION' : 51,
  'EXPIRED_REVISION' : 52,
  'NOT_YET_PHONE_NUMBER' : 54,
  'BAD_CALL_NUMBER' : 55,
  'UNAVAILABLE_CALL_NUMBER' : 56,
  'NOT_SUPPORT_CALL_SERVICE' : 57,
  'CONGESTION_CONTROL' : 58,
  'NO_BALANCE' : 59,
  'NOT_PERMITTED_CALLER_ID' : 60,
  'NO_CALLER_ID_LIMIT_EXCEEDED' : 61,
  'CALLER_ID_VERIFICATION_REQUIRED' : 62,
  'NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 63,
  'MESSAGE_NOT_FOUND' : 64,
  'INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT' : 65,
  'ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED' : 66,
  'ACCOUNT_MIGRATION_PINCODE_BLOCKED' : 67,
  'INVALID_PASSWORD_FORMAT' : 69,
  'FEATURE_RESTRICTED' : 70,
  'MESSAGE_NOT_DESTRUCTIBLE' : 71,
  'PAID_CALL_REDEEM_FAILED' : 72,
  'PREVENTED_JOIN_BY_TICKET' : 73,
  'SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT' : 75,
  'SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY' : 76,
  'SECURITY_CENTER_NOT_VERIFIED' : 77,
  'SECURITY_CENTER_BLOCKED_BY_SETTING' : 78,
  'SECURITY_CENTER_BLOCKED' : 79,
  'TALK_PROXY_EXCEPTION' : 80,
  'E2EE_INVALID_PROTOCOL' : 81,
  'E2EE_RETRY_ENCRYPT' : 82,
  'E2EE_UPDATE_SENDER_KEY' : 83,
  'E2EE_UPDATE_RECEIVER_KEY' : 84,
  'E2EE_INVALID_ARGUMENT' : 85,
  'E2EE_INVALID_VERSION' : 86,
  'E2EE_SENDER_DISABLED' : 87,
  'E2EE_RECEIVER_DISABLED' : 88,
  'E2EE_SENDER_NOT_ALLOWED' : 89,
  'E2EE_RECEIVER_NOT_ALLOWED' : 90,
  'E2EE_RESEND_FAIL' : 91,
  'E2EE_RESEND_OK' : 92,
  'HITOKOTO_BACKUP_NO_AVAILABLE_DATA' : 93,
  'E2EE_UPDATE_PRIMARY_DEVICE' : 94,
  'SUCCESS' : 95,
  'CANCEL' : 96,
  'E2EE_PRIMARY_NOT_SUPPORT' : 97,
  'E2EE_RETRY_PLAIN' : 98,
  'E2EE_RECREATE_GROUP_KEY' : 99,
  'E2EE_GROUP_TOO_MANY_MEMBERS' : 100,
  'SERVER_BUSY' : 101,
  'NOT_ALLOWED_ADD_FOLLOW' : 102,
  'INCOMING_FRIEND_REQUEST_LIMIT' : 103,
  'OUTGOING_FRIEND_REQUEST_LIMIT' : 104,
  'OUTGOING_FRIEND_REQUEST_QUOTA' : 105,
  'DUPLICATED' : 106,
  'BANNED' : 107
};
ttypes.ExtendedProfileAttribute = {
};
ttypes.FeatureType = {
  'OBS_VIDEO' : 1,
  'OBS_GENERAL' : 2
};
ttypes.FriendRequestDirection = {
  'INCOMING' : 1,
  'OUTGOING' : 2
};
ttypes.FriendRequestMethod = {
  'TIMELINE' : 1,
  'NEARBY' : 2,
  'SQUARE' : 3
};
ttypes.FriendRequestStatus = {
  'NONE' : 0,
  'AVAILABLE' : 1,
  'ALREADY_REQUESTED' : 2,
  'UNAVAILABLE' : 3
};
ttypes.GroupAttribute = {
  'ALL' : 255,
  'NAME' : 1,
  'PICTURE_STATUS' : 2,
  'PREVENTED_JOIN_BY_TICKET' : 4,
  'NOTIFICATION_SETTING' : 8
};
ttypes.GroupCallMediaType = {
  'AUDIO' : 1,
  'VIDEO' : 2
};
ttypes.GroupPreferenceAttribute = {
  'INVITATION_TICKET' : 1,
  'FAVORITE_TIMESTAMP' : 2
};
ttypes.IdentityProvider = {
  'UNKNOWN' : 0,
  'LINE' : 1,
  'NAVER_KR' : 2,
  'LINE_PHONE' : 3
};
ttypes.LoginResultType = {
  'SUCCESS' : 1,
  'REQUIRE_QRCODE' : 2,
  'REQUIRE_DEVICE_CONFIRM' : 3,
  'REQUIRE_SMS_CONFIRM' : 4
};
ttypes.LoginType = {
  'ID_CREDENTIAL' : 0,
  'QRCODE' : 1,
  'ID_CREDENTIAL_WITH_E2EE' : 2
};
ttypes.MessageRelationType = {
  'FORWARD' : 0,
  'AUTO_REPLY' : 1,
  'SUBORDINATE' : 2
};
ttypes.MIDType = {
  'USER' : 0,
  'ROOM' : 1,
  'GROUP' : 2,
  'SQUARE' : 3,
  'SQUARE_CHAT' : 4,
  'SQUARE_MEMBER' : 5
};
ttypes.ModificationType = {
  'ADD' : 0,
  'REMOVE' : 1,
  'MODIFY' : 2
};
ttypes.NotificationItemFetchMode = {
  'ALL' : 0,
  'APPEND' : 1
};
ttypes.NotificationStatus = {
  'NOTIFICATION_ITEM_EXIST' : 1,
  'TIMELINE_ITEM_EXIST' : 2,
  'NOTE_GROUP_NEW_ITEM_EXIST' : 4,
  'TIMELINE_BUDDYGROUP_CHANGED' : 8,
  'NOTE_ONE_TO_ONE_NEW_ITEM_EXIST' : 16,
  'ALBUM_ITEM_EXIST' : 32,
  'TIMELINE_ITEM_DELETED' : 64,
  'OTOGROUP_ITEM_EXIST' : 128,
  'GROUPHOME_NEW_ITEM_EXIST' : 256,
  'GROUPHOME_HIDDEN_ITEM_CHANGED' : 512,
  'NOTIFICATION_ITEM_CHANGED' : 1024,
  'BEAD_ITEM_HIDE' : 2048,
  'BEAD_ITEM_SHOW' : 4096
};
ttypes.NotificationType = {
  'APPLE_APNS' : 1,
  'GOOGLE_C2DM' : 2,
  'NHN_NNI' : 3,
  'SKT_AOM' : 4,
  'MS_MPNS' : 5,
  'RIM_BIS' : 6,
  'GOOGLE_GCM' : 7,
  'NOKIA_NNAPI' : 8,
  'TIZEN' : 9,
  'MOZILLA_SIMPLE' : 10,
  'LINE_BOT' : 17,
  'LINE_WAP' : 18,
  'APPLE_APNS_VOIP' : 19,
  'MS_WNS' : 20
};
ttypes.OpStatus = {
  'NORMAL' : 0,
  'ALERT_DISABLED' : 1,
  'ALWAYS' : 2
};
ttypes.OpType = {
  'END_OF_OPERATION' : 0,
  'UPDATE_PROFILE' : 1,
  'UPDATE_SETTINGS' : 36,
  'NOTIFIED_UPDATE_PROFILE' : 2,
  'REGISTER_USERID' : 3,
  'ADD_CONTACT' : 4,
  'NOTIFIED_ADD_CONTACT' : 5,
  'BLOCK_CONTACT' : 6,
  'UNBLOCK_CONTACT' : 7,
  'NOTIFIED_RECOMMEND_CONTACT' : 8,
  'CREATE_GROUP' : 9,
  'UPDATE_GROUP' : 10,
  'NOTIFIED_UPDATE_GROUP' : 11,
  'INVITE_INTO_GROUP' : 12,
  'NOTIFIED_INVITE_INTO_GROUP' : 13,
  'CANCEL_INVITATION_GROUP' : 31,
  'NOTIFIED_CANCEL_INVITATION_GROUP' : 32,
  'LEAVE_GROUP' : 14,
  'NOTIFIED_LEAVE_GROUP' : 15,
  'ACCEPT_GROUP_INVITATION' : 16,
  'NOTIFIED_ACCEPT_GROUP_INVITATION' : 17,
  'REJECT_GROUP_INVITATION' : 34,
  'NOTIFIED_REJECT_GROUP_INVITATION' : 35,
  'KICKOUT_FROM_GROUP' : 18,
  'NOTIFIED_KICKOUT_FROM_GROUP' : 19,
  'CREATE_ROOM' : 20,
  'INVITE_INTO_ROOM' : 21,
  'NOTIFIED_INVITE_INTO_ROOM' : 22,
  'LEAVE_ROOM' : 23,
  'NOTIFIED_LEAVE_ROOM' : 24,
  'SEND_MESSAGE' : 25,
  'RECEIVE_MESSAGE' : 26,
  'SEND_MESSAGE_RECEIPT' : 27,
  'RECEIVE_MESSAGE_RECEIPT' : 28,
  'SEND_CONTENT_RECEIPT' : 29,
  'SEND_CHAT_CHECKED' : 40,
  'SEND_CHAT_REMOVED' : 41,
  'RECEIVE_ANNOUNCEMENT' : 30,
  'INVITE_VIA_EMAIL' : 38,
  'NOTIFIED_REGISTER_USER' : 37,
  'NOTIFIED_UNREGISTER_USER' : 33,
  'NOTIFIED_REQUEST_RECOVERY' : 39,
  'NOTIFIED_FORCE_SYNC' : 42,
  'SEND_CONTENT' : 43,
  'SEND_MESSAGE_MYHOME' : 44,
  'NOTIFIED_UPDATE_CONTENT_PREVIEW' : 45,
  'REMOVE_ALL_MESSAGES' : 46,
  'NOTIFIED_UPDATE_PURCHASES' : 47,
  'DUMMY' : 48,
  'UPDATE_CONTACT' : 49,
  'NOTIFIED_RECEIVED_CALL' : 50,
  'CANCEL_CALL' : 51,
  'NOTIFIED_REDIRECT' : 52,
  'NOTIFIED_CHANNEL_SYNC' : 53,
  'FAILED_SEND_MESSAGE' : 54,
  'NOTIFIED_READ_MESSAGE' : 55,
  'FAILED_EMAIL_CONFIRMATION' : 56,
  'NOTIFIED_PUSH_NOTICENTER_ITEM' : 59,
  'NOTIFIED_CHAT_CONTENT' : 58,
  'NOTIFIED_JOIN_CHAT' : 60,
  'NOTIFIED_LEAVE_CHAT' : 61,
  'NOTIFIED_TYPING' : 62,
  'FRIEND_REQUEST_ACCEPTED' : 63,
  'DESTROY_MESSAGE' : 64,
  'NOTIFIED_DESTROY_MESSAGE' : 65,
  'UPDATE_PUBLICKEYCHAIN' : 66,
  'NOTIFIED_UPDATE_PUBLICKEYCHAIN' : 67,
  'NOTIFIED_BLOCK_CONTACT' : 68,
  'NOTIFIED_UNBLOCK_CONTACT' : 69,
  'UPDATE_GROUPPREFERENCE' : 70,
  'NOTIFIED_PAYMENT_EVENT' : 71,
  'REGISTER_E2EE_PUBLICKEY' : 72,
  'NOTIFIED_E2EE_KEY_EXCHANGE_REQ' : 73,
  'NOTIFIED_E2EE_KEY_EXCHANGE_RESP' : 74,
  'NOTIFIED_E2EE_MESSAGE_RESEND_REQ' : 75,
  'NOTIFIED_E2EE_MESSAGE_RESEND_RESP' : 76,
  'NOTIFIED_E2EE_KEY_UPDATE' : 77,
  'NOTIFIED_BUDDY_UPDATE_PROFILE' : 78,
  'NOTIFIED_UPDATE_LINEAT_TABS' : 79,
  'UPDATE_ROOM' : 80,
  'NOTIFIED_BEACON_DETECTED' : 81,
  'UPDATE_EXTENDED_PROFILE' : 82,
  'ADD_FOLLOW' : 83,
  'NOTIFIED_ADD_FOLLOW' : 84,
  'DELETE_FOLLOW' : 85,
  'NOTIFIED_DELETE_FOLLOW' : 86,
  'UPDATE_TIMELINE_SETTINGS' : 87,
  'NOTIFIED_FRIEND_REQUEST' : 88,
  'UPDATE_RINGBACK_TONE' : 89,
  'NOTIFIED_POSTBACK' : 90,
  'RECEIVE_READ_WATERMARK' : 91,
  'NOTIFIED_MESSAGE_DELIVERED' : 92
};
ttypes.PaidCallerIdStatus = {
  'NOT_SPECIFIED' : 0,
  'VALID' : 1,
  'VERIFICATION_REQUIRED' : 2,
  'NOT_PERMITTED' : 3,
  'LIMIT_EXCEEDED' : 4,
  'LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED' : 5
};
ttypes.PaidCallProductType = {
  'COIN' : 0,
  'CREDIT' : 1,
  'MONTHLY' : 2
};
ttypes.PaidCallType = {
  'OUT' : 0,
  'IN' : 1,
  'TOLLFREE' : 2,
  'RECORD' : 3,
  'AD' : 4,
  'CS' : 5
};
ttypes.PayloadType = {
  'PAYLOAD_BUY' : 101,
  'PAYLOAD_CS' : 111,
  'PAYLOAD_BONUS' : 121,
  'PAYLOAD_EVENT' : 131,
  'PAYLOAD_POINT_AUTO_EXCHANGED' : 141,
  'PAYLOAD_POINT_MANUAL_EXCHANGED' : 151
};
ttypes.PaymentPgType = {
  'PAYMENT_PG_NONE' : 0,
  'PAYMENT_PG_AU' : 1,
  'PAYMENT_PG_AL' : 2
};
ttypes.PaymentType = {
  'PAYMENT_APPLE' : 1,
  'PAYMENT_GOOGLE' : 2
};
ttypes.PersonalInfo = {
  'EMAIL' : 0,
  'PHONE' : 1,
  'BIRTHDAY' : 2,
  'RAW_BIRTHDAY' : 3
};
ttypes.PlaceSearchProvider = {
  'GOOGLE' : 0,
  'BAIDU' : 1
};
ttypes.PointErrorCode = {
  'REQUEST_DUPLICATION' : 3001,
  'INVALID_PARAMETER' : 3002,
  'NOT_ENOUGH_BALANCE' : 3003,
  'AUTHENTICATION_FAIL' : 3004,
  'API_ACCESS_FORBIDDEN' : 3005,
  'MEMBER_ACCOUNT_NOT_FOUND' : 3006,
  'SERVICE_ACCOUNT_NOT_FOUND' : 3007,
  'TRANSACTION_NOT_FOUND' : 3008,
  'ALREADY_REVERSED_TRANSACTION' : 3009,
  'MESSAGE_NOT_READABLE' : 3010,
  'HTTP_REQUEST_METHOD_NOT_SUPPORTED' : 3011,
  'HTTP_MEDIA_TYPE_NOT_SUPPORTED' : 3012,
  'NOT_ALLOWED_TO_DEPOSIT' : 3013,
  'NOT_ALLOWED_TO_PAY' : 3014,
  'TRANSACTION_ACCESS_FORBIDDEN' : 3015,
  'INVALID_SERVICE_CONFIGURATION' : 4001,
  'DCS_COMMUNICATION_FAIL' : 5004,
  'UPDATE_BALANCE_FAIL' : 5007,
  'SYSTEM_ERROR' : 5999,
  'SYSTEM_MAINTENANCE' : 5888
};
ttypes.PrivacyLevelType = {
  'PUBLIC' : 0,
  'PRIVATE' : 1
};
ttypes.ProductBannerLinkType = {
  'BANNER_LINK_NONE' : 0,
  'BANNER_LINK_ITEM' : 1,
  'BANNER_LINK_URL' : 2,
  'BANNER_LINK_CATEGORY' : 3
};
ttypes.ProductEventType = {
  'NO_EVENT' : 0,
  'CARRIER_ANY' : 65537,
  'BUDDY_ANY' : 131073,
  'INSTALL_IOS' : 196609,
  'INSTALL_ANDROID' : 196610,
  'MISSION_ANY' : 262145,
  'MUSTBUY_ANY' : 327681
};
ttypes.ProfileAttribute = {
  'ALL' : 511,
  'EMAIL' : 1,
  'DISPLAY_NAME' : 2,
  'PHONETIC_NAME' : 4,
  'PICTURE' : 8,
  'STATUS_MESSAGE' : 16,
  'ALLOW_SEARCH_BY_USERID' : 32,
  'ALLOW_SEARCH_BY_EMAIL' : 64,
  'BUDDY_STATUS' : 128,
  'MUSIC_PROFILE' : 256
};
ttypes.PublicKeychainStatus = {
  'UPDATED' : 0,
  'DELETED' : 1,
  'RESTRICTED' : 2
};
ttypes.PublicType = {
  'HIDDEN' : 0,
  'PUBLIC' : 1000
};
ttypes.RedirectType = {
  'NONE' : 0,
  'EXPIRE_SECOND' : 1
};
ttypes.RegistrationType = {
  'PHONE' : 0,
  'EMAIL_WAP' : 1,
  'FACEBOOK' : 2305,
  'SINA' : 2306,
  'RENREN' : 2307,
  'FEIXIN' : 2308
};
ttypes.ReportCategory = {
  'PUSH_NORMAL_PLAIN' : 0,
  'PUSH_NORMAL_E2EE' : 1,
  'PUSH_VOIP_PLAIN' : 2,
  'PUSH_VOIP_E2EE' : 3
};
ttypes.ReservedMessageSessionId = {
  'DEFAULT' : 0,
  'HIDDEN_CHAT' : 1
};
ttypes.RoomAttribute = {
  'ALL' : 255,
  'NOTIFICATION_SETTING' : 1
};
ttypes.SecurityCenterSettingsType = {
  'NOT_APPLICABLE' : 0,
  'NOT_SET' : 1,
  'SET' : 2,
  'NEED_ENFORCED_INPUT' : 3
};
ttypes.ServiceCode = {
  'UNKNOWN' : 0,
  'TALK' : 1,
  'SQUARE' : 2
};
ttypes.SettingsAttribute = {
  'NOTIFICATION_ENABLE' : 1,
  'NOTIFICATION_MUTE_EXPIRATION' : 2,
  'NOTIFICATION_NEW_MESSAGE' : 4,
  'NOTIFICATION_GROUP_INVITATION' : 8,
  'NOTIFICATION_SHOW_MESSAGE' : 16,
  'NOTIFICATION_INCOMING_CALL' : 32,
  'NOTIFICATION_SOUND_MESSAGE' : 256,
  'NOTIFICATION_SOUND_GROUP' : 512,
  'NOTIFICATION_DISABLED_WITH_SUB' : 65536,
  'NOTIFICATION_PAYMENT' : 131072,
  'PRIVACY_SYNC_CONTACTS' : 64,
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 128,
  'PRIVACY_SEARCH_BY_USERID' : 8192,
  'PRIVACY_SEARCH_BY_EMAIL' : 16384,
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 2097152,
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 8388608,
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 1073741824,
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 33554432,
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 67108864,
  'PRIVACY_AGREE_USE_PAIDCALL' : 134217728,
  'CONTACT_MY_TICKET' : 1024,
  'IDENTITY_PROVIDER' : 2048,
  'IDENTITY_IDENTIFIER' : 4096,
  'SNS_ACCOUNT' : 524288,
  'PHONE_REGISTRATION' : 1048576,
  'PREFERENCE_LOCALE' : 32768,
  'CUSTOM_MODE' : 4194304,
  'EMAIL_CONFIRMATION_STATUS' : 16777216,
  'ACCOUNT_MIGRATION_PINCODE' : 268435456,
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 536870912,
  'SECURITY_CENTER_SETTINGS' : 262144
};
ttypes.SettingsAttributeEx = {
  'NOTIFICATION_ENABLE' : 0,
  'NOTIFICATION_MUTE_EXPIRATION' : 1,
  'NOTIFICATION_NEW_MESSAGE' : 2,
  'NOTIFICATION_GROUP_INVITATION' : 3,
  'NOTIFICATION_SHOW_MESSAGE' : 4,
  'NOTIFICATION_INCOMING_CALL' : 5,
  'NOTIFICATION_SOUND_MESSAGE' : 8,
  'NOTIFICATION_SOUND_GROUP' : 9,
  'NOTIFICATION_DISABLED_WITH_SUB' : 16,
  'NOTIFICATION_PAYMENT' : 17,
  'NOTIFICATION_MENTION' : 40,
  'PRIVACY_SYNC_CONTACTS' : 6,
  'PRIVACY_SEARCH_BY_PHONE_NUMBER' : 7,
  'PRIVACY_SEARCH_BY_USERID' : 13,
  'PRIVACY_SEARCH_BY_EMAIL' : 14,
  'PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN' : 21,
  'PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME' : 23,
  'PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME' : 35,
  'PRIVACY_ALLOW_FRIEND_REQUEST' : 30,
  'PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND' : 25,
  'PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL' : 26,
  'PRIVACY_AGREE_USE_PAIDCALL' : 27,
  'CONTACT_MY_TICKET' : 10,
  'IDENTITY_PROVIDER' : 11,
  'IDENTITY_IDENTIFIER' : 12,
  'SNS_ACCOUNT' : 19,
  'PHONE_REGISTRATION' : 20,
  'PREFERENCE_LOCALE' : 15,
  'CUSTOM_MODE' : 22,
  'EMAIL_CONFIRMATION_STATUS' : 24,
  'ACCOUNT_MIGRATION_PINCODE' : 28,
  'ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE' : 29,
  'SECURITY_CENTER_SETTINGS' : 18,
  'E2EE_ENABLE' : 33,
  'HITOKOTO_BACKUP_REQUESTED' : 34,
  'CONTACT_ALLOW_FOLLOWING' : 36,
  'PRIVACY_ALLOW_NEARBY' : 37,
  'AGREEMENT_NEARBY' : 38,
  'AGREEMENT_SQUARE' : 39,
  'ALLOW_UNREGISTRATION_SECONDARY_DEVICE' : 41,
  'AGREEMENT_BOT_USE' : 42
};
ttypes.SnsIdType = {
  'FACEBOOK' : 1,
  'SINA' : 2,
  'RENREN' : 3,
  'FEIXIN' : 4,
  'BBM' : 5
};
ttypes.SpammerReason = {
  'OTHER' : 0,
  'ADVERTISING' : 1,
  'GENDER_HARASSMENT' : 2,
  'HARASSMENT' : 3
};
ttypes.SpotCategory = {
  'UNKNOWN' : 0,
  'GOURMET' : 1,
  'BEAUTY' : 2,
  'TRAVEL' : 3,
  'SHOPPING' : 4,
  'ENTERTAINMENT' : 5,
  'SPORTS' : 6,
  'TRANSPORT' : 7,
  'LIFE' : 8,
  'HOSPITAL' : 9,
  'FINANCE' : 10,
  'EDUCATION' : 11,
  'OTHER' : 12,
  'ALL' : 10000
};
ttypes.StickerResourceType = {
  'STATIC' : 1,
  'ANIMATION' : 2,
  'SOUND' : 3,
  'ANIMATION_SOUND' : 4,
  'POPUP' : 5,
  'POPUP_SOUND' : 6
};
ttypes.SuggestDictionaryIncrementStatus = {
  'SUCCESS' : 0,
  'INVALID_REVISION' : 1,
  'TOO_LARGE_DATA' : 2,
  'SCHEME_CHANGED' : 3,
  'RETRY' : 4,
  'FAIL' : 5,
  'TOO_OLD_DATA' : 6
};
ttypes.SyncActionType = {
  'SYNC' : 0,
  'REPORT' : 1
};
ttypes.SyncCategory = {
  'PROFILE' : 0,
  'SETTINGS' : 1,
  'OPS' : 2,
  'CONTACT' : 3,
  'RECOMMEND' : 4,
  'BLOCK' : 5,
  'GROUP' : 6,
  'ROOM' : 7,
  'NOTIFICATION' : 8,
  'ADDRESS_BOOK' : 9
};
ttypes.SyncTriggerReason = {
  'OTHER' : 0,
  'REVISION_GAP_TOO_LARGE' : 1,
  'OPERATION_EXPIRED' : 2
};
ttypes.TMessageBoxStatus = {
  'ACTIVATED' : 1,
  'UNREAD' : 2
};
ttypes.TrackingType = {
};
ttypes.UnregistrationReason = {
  'UNREGISTRATION_REASON_UNREGISTER_USER' : 1,
  'UNREGISTRATION_REASON_UNBIND_DEVICE' : 2
};
ttypes.UserAgeType = {
  'OVER' : 1,
  'UNDER' : 2,
  'UNDEFINED' : 3
};
ttypes.UserStatus = {
  'NORMAL' : 0,
  'UNBOUND' : 1,
  'UNREGISTERED' : 2
};
ttypes.VerificationMethod = {
  'NO_AVAILABLE' : 0,
  'PIN_VIA_SMS' : 1,
  'CALLERID_INDIGO' : 2,
  'PIN_VIA_TTS' : 4,
  'SKIP' : 10
};
ttypes.VerificationResult = {
  'FAILED' : 0,
  'OK_NOT_REGISTERED_YET' : 1,
  'OK_REGISTERED_WITH_SAME_DEVICE' : 2,
  'OK_REGISTERED_WITH_ANOTHER_DEVICE' : 3
};
ttypes.WapInvitationType = {
  'REGISTRATION' : 1,
  'CHAT' : 2
};
var AgeCheckDocomoResult = module.exports.AgeCheckDocomoResult = function(args) {
  this.authUrl = null;
  this.userAgeType = null;
  if (args) {
    if (args.authUrl !== undefined && args.authUrl !== null) {
      this.authUrl = args.authUrl;
    }
    if (args.userAgeType !== undefined && args.userAgeType !== null) {
      this.userAgeType = args.userAgeType;
    }
  }
};
AgeCheckDocomoResult.prototype = {};
AgeCheckDocomoResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.userAgeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckDocomoResult.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckDocomoResult');
  if (this.authUrl !== null && this.authUrl !== undefined) {
    output.writeFieldBegin('authUrl', Thrift.Type.STRING, 1);
    output.writeString(this.authUrl);
    output.writeFieldEnd();
  }
  if (this.userAgeType !== null && this.userAgeType !== undefined) {
    output.writeFieldBegin('userAgeType', Thrift.Type.I32, 2);
    output.writeI32(this.userAgeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AgeCheckRequestResult = module.exports.AgeCheckRequestResult = function(args) {
  this.authUrl = null;
  this.sessionId = null;
  if (args) {
    if (args.authUrl !== undefined && args.authUrl !== null) {
      this.authUrl = args.authUrl;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
AgeCheckRequestResult.prototype = {};
AgeCheckRequestResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AgeCheckRequestResult.prototype.write = function(output) {
  output.writeStructBegin('AgeCheckRequestResult');
  if (this.authUrl !== null && this.authUrl !== undefined) {
    output.writeFieldBegin('authUrl', Thrift.Type.STRING, 1);
    output.writeString(this.authUrl);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AnalyticsInfo = module.exports.AnalyticsInfo = function(args) {
  this.gaSamplingRate = null;
  this.tmid = null;
  if (args) {
    if (args.gaSamplingRate !== undefined && args.gaSamplingRate !== null) {
      this.gaSamplingRate = args.gaSamplingRate;
    }
    if (args.tmid !== undefined && args.tmid !== null) {
      this.tmid = args.tmid;
    }
  }
};
AnalyticsInfo.prototype = {};
AnalyticsInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.gaSamplingRate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tmid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyticsInfo.prototype.write = function(output) {
  output.writeStructBegin('AnalyticsInfo');
  if (this.gaSamplingRate !== null && this.gaSamplingRate !== undefined) {
    output.writeFieldBegin('gaSamplingRate', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.gaSamplingRate);
    output.writeFieldEnd();
  }
  if (this.tmid !== null && this.tmid !== undefined) {
    output.writeFieldBegin('tmid', Thrift.Type.STRING, 2);
    output.writeString(this.tmid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Announcement = module.exports.Announcement = function(args) {
  this.index = null;
  this.forceUpdate = null;
  this.title = null;
  this.text = null;
  this.createdTime = null;
  this.pictureUrl = null;
  this.thumbnailUrl = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.forceUpdate !== undefined && args.forceUpdate !== null) {
      this.forceUpdate = args.forceUpdate;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.pictureUrl !== undefined && args.pictureUrl !== null) {
      this.pictureUrl = args.pictureUrl;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
  }
};
Announcement.prototype = {};
Announcement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.forceUpdate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.pictureUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Announcement.prototype.write = function(output) {
  output.writeStructBegin('Announcement');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 1);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  if (this.forceUpdate !== null && this.forceUpdate !== undefined) {
    output.writeFieldBegin('forceUpdate', Thrift.Type.BOOL, 10);
    output.writeBool(this.forceUpdate);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 11);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 12);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 13);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.pictureUrl !== null && this.pictureUrl !== undefined) {
    output.writeFieldBegin('pictureUrl', Thrift.Type.STRING, 14);
    output.writeString(this.pictureUrl);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 15);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApprovedChannelInfo = module.exports.ApprovedChannelInfo = function(args) {
  this.channelInfo = null;
  this.approvedAt = null;
  if (args) {
    if (args.channelInfo !== undefined && args.channelInfo !== null) {
      this.channelInfo = new ttypes.ChannelInfo(args.channelInfo);
    }
    if (args.approvedAt !== undefined && args.approvedAt !== null) {
      this.approvedAt = args.approvedAt;
    }
  }
};
ApprovedChannelInfo.prototype = {};
ApprovedChannelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.channelInfo = new ttypes.ChannelInfo();
        this.channelInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.approvedAt = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApprovedChannelInfo.prototype.write = function(output) {
  output.writeStructBegin('ApprovedChannelInfo');
  if (this.channelInfo !== null && this.channelInfo !== undefined) {
    output.writeFieldBegin('channelInfo', Thrift.Type.STRUCT, 1);
    this.channelInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.approvedAt !== null && this.approvedAt !== undefined) {
    output.writeFieldBegin('approvedAt', Thrift.Type.I64, 2);
    output.writeI64(this.approvedAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApprovedChannelInfos = module.exports.ApprovedChannelInfos = function(args) {
  this.approvedChannelInfos = null;
  this.revision = null;
  if (args) {
    if (args.approvedChannelInfos !== undefined && args.approvedChannelInfos !== null) {
      this.approvedChannelInfos = Thrift.copyList(args.approvedChannelInfos, [ttypes.ApprovedChannelInfo]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ApprovedChannelInfos.prototype = {};
ApprovedChannelInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.approvedChannelInfos = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ApprovedChannelInfo();
          elem6.read(input);
          this.approvedChannelInfos.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApprovedChannelInfos.prototype.write = function(output) {
  output.writeStructBegin('ApprovedChannelInfos');
  if (this.approvedChannelInfos !== null && this.approvedChannelInfos !== undefined) {
    output.writeFieldBegin('approvedChannelInfos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.approvedChannelInfos.length);
    for (var iter7 in this.approvedChannelInfos)
    {
      if (this.approvedChannelInfos.hasOwnProperty(iter7))
      {
        iter7 = this.approvedChannelInfos[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthQrcode = module.exports.AuthQrcode = function(args) {
  this.qrcode = null;
  this.verifier = null;
  this.callbackUrl = null;
  if (args) {
    if (args.qrcode !== undefined && args.qrcode !== null) {
      this.qrcode = args.qrcode;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.callbackUrl !== undefined && args.callbackUrl !== null) {
      this.callbackUrl = args.callbackUrl;
    }
  }
};
AuthQrcode.prototype = {};
AuthQrcode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.qrcode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.callbackUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthQrcode.prototype.write = function(output) {
  output.writeStructBegin('AuthQrcode');
  if (this.qrcode !== null && this.qrcode !== undefined) {
    output.writeFieldBegin('qrcode', Thrift.Type.STRING, 1);
    output.writeString(this.qrcode);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.callbackUrl !== null && this.callbackUrl !== undefined) {
    output.writeFieldBegin('callbackUrl', Thrift.Type.STRING, 3);
    output.writeString(this.callbackUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Balance = module.exports.Balance = function(args) {
  this.currentPointsFixedPointDecimal = null;
  if (args) {
    if (args.currentPointsFixedPointDecimal !== undefined && args.currentPointsFixedPointDecimal !== null) {
      this.currentPointsFixedPointDecimal = args.currentPointsFixedPointDecimal;
    }
  }
};
Balance.prototype = {};
Balance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currentPointsFixedPointDecimal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Balance.prototype.write = function(output) {
  output.writeStructBegin('Balance');
  if (this.currentPointsFixedPointDecimal !== null && this.currentPointsFixedPointDecimal !== undefined) {
    output.writeFieldBegin('currentPointsFixedPointDecimal', Thrift.Type.STRING, 1);
    output.writeString(this.currentPointsFixedPointDecimal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BanPage = module.exports.BanPage = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
BanPage.prototype = {};
BanPage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BanPage.prototype.write = function(output) {
  output.writeStructBegin('BanPage');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BeaconBackgroundNotification = module.exports.BeaconBackgroundNotification = function(args) {
  this.actionInterval = null;
  this.actionAndConditions = null;
  this.actionDelay = null;
  this.actionConditions = null;
  if (args) {
    if (args.actionInterval !== undefined && args.actionInterval !== null) {
      this.actionInterval = args.actionInterval;
    }
    if (args.actionAndConditions !== undefined && args.actionAndConditions !== null) {
      this.actionAndConditions = Thrift.copyList(args.actionAndConditions, [null]);
    }
    if (args.actionDelay !== undefined && args.actionDelay !== null) {
      this.actionDelay = args.actionDelay;
    }
    if (args.actionConditions !== undefined && args.actionConditions !== null) {
      this.actionConditions = Thrift.copyList(args.actionConditions, [Thrift.copyList, null]);
    }
  }
};
BeaconBackgroundNotification.prototype = {};
BeaconBackgroundNotification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.actionInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.actionAndConditions = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.BeaconCondition();
          elem14.read(input);
          this.actionAndConditions.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.actionDelay = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.actionConditions = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          var _size22 = 0;
          var _rtmp326;
          elem21 = [];
          var _etype25 = 0;
          _rtmp326 = input.readListBegin();
          _etype25 = _rtmp326.etype;
          _size22 = _rtmp326.size;
          for (var _i27 = 0; _i27 < _size22; ++_i27)
          {
            var elem28 = null;
            elem28 = new ttypes.BeaconCondition();
            elem28.read(input);
            elem21.push(elem28);
          }
          input.readListEnd();
          this.actionConditions.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BeaconBackgroundNotification.prototype.write = function(output) {
  output.writeStructBegin('BeaconBackgroundNotification');
  if (this.actionInterval !== null && this.actionInterval !== undefined) {
    output.writeFieldBegin('actionInterval', Thrift.Type.I64, 1);
    output.writeI64(this.actionInterval);
    output.writeFieldEnd();
  }
  if (this.actionAndConditions !== null && this.actionAndConditions !== undefined) {
    output.writeFieldBegin('actionAndConditions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.actionAndConditions.length);
    for (var iter29 in this.actionAndConditions)
    {
      if (this.actionAndConditions.hasOwnProperty(iter29))
      {
        iter29 = this.actionAndConditions[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionDelay !== null && this.actionDelay !== undefined) {
    output.writeFieldBegin('actionDelay', Thrift.Type.I64, 3);
    output.writeI64(this.actionDelay);
    output.writeFieldEnd();
  }
  if (this.actionConditions !== null && this.actionConditions !== undefined) {
    output.writeFieldBegin('actionConditions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.actionConditions.length);
    for (var iter30 in this.actionConditions)
    {
      if (this.actionConditions.hasOwnProperty(iter30))
      {
        iter30 = this.actionConditions[iter30];
        output.writeListBegin(Thrift.Type.STRUCT, iter30.length);
        for (var iter31 in iter30)
        {
          if (iter30.hasOwnProperty(iter31))
          {
            iter31 = iter30[iter31];
            iter31.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BeaconCondition = module.exports.BeaconCondition = function(args) {
  this.inFriends = null;
  this.notInFriends = null;
  this.termsAgreed = null;
  if (args) {
    if (args.inFriends !== undefined && args.inFriends !== null) {
      this.inFriends = args.inFriends;
    }
    if (args.notInFriends !== undefined && args.notInFriends !== null) {
      this.notInFriends = args.notInFriends;
    }
    if (args.termsAgreed !== undefined && args.termsAgreed !== null) {
      this.termsAgreed = args.termsAgreed;
    }
  }
};
BeaconCondition.prototype = {};
BeaconCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inFriends = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notInFriends = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.termsAgreed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BeaconCondition.prototype.write = function(output) {
  output.writeStructBegin('BeaconCondition');
  if (this.inFriends !== null && this.inFriends !== undefined) {
    output.writeFieldBegin('inFriends', Thrift.Type.STRING, 1);
    output.writeString(this.inFriends);
    output.writeFieldEnd();
  }
  if (this.notInFriends !== null && this.notInFriends !== undefined) {
    output.writeFieldBegin('notInFriends', Thrift.Type.STRING, 2);
    output.writeString(this.notInFriends);
    output.writeFieldEnd();
  }
  if (this.termsAgreed !== null && this.termsAgreed !== undefined) {
    output.writeFieldBegin('termsAgreed', Thrift.Type.BOOL, 3);
    output.writeBool(this.termsAgreed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BeaconLayerInfoAndActions = module.exports.BeaconLayerInfoAndActions = function(args) {
  this.pictureUrl = null;
  this.label = null;
  this.text = null;
  this.actions = null;
  this.showOrConditions = null;
  this.showConditions = null;
  this.timeToHide = null;
  if (args) {
    if (args.pictureUrl !== undefined && args.pictureUrl !== null) {
      this.pictureUrl = args.pictureUrl;
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.actions !== undefined && args.actions !== null) {
      this.actions = Thrift.copyList(args.actions, [null]);
    }
    if (args.showOrConditions !== undefined && args.showOrConditions !== null) {
      this.showOrConditions = Thrift.copyList(args.showOrConditions, [ttypes.BeaconCondition]);
    }
    if (args.showConditions !== undefined && args.showConditions !== null) {
      this.showConditions = Thrift.copyList(args.showConditions, [Thrift.copyList, ttypes.BeaconCondition]);
    }
    if (args.timeToHide !== undefined && args.timeToHide !== null) {
      this.timeToHide = args.timeToHide;
    }
  }
};
BeaconLayerInfoAndActions.prototype = {};
BeaconLayerInfoAndActions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.pictureUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.actions = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.actions.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.showOrConditions = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.BeaconCondition();
          elem45.read(input);
          this.showOrConditions.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.showConditions = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          var _size53 = 0;
          var _rtmp357;
          elem52 = [];
          var _etype56 = 0;
          _rtmp357 = input.readListBegin();
          _etype56 = _rtmp357.etype;
          _size53 = _rtmp357.size;
          for (var _i58 = 0; _i58 < _size53; ++_i58)
          {
            var elem59 = null;
            elem59 = new ttypes.BeaconCondition();
            elem59.read(input);
            elem52.push(elem59);
          }
          input.readListEnd();
          this.showConditions.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.timeToHide = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BeaconLayerInfoAndActions.prototype.write = function(output) {
  output.writeStructBegin('BeaconLayerInfoAndActions');
  if (this.pictureUrl !== null && this.pictureUrl !== undefined) {
    output.writeFieldBegin('pictureUrl', Thrift.Type.STRING, 1);
    output.writeString(this.pictureUrl);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 2);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.actions !== null && this.actions !== undefined) {
    output.writeFieldBegin('actions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.actions.length);
    for (var iter60 in this.actions)
    {
      if (this.actions.hasOwnProperty(iter60))
      {
        iter60 = this.actions[iter60];
        output.writeString(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.showOrConditions !== null && this.showOrConditions !== undefined) {
    output.writeFieldBegin('showOrConditions', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.showOrConditions.length);
    for (var iter61 in this.showOrConditions)
    {
      if (this.showOrConditions.hasOwnProperty(iter61))
      {
        iter61 = this.showOrConditions[iter61];
        iter61.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.showConditions !== null && this.showConditions !== undefined) {
    output.writeFieldBegin('showConditions', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.LIST, this.showConditions.length);
    for (var iter62 in this.showConditions)
    {
      if (this.showConditions.hasOwnProperty(iter62))
      {
        iter62 = this.showConditions[iter62];
        output.writeListBegin(Thrift.Type.STRUCT, iter62.length);
        for (var iter63 in iter62)
        {
          if (iter62.hasOwnProperty(iter63))
          {
            iter63 = iter62[iter63];
            iter63.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeToHide !== null && this.timeToHide !== undefined) {
    output.writeFieldBegin('timeToHide', Thrift.Type.I64, 7);
    output.writeI64(this.timeToHide);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BeaconQueryResponse = module.exports.BeaconQueryResponse = function(args) {
  this.deprecated_actionUrls = null;
  this.cacheTtl = null;
  this.touchActions = null;
  this.layerInfoAndActions = null;
  this.backgroundEnteringNotification = null;
  this.backgroundLeavingNotification = null;
  this.group = null;
  this.major = null;
  this.minor = null;
  this.effectiveRange = null;
  this.channelWhiteList = null;
  if (args) {
    if (args.deprecated_actionUrls !== undefined && args.deprecated_actionUrls !== null) {
      this.deprecated_actionUrls = Thrift.copyList(args.deprecated_actionUrls, [null]);
    }
    if (args.cacheTtl !== undefined && args.cacheTtl !== null) {
      this.cacheTtl = args.cacheTtl;
    }
    if (args.touchActions !== undefined && args.touchActions !== null) {
      this.touchActions = new ttypes.BeaconTouchActions(args.touchActions);
    }
    if (args.layerInfoAndActions !== undefined && args.layerInfoAndActions !== null) {
      this.layerInfoAndActions = new ttypes.BeaconLayerInfoAndActions(args.layerInfoAndActions);
    }
    if (args.backgroundEnteringNotification !== undefined && args.backgroundEnteringNotification !== null) {
      this.backgroundEnteringNotification = new ttypes.BeaconBackgroundNotification(args.backgroundEnteringNotification);
    }
    if (args.backgroundLeavingNotification !== undefined && args.backgroundLeavingNotification !== null) {
      this.backgroundLeavingNotification = new ttypes.BeaconBackgroundNotification(args.backgroundLeavingNotification);
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.major !== undefined && args.major !== null) {
      this.major = args.major;
    }
    if (args.minor !== undefined && args.minor !== null) {
      this.minor = args.minor;
    }
    if (args.effectiveRange !== undefined && args.effectiveRange !== null) {
      this.effectiveRange = args.effectiveRange;
    }
    if (args.channelWhiteList !== undefined && args.channelWhiteList !== null) {
      this.channelWhiteList = Thrift.copyList(args.channelWhiteList, [null]);
    }
  }
};
BeaconQueryResponse.prototype = {};
BeaconQueryResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.deprecated_actionUrls = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.deprecated_actionUrls.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.cacheTtl = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.touchActions = new ttypes.BeaconTouchActions();
        this.touchActions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.layerInfoAndActions = new ttypes.BeaconLayerInfoAndActions();
        this.layerInfoAndActions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.backgroundEnteringNotification = new ttypes.BeaconBackgroundNotification();
        this.backgroundEnteringNotification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.backgroundLeavingNotification = new ttypes.BeaconBackgroundNotification();
        this.backgroundLeavingNotification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.major = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.minor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.effectiveRange = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size71 = 0;
        var _rtmp375;
        this.channelWhiteList = [];
        var _etype74 = 0;
        _rtmp375 = input.readListBegin();
        _etype74 = _rtmp375.etype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var elem77 = null;
          elem77 = input.readString();
          this.channelWhiteList.push(elem77);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BeaconQueryResponse.prototype.write = function(output) {
  output.writeStructBegin('BeaconQueryResponse');
  if (this.deprecated_actionUrls !== null && this.deprecated_actionUrls !== undefined) {
    output.writeFieldBegin('deprecated_actionUrls', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.deprecated_actionUrls.length);
    for (var iter78 in this.deprecated_actionUrls)
    {
      if (this.deprecated_actionUrls.hasOwnProperty(iter78))
      {
        iter78 = this.deprecated_actionUrls[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cacheTtl !== null && this.cacheTtl !== undefined) {
    output.writeFieldBegin('cacheTtl', Thrift.Type.I64, 3);
    output.writeI64(this.cacheTtl);
    output.writeFieldEnd();
  }
  if (this.touchActions !== null && this.touchActions !== undefined) {
    output.writeFieldBegin('touchActions', Thrift.Type.STRUCT, 4);
    this.touchActions.write(output);
    output.writeFieldEnd();
  }
  if (this.layerInfoAndActions !== null && this.layerInfoAndActions !== undefined) {
    output.writeFieldBegin('layerInfoAndActions', Thrift.Type.STRUCT, 5);
    this.layerInfoAndActions.write(output);
    output.writeFieldEnd();
  }
  if (this.backgroundEnteringNotification !== null && this.backgroundEnteringNotification !== undefined) {
    output.writeFieldBegin('backgroundEnteringNotification', Thrift.Type.STRUCT, 6);
    this.backgroundEnteringNotification.write(output);
    output.writeFieldEnd();
  }
  if (this.backgroundLeavingNotification !== null && this.backgroundLeavingNotification !== undefined) {
    output.writeFieldBegin('backgroundLeavingNotification', Thrift.Type.STRUCT, 7);
    this.backgroundLeavingNotification.write(output);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 8);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.major !== null && this.major !== undefined) {
    output.writeFieldBegin('major', Thrift.Type.STRING, 9);
    output.writeString(this.major);
    output.writeFieldEnd();
  }
  if (this.minor !== null && this.minor !== undefined) {
    output.writeFieldBegin('minor', Thrift.Type.STRING, 10);
    output.writeString(this.minor);
    output.writeFieldEnd();
  }
  if (this.effectiveRange !== null && this.effectiveRange !== undefined) {
    output.writeFieldBegin('effectiveRange', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.effectiveRange);
    output.writeFieldEnd();
  }
  if (this.channelWhiteList !== null && this.channelWhiteList !== undefined) {
    output.writeFieldBegin('channelWhiteList', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.channelWhiteList.length);
    for (var iter79 in this.channelWhiteList)
    {
      if (this.channelWhiteList.hasOwnProperty(iter79))
      {
        iter79 = this.channelWhiteList[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BeaconTouchActions = module.exports.BeaconTouchActions = function(args) {
  this.actions = null;
  if (args) {
    if (args.actions !== undefined && args.actions !== null) {
      this.actions = Thrift.copyList(args.actions, [null]);
    }
  }
};
BeaconTouchActions.prototype = {};
BeaconTouchActions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.actions = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = input.readString();
          this.actions.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BeaconTouchActions.prototype.write = function(output) {
  output.writeStructBegin('BeaconTouchActions');
  if (this.actions !== null && this.actions !== undefined) {
    output.writeFieldBegin('actions', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.actions.length);
    for (var iter87 in this.actions)
    {
      if (this.actions.hasOwnProperty(iter87))
      {
        iter87 = this.actions[iter87];
        output.writeString(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BotUseInfo = module.exports.BotUseInfo = function(args) {
  this.botUseAgreementAccepted = null;
  this.botInFriends = null;
  this.primaryApplication = null;
  this.locale = null;
  if (args) {
    if (args.botUseAgreementAccepted !== undefined && args.botUseAgreementAccepted !== null) {
      this.botUseAgreementAccepted = args.botUseAgreementAccepted;
    }
    if (args.botInFriends !== undefined && args.botInFriends !== null) {
      this.botInFriends = args.botInFriends;
    }
    if (args.primaryApplication !== undefined && args.primaryApplication !== null) {
      this.primaryApplication = args.primaryApplication;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
  }
};
BotUseInfo.prototype = {};
BotUseInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.botUseAgreementAccepted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.botInFriends = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.primaryApplication = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BotUseInfo.prototype.write = function(output) {
  output.writeStructBegin('BotUseInfo');
  if (this.botUseAgreementAccepted !== null && this.botUseAgreementAccepted !== undefined) {
    output.writeFieldBegin('botUseAgreementAccepted', Thrift.Type.BOOL, 1);
    output.writeBool(this.botUseAgreementAccepted);
    output.writeFieldEnd();
  }
  if (this.botInFriends !== null && this.botInFriends !== undefined) {
    output.writeFieldBegin('botInFriends', Thrift.Type.BOOL, 2);
    output.writeBool(this.botInFriends);
    output.writeFieldEnd();
  }
  if (this.primaryApplication !== null && this.primaryApplication !== undefined) {
    output.writeFieldBegin('primaryApplication', Thrift.Type.STRING, 3);
    output.writeString(this.primaryApplication);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 4);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyBanner = module.exports.BuddyBanner = function(args) {
  this.buddyBannerLinkType = null;
  this.buddyBannerLink = null;
  this.buddyBannerImageUrl = null;
  this.width = null;
  this.height = null;
  this.bannerId = null;
  if (args) {
    if (args.buddyBannerLinkType !== undefined && args.buddyBannerLinkType !== null) {
      this.buddyBannerLinkType = args.buddyBannerLinkType;
    }
    if (args.buddyBannerLink !== undefined && args.buddyBannerLink !== null) {
      this.buddyBannerLink = args.buddyBannerLink;
    }
    if (args.buddyBannerImageUrl !== undefined && args.buddyBannerImageUrl !== null) {
      this.buddyBannerImageUrl = args.buddyBannerImageUrl;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.bannerId !== undefined && args.bannerId !== null) {
      this.bannerId = args.bannerId;
    }
  }
};
BuddyBanner.prototype = {};
BuddyBanner.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.buddyBannerLinkType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.buddyBannerLink = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.buddyBannerImageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.bannerId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyBanner.prototype.write = function(output) {
  output.writeStructBegin('BuddyBanner');
  if (this.buddyBannerLinkType !== null && this.buddyBannerLinkType !== undefined) {
    output.writeFieldBegin('buddyBannerLinkType', Thrift.Type.I32, 1);
    output.writeI32(this.buddyBannerLinkType);
    output.writeFieldEnd();
  }
  if (this.buddyBannerLink !== null && this.buddyBannerLink !== undefined) {
    output.writeFieldBegin('buddyBannerLink', Thrift.Type.STRING, 2);
    output.writeString(this.buddyBannerLink);
    output.writeFieldEnd();
  }
  if (this.buddyBannerImageUrl !== null && this.buddyBannerImageUrl !== undefined) {
    output.writeFieldBegin('buddyBannerImageUrl', Thrift.Type.STRING, 3);
    output.writeString(this.buddyBannerImageUrl);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 4);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 5);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.bannerId !== null && this.bannerId !== undefined) {
    output.writeFieldBegin('bannerId', Thrift.Type.I64, 6);
    output.writeI64(this.bannerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyCategoryEntry = module.exports.BuddyCategoryEntry = function(args) {
  this.classification = null;
  this.displayName = null;
  this.totalBuddyCount = null;
  if (args) {
    if (args.classification !== undefined && args.classification !== null) {
      this.classification = args.classification;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
      this.totalBuddyCount = args.totalBuddyCount;
    }
  }
};
BuddyCategoryEntry.prototype = {};
BuddyCategoryEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalBuddyCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyCategoryEntry.prototype.write = function(output) {
  output.writeStructBegin('BuddyCategoryEntry');
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 1);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
    output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalBuddyCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyCategoryView = module.exports.BuddyCategoryView = function(args) {
  this.categoryEntries = null;
  if (args) {
    if (args.categoryEntries !== undefined && args.categoryEntries !== null) {
      this.categoryEntries = Thrift.copyList(args.categoryEntries, [ttypes.BuddyCategoryEntry]);
    }
  }
};
BuddyCategoryView.prototype = {};
BuddyCategoryView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.categoryEntries = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.BuddyCategoryEntry();
          elem94.read(input);
          this.categoryEntries.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyCategoryView.prototype.write = function(output) {
  output.writeStructBegin('BuddyCategoryView');
  if (this.categoryEntries !== null && this.categoryEntries !== undefined) {
    output.writeFieldBegin('categoryEntries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.categoryEntries.length);
    for (var iter95 in this.categoryEntries)
    {
      if (this.categoryEntries.hasOwnProperty(iter95))
      {
        iter95 = this.categoryEntries[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyChatBar = module.exports.BuddyChatBar = function(args) {
  this.barItems = null;
  if (args) {
    if (args.barItems !== undefined && args.barItems !== null) {
      this.barItems = Thrift.copyList(args.barItems, [null]);
    }
  }
};
BuddyChatBar.prototype = {};
BuddyChatBar.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.barItems = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.BuddyChatBarItem();
          elem102.read(input);
          this.barItems.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyChatBar.prototype.write = function(output) {
  output.writeStructBegin('BuddyChatBar');
  if (this.barItems !== null && this.barItems !== undefined) {
    output.writeFieldBegin('barItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.barItems.length);
    for (var iter103 in this.barItems)
    {
      if (this.barItems.hasOwnProperty(iter103))
      {
        iter103 = this.barItems[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyChatBarItem = module.exports.BuddyChatBarItem = function(args) {
  this.rich = null;
  this.widgetList = null;
  this.web = null;
  if (args) {
    if (args.rich !== undefined && args.rich !== null) {
      this.rich = new ttypes.BuddyRichMenuChatBarItem(args.rich);
    }
    if (args.widgetList !== undefined && args.widgetList !== null) {
      this.widgetList = new ttypes.BuddyWidgetListCharBarItem(args.widgetList);
    }
    if (args.web !== undefined && args.web !== null) {
      this.web = new ttypes.BuddyWebChatBarItem(args.web);
    }
  }
};
BuddyChatBarItem.prototype = {};
BuddyChatBarItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rich = new ttypes.BuddyRichMenuChatBarItem();
        this.rich.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.widgetList = new ttypes.BuddyWidgetListCharBarItem();
        this.widgetList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.web = new ttypes.BuddyWebChatBarItem();
        this.web.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyChatBarItem.prototype.write = function(output) {
  output.writeStructBegin('BuddyChatBarItem');
  if (this.rich !== null && this.rich !== undefined) {
    output.writeFieldBegin('rich', Thrift.Type.STRUCT, 1);
    this.rich.write(output);
    output.writeFieldEnd();
  }
  if (this.widgetList !== null && this.widgetList !== undefined) {
    output.writeFieldBegin('widgetList', Thrift.Type.STRUCT, 2);
    this.widgetList.write(output);
    output.writeFieldEnd();
  }
  if (this.web !== null && this.web !== undefined) {
    output.writeFieldBegin('web', Thrift.Type.STRUCT, 3);
    this.web.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyCollection = module.exports.BuddyCollection = function(args) {
  this.code = null;
  this.displayName = null;
  this.totalBuddyCount = null;
  this.entries = null;
  this.horizontal = null;
  this.type = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
      this.totalBuddyCount = args.totalBuddyCount;
    }
    if (args.entries !== undefined && args.entries !== null) {
      this.entries = Thrift.copyList(args.entries, [null]);
    }
    if (args.horizontal !== undefined && args.horizontal !== null) {
      this.horizontal = args.horizontal;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
BuddyCollection.prototype = {};
BuddyCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalBuddyCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.entries = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.BuddyCollectionEntry();
          elem110.read(input);
          this.entries.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.horizontal = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyCollection.prototype.write = function(output) {
  output.writeStructBegin('BuddyCollection');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
    output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalBuddyCount);
    output.writeFieldEnd();
  }
  if (this.entries !== null && this.entries !== undefined) {
    output.writeFieldBegin('entries', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.entries.length);
    for (var iter111 in this.entries)
    {
      if (this.entries.hasOwnProperty(iter111))
      {
        iter111 = this.entries[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.horizontal !== null && this.horizontal !== undefined) {
    output.writeFieldBegin('horizontal', Thrift.Type.BOOL, 5);
    output.writeBool(this.horizontal);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyCollectionEntry = module.exports.BuddyCollectionEntry = function(args) {
  this.contact = null;
  this.onAir = null;
  this.asNew = null;
  if (args) {
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
    if (args.asNew !== undefined && args.asNew !== null) {
      this.asNew = args.asNew;
    }
  }
};
BuddyCollectionEntry.prototype = {};
BuddyCollectionEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.asNew = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyCollectionEntry.prototype.write = function(output) {
  output.writeStructBegin('BuddyCollectionEntry');
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 2);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  if (this.asNew !== null && this.asNew !== undefined) {
    output.writeFieldBegin('asNew', Thrift.Type.BOOL, 3);
    output.writeBool(this.asNew);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyDetail = module.exports.BuddyDetail = function(args) {
  this.mid = null;
  this.memberCount = null;
  this.onAir = null;
  this.businessAccount = null;
  this.addable = null;
  this.acceptableContentTypes = null;
  this.capableMyhome = null;
  this.freePhoneCallable = null;
  this.phoneNumberToDial = null;
  this.needPermissionApproval = null;
  this.channelId = null;
  this.channelProviderName = null;
  this.iconType = null;
  this.botType = null;
  this.showRichMenu = null;
  this.richMenuRevision = null;
  this.onAirLabel = null;
  this.useTheme = null;
  this.themeId = null;
  this.useBar = null;
  this.barRevision = null;
  this.useBackground = null;
  this.backgroundId = null;
  this.statusBarEnabled = null;
  this.statusBarRevision = null;
  this.capableChat = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.memberCount !== undefined && args.memberCount !== null) {
      this.memberCount = args.memberCount;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
    if (args.businessAccount !== undefined && args.businessAccount !== null) {
      this.businessAccount = args.businessAccount;
    }
    if (args.addable !== undefined && args.addable !== null) {
      this.addable = args.addable;
    }
    if (args.acceptableContentTypes !== undefined && args.acceptableContentTypes !== null) {
      this.acceptableContentTypes = Thrift.copyList(args.acceptableContentTypes, [null]);
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
    if (args.freePhoneCallable !== undefined && args.freePhoneCallable !== null) {
      this.freePhoneCallable = args.freePhoneCallable;
    }
    if (args.phoneNumberToDial !== undefined && args.phoneNumberToDial !== null) {
      this.phoneNumberToDial = args.phoneNumberToDial;
    }
    if (args.needPermissionApproval !== undefined && args.needPermissionApproval !== null) {
      this.needPermissionApproval = args.needPermissionApproval;
    }
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.channelProviderName !== undefined && args.channelProviderName !== null) {
      this.channelProviderName = args.channelProviderName;
    }
    if (args.iconType !== undefined && args.iconType !== null) {
      this.iconType = args.iconType;
    }
    if (args.botType !== undefined && args.botType !== null) {
      this.botType = args.botType;
    }
    if (args.showRichMenu !== undefined && args.showRichMenu !== null) {
      this.showRichMenu = args.showRichMenu;
    }
    if (args.richMenuRevision !== undefined && args.richMenuRevision !== null) {
      this.richMenuRevision = args.richMenuRevision;
    }
    if (args.onAirLabel !== undefined && args.onAirLabel !== null) {
      this.onAirLabel = args.onAirLabel;
    }
    if (args.useTheme !== undefined && args.useTheme !== null) {
      this.useTheme = args.useTheme;
    }
    if (args.themeId !== undefined && args.themeId !== null) {
      this.themeId = args.themeId;
    }
    if (args.useBar !== undefined && args.useBar !== null) {
      this.useBar = args.useBar;
    }
    if (args.barRevision !== undefined && args.barRevision !== null) {
      this.barRevision = args.barRevision;
    }
    if (args.useBackground !== undefined && args.useBackground !== null) {
      this.useBackground = args.useBackground;
    }
    if (args.backgroundId !== undefined && args.backgroundId !== null) {
      this.backgroundId = args.backgroundId;
    }
    if (args.statusBarEnabled !== undefined && args.statusBarEnabled !== null) {
      this.statusBarEnabled = args.statusBarEnabled;
    }
    if (args.statusBarRevision !== undefined && args.statusBarRevision !== null) {
      this.statusBarRevision = args.statusBarRevision;
    }
    if (args.capableChat !== undefined && args.capableChat !== null) {
      this.capableChat = args.capableChat;
    }
  }
};
BuddyDetail.prototype = {};
BuddyDetail.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.memberCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.businessAccount = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.addable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.SET) {
        var _size112 = 0;
        var _rtmp3116;
        this.acceptableContentTypes = [];
        var _etype115 = 0;
        _rtmp3116 = input.readSetBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readI32();
          this.acceptableContentTypes.push(elem118);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.freePhoneCallable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumberToDial = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.needPermissionApproval = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.channelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.channelProviderName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.iconType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.botType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.showRichMenu = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.richMenuRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.onAirLabel = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.useTheme = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.themeId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.useBar = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.barRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.useBackground = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.backgroundId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.statusBarEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I64) {
        this.statusBarRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.capableChat = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyDetail.prototype.write = function(output) {
  output.writeStructBegin('BuddyDetail');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.memberCount !== null && this.memberCount !== undefined) {
    output.writeFieldBegin('memberCount', Thrift.Type.I64, 2);
    output.writeI64(this.memberCount);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 3);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  if (this.businessAccount !== null && this.businessAccount !== undefined) {
    output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 4);
    output.writeBool(this.businessAccount);
    output.writeFieldEnd();
  }
  if (this.addable !== null && this.addable !== undefined) {
    output.writeFieldBegin('addable', Thrift.Type.BOOL, 5);
    output.writeBool(this.addable);
    output.writeFieldEnd();
  }
  if (this.acceptableContentTypes !== null && this.acceptableContentTypes !== undefined) {
    output.writeFieldBegin('acceptableContentTypes', Thrift.Type.SET, 6);
    output.writeSetBegin(Thrift.Type.I32, this.acceptableContentTypes.length);
    for (var iter119 in this.acceptableContentTypes)
    {
      if (this.acceptableContentTypes.hasOwnProperty(iter119))
      {
        iter119 = this.acceptableContentTypes[iter119];
        output.writeI32(iter119);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 7);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  if (this.freePhoneCallable !== null && this.freePhoneCallable !== undefined) {
    output.writeFieldBegin('freePhoneCallable', Thrift.Type.BOOL, 8);
    output.writeBool(this.freePhoneCallable);
    output.writeFieldEnd();
  }
  if (this.phoneNumberToDial !== null && this.phoneNumberToDial !== undefined) {
    output.writeFieldBegin('phoneNumberToDial', Thrift.Type.STRING, 9);
    output.writeString(this.phoneNumberToDial);
    output.writeFieldEnd();
  }
  if (this.needPermissionApproval !== null && this.needPermissionApproval !== undefined) {
    output.writeFieldBegin('needPermissionApproval', Thrift.Type.BOOL, 10);
    output.writeBool(this.needPermissionApproval);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.I32, 11);
    output.writeI32(this.channelId);
    output.writeFieldEnd();
  }
  if (this.channelProviderName !== null && this.channelProviderName !== undefined) {
    output.writeFieldBegin('channelProviderName', Thrift.Type.STRING, 12);
    output.writeString(this.channelProviderName);
    output.writeFieldEnd();
  }
  if (this.iconType !== null && this.iconType !== undefined) {
    output.writeFieldBegin('iconType', Thrift.Type.I32, 13);
    output.writeI32(this.iconType);
    output.writeFieldEnd();
  }
  if (this.botType !== null && this.botType !== undefined) {
    output.writeFieldBegin('botType', Thrift.Type.I32, 14);
    output.writeI32(this.botType);
    output.writeFieldEnd();
  }
  if (this.showRichMenu !== null && this.showRichMenu !== undefined) {
    output.writeFieldBegin('showRichMenu', Thrift.Type.BOOL, 15);
    output.writeBool(this.showRichMenu);
    output.writeFieldEnd();
  }
  if (this.richMenuRevision !== null && this.richMenuRevision !== undefined) {
    output.writeFieldBegin('richMenuRevision', Thrift.Type.I64, 16);
    output.writeI64(this.richMenuRevision);
    output.writeFieldEnd();
  }
  if (this.onAirLabel !== null && this.onAirLabel !== undefined) {
    output.writeFieldBegin('onAirLabel', Thrift.Type.I32, 17);
    output.writeI32(this.onAirLabel);
    output.writeFieldEnd();
  }
  if (this.useTheme !== null && this.useTheme !== undefined) {
    output.writeFieldBegin('useTheme', Thrift.Type.BOOL, 18);
    output.writeBool(this.useTheme);
    output.writeFieldEnd();
  }
  if (this.themeId !== null && this.themeId !== undefined) {
    output.writeFieldBegin('themeId', Thrift.Type.STRING, 19);
    output.writeString(this.themeId);
    output.writeFieldEnd();
  }
  if (this.useBar !== null && this.useBar !== undefined) {
    output.writeFieldBegin('useBar', Thrift.Type.BOOL, 20);
    output.writeBool(this.useBar);
    output.writeFieldEnd();
  }
  if (this.barRevision !== null && this.barRevision !== undefined) {
    output.writeFieldBegin('barRevision', Thrift.Type.I64, 21);
    output.writeI64(this.barRevision);
    output.writeFieldEnd();
  }
  if (this.useBackground !== null && this.useBackground !== undefined) {
    output.writeFieldBegin('useBackground', Thrift.Type.BOOL, 22);
    output.writeBool(this.useBackground);
    output.writeFieldEnd();
  }
  if (this.backgroundId !== null && this.backgroundId !== undefined) {
    output.writeFieldBegin('backgroundId', Thrift.Type.STRING, 23);
    output.writeString(this.backgroundId);
    output.writeFieldEnd();
  }
  if (this.statusBarEnabled !== null && this.statusBarEnabled !== undefined) {
    output.writeFieldBegin('statusBarEnabled', Thrift.Type.BOOL, 24);
    output.writeBool(this.statusBarEnabled);
    output.writeFieldEnd();
  }
  if (this.statusBarRevision !== null && this.statusBarRevision !== undefined) {
    output.writeFieldBegin('statusBarRevision', Thrift.Type.I64, 25);
    output.writeI64(this.statusBarRevision);
    output.writeFieldEnd();
  }
  if (this.capableChat !== null && this.capableChat !== undefined) {
    output.writeFieldBegin('capableChat', Thrift.Type.BOOL, 26);
    output.writeBool(this.capableChat);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyList = module.exports.BuddyList = function(args) {
  this.classification = null;
  this.displayName = null;
  this.totalBuddyCount = null;
  this.popularContacts = null;
  if (args) {
    if (args.classification !== undefined && args.classification !== null) {
      this.classification = args.classification;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.totalBuddyCount !== undefined && args.totalBuddyCount !== null) {
      this.totalBuddyCount = args.totalBuddyCount;
    }
    if (args.popularContacts !== undefined && args.popularContacts !== null) {
      this.popularContacts = Thrift.copyList(args.popularContacts, [null]);
    }
  }
};
BuddyList.prototype = {};
BuddyList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.classification = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalBuddyCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.popularContacts = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Contact();
          elem126.read(input);
          this.popularContacts.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyList.prototype.write = function(output) {
  output.writeStructBegin('BuddyList');
  if (this.classification !== null && this.classification !== undefined) {
    output.writeFieldBegin('classification', Thrift.Type.STRING, 1);
    output.writeString(this.classification);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.totalBuddyCount !== null && this.totalBuddyCount !== undefined) {
    output.writeFieldBegin('totalBuddyCount', Thrift.Type.I32, 3);
    output.writeI32(this.totalBuddyCount);
    output.writeFieldEnd();
  }
  if (this.popularContacts !== null && this.popularContacts !== undefined) {
    output.writeFieldBegin('popularContacts', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.popularContacts.length);
    for (var iter127 in this.popularContacts)
    {
      if (this.popularContacts.hasOwnProperty(iter127))
      {
        iter127 = this.popularContacts[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyMessageRequest = module.exports.BuddyMessageRequest = function(args) {
  this.contentType = null;
  this.text = null;
  this.location = null;
  this.content = null;
  this.contentMetadata = null;
  this.sourceContentId = null;
  this.usePermanent = null;
  this.toMid = null;
  if (args) {
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Location(args.location);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
    if (args.sourceContentId !== undefined && args.sourceContentId !== null) {
      this.sourceContentId = args.sourceContentId;
    }
    if (args.usePermanent !== undefined && args.usePermanent !== null) {
      this.usePermanent = args.usePermanent;
    }
    if (args.toMid !== undefined && args.toMid !== null) {
      this.toMid = args.toMid;
    }
  }
};
BuddyMessageRequest.prototype = {};
BuddyMessageRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size128 = 0;
        var _rtmp3132;
        this.contentMetadata = {};
        var _ktype129 = 0;
        var _vtype130 = 0;
        _rtmp3132 = input.readMapBegin();
        _ktype129 = _rtmp3132.ktype;
        _vtype130 = _rtmp3132.vtype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var key134 = null;
          var val135 = null;
          key134 = input.readString();
          val135 = input.readString();
          this.contentMetadata[key134] = val135;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sourceContentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.usePermanent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.toMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyMessageRequest.prototype.write = function(output) {
  output.writeStructBegin('BuddyMessageRequest');
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 1);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 3);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 4);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter136 in this.contentMetadata)
    {
      if (this.contentMetadata.hasOwnProperty(kiter136))
      {
        var viter137 = this.contentMetadata[kiter136];
        output.writeString(kiter136);
        output.writeString(viter137);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sourceContentId !== null && this.sourceContentId !== undefined) {
    output.writeFieldBegin('sourceContentId', Thrift.Type.STRING, 6);
    output.writeString(this.sourceContentId);
    output.writeFieldEnd();
  }
  if (this.usePermanent !== null && this.usePermanent !== undefined) {
    output.writeFieldBegin('usePermanent', Thrift.Type.BOOL, 7);
    output.writeBool(this.usePermanent);
    output.writeFieldEnd();
  }
  if (this.toMid !== null && this.toMid !== undefined) {
    output.writeFieldBegin('toMid', Thrift.Type.STRING, 8);
    output.writeString(this.toMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyNewsEntry = module.exports.BuddyNewsEntry = function(args) {
  this.banner = null;
  this.contact = null;
  this.memberCount = null;
  this.subtitle = null;
  this.releasedTime = null;
  this.newsId = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new ttypes.BuddyBanner(args.banner);
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
    if (args.memberCount !== undefined && args.memberCount !== null) {
      this.memberCount = args.memberCount;
    }
    if (args.subtitle !== undefined && args.subtitle !== null) {
      this.subtitle = args.subtitle;
    }
    if (args.releasedTime !== undefined && args.releasedTime !== null) {
      this.releasedTime = args.releasedTime;
    }
    if (args.newsId !== undefined && args.newsId !== null) {
      this.newsId = args.newsId;
    }
  }
};
BuddyNewsEntry.prototype = {};
BuddyNewsEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new ttypes.BuddyBanner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.memberCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.subtitle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.releasedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.newsId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyNewsEntry.prototype.write = function(output) {
  output.writeStructBegin('BuddyNewsEntry');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 2);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.memberCount !== null && this.memberCount !== undefined) {
    output.writeFieldBegin('memberCount', Thrift.Type.I64, 3);
    output.writeI64(this.memberCount);
    output.writeFieldEnd();
  }
  if (this.subtitle !== null && this.subtitle !== undefined) {
    output.writeFieldBegin('subtitle', Thrift.Type.STRING, 4);
    output.writeString(this.subtitle);
    output.writeFieldEnd();
  }
  if (this.releasedTime !== null && this.releasedTime !== undefined) {
    output.writeFieldBegin('releasedTime', Thrift.Type.I64, 5);
    output.writeI64(this.releasedTime);
    output.writeFieldEnd();
  }
  if (this.newsId !== null && this.newsId !== undefined) {
    output.writeFieldBegin('newsId', Thrift.Type.I64, 6);
    output.writeI64(this.newsId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyNewsView = module.exports.BuddyNewsView = function(args) {
  this.hasNext = null;
  this.newsEntries = null;
  if (args) {
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
    if (args.newsEntries !== undefined && args.newsEntries !== null) {
      this.newsEntries = Thrift.copyList(args.newsEntries, [ttypes.BuddyNewsEntry]);
    }
  }
};
BuddyNewsView.prototype = {};
BuddyNewsView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.newsEntries = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new ttypes.BuddyNewsEntry();
          elem144.read(input);
          this.newsEntries.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyNewsView.prototype.write = function(output) {
  output.writeStructBegin('BuddyNewsView');
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  if (this.newsEntries !== null && this.newsEntries !== undefined) {
    output.writeFieldBegin('newsEntries', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.newsEntries.length);
    for (var iter145 in this.newsEntries)
    {
      if (this.newsEntries.hasOwnProperty(iter145))
      {
        iter145 = this.newsEntries[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyOnAir = module.exports.BuddyOnAir = function(args) {
  this.mid = null;
  this.freshnessLifetime = null;
  this.onAirId = null;
  this.onAir = null;
  this.text = null;
  this.viewerCount = null;
  this.targetCount = null;
  this.livePlayTime = null;
  this.screenAspectRate = null;
  this.onAirType = null;
  this.onAirUrls = null;
  this.aspectRatioOfSource = null;
  this.useFadingOut = null;
  this.fadingOutIn = null;
  this.urlAfterFadingOut = null;
  this.labelAfterFadingOut = null;
  this.useLowerBanner = null;
  this.lowerBannerUrl = null;
  this.lowerBannerLabel = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.freshnessLifetime !== undefined && args.freshnessLifetime !== null) {
      this.freshnessLifetime = args.freshnessLifetime;
    }
    if (args.onAirId !== undefined && args.onAirId !== null) {
      this.onAirId = args.onAirId;
    }
    if (args.onAir !== undefined && args.onAir !== null) {
      this.onAir = args.onAir;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.viewerCount !== undefined && args.viewerCount !== null) {
      this.viewerCount = args.viewerCount;
    }
    if (args.targetCount !== undefined && args.targetCount !== null) {
      this.targetCount = args.targetCount;
    }
    if (args.livePlayTime !== undefined && args.livePlayTime !== null) {
      this.livePlayTime = args.livePlayTime;
    }
    if (args.screenAspectRate !== undefined && args.screenAspectRate !== null) {
      this.screenAspectRate = args.screenAspectRate;
    }
    if (args.onAirType !== undefined && args.onAirType !== null) {
      this.onAirType = args.onAirType;
    }
    if (args.onAirUrls !== undefined && args.onAirUrls !== null) {
      this.onAirUrls = new ttypes.BuddyOnAirUrls(args.onAirUrls);
    }
    if (args.aspectRatioOfSource !== undefined && args.aspectRatioOfSource !== null) {
      this.aspectRatioOfSource = args.aspectRatioOfSource;
    }
    if (args.useFadingOut !== undefined && args.useFadingOut !== null) {
      this.useFadingOut = args.useFadingOut;
    }
    if (args.fadingOutIn !== undefined && args.fadingOutIn !== null) {
      this.fadingOutIn = args.fadingOutIn;
    }
    if (args.urlAfterFadingOut !== undefined && args.urlAfterFadingOut !== null) {
      this.urlAfterFadingOut = args.urlAfterFadingOut;
    }
    if (args.labelAfterFadingOut !== undefined && args.labelAfterFadingOut !== null) {
      this.labelAfterFadingOut = args.labelAfterFadingOut;
    }
    if (args.useLowerBanner !== undefined && args.useLowerBanner !== null) {
      this.useLowerBanner = args.useLowerBanner;
    }
    if (args.lowerBannerUrl !== undefined && args.lowerBannerUrl !== null) {
      this.lowerBannerUrl = args.lowerBannerUrl;
    }
    if (args.lowerBannerLabel !== undefined && args.lowerBannerLabel !== null) {
      this.lowerBannerLabel = args.lowerBannerLabel;
    }
  }
};
BuddyOnAir.prototype = {};
BuddyOnAir.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.freshnessLifetime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.onAirId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.onAir = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.viewerCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.targetCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.livePlayTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.screenAspectRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.onAirType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.onAirUrls = new ttypes.BuddyOnAirUrls();
        this.onAirUrls.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.aspectRatioOfSource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.BOOL) {
        this.useFadingOut = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I64) {
        this.fadingOutIn = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRING) {
        this.urlAfterFadingOut = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRING) {
        this.labelAfterFadingOut = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.BOOL) {
        this.useLowerBanner = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRING) {
        this.lowerBannerUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.lowerBannerLabel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyOnAir.prototype.write = function(output) {
  output.writeStructBegin('BuddyOnAir');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.freshnessLifetime !== null && this.freshnessLifetime !== undefined) {
    output.writeFieldBegin('freshnessLifetime', Thrift.Type.I64, 3);
    output.writeI64(this.freshnessLifetime);
    output.writeFieldEnd();
  }
  if (this.onAirId !== null && this.onAirId !== undefined) {
    output.writeFieldBegin('onAirId', Thrift.Type.STRING, 4);
    output.writeString(this.onAirId);
    output.writeFieldEnd();
  }
  if (this.onAir !== null && this.onAir !== undefined) {
    output.writeFieldBegin('onAir', Thrift.Type.BOOL, 5);
    output.writeBool(this.onAir);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 11);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.viewerCount !== null && this.viewerCount !== undefined) {
    output.writeFieldBegin('viewerCount', Thrift.Type.I64, 12);
    output.writeI64(this.viewerCount);
    output.writeFieldEnd();
  }
  if (this.targetCount !== null && this.targetCount !== undefined) {
    output.writeFieldBegin('targetCount', Thrift.Type.I64, 13);
    output.writeI64(this.targetCount);
    output.writeFieldEnd();
  }
  if (this.livePlayTime !== null && this.livePlayTime !== undefined) {
    output.writeFieldBegin('livePlayTime', Thrift.Type.I64, 14);
    output.writeI64(this.livePlayTime);
    output.writeFieldEnd();
  }
  if (this.screenAspectRate !== null && this.screenAspectRate !== undefined) {
    output.writeFieldBegin('screenAspectRate', Thrift.Type.STRING, 15);
    output.writeString(this.screenAspectRate);
    output.writeFieldEnd();
  }
  if (this.onAirType !== null && this.onAirType !== undefined) {
    output.writeFieldBegin('onAirType', Thrift.Type.I32, 31);
    output.writeI32(this.onAirType);
    output.writeFieldEnd();
  }
  if (this.onAirUrls !== null && this.onAirUrls !== undefined) {
    output.writeFieldBegin('onAirUrls', Thrift.Type.STRUCT, 32);
    this.onAirUrls.write(output);
    output.writeFieldEnd();
  }
  if (this.aspectRatioOfSource !== null && this.aspectRatioOfSource !== undefined) {
    output.writeFieldBegin('aspectRatioOfSource', Thrift.Type.STRING, 33);
    output.writeString(this.aspectRatioOfSource);
    output.writeFieldEnd();
  }
  if (this.useFadingOut !== null && this.useFadingOut !== undefined) {
    output.writeFieldBegin('useFadingOut', Thrift.Type.BOOL, 41);
    output.writeBool(this.useFadingOut);
    output.writeFieldEnd();
  }
  if (this.fadingOutIn !== null && this.fadingOutIn !== undefined) {
    output.writeFieldBegin('fadingOutIn', Thrift.Type.I64, 42);
    output.writeI64(this.fadingOutIn);
    output.writeFieldEnd();
  }
  if (this.urlAfterFadingOut !== null && this.urlAfterFadingOut !== undefined) {
    output.writeFieldBegin('urlAfterFadingOut', Thrift.Type.STRING, 43);
    output.writeString(this.urlAfterFadingOut);
    output.writeFieldEnd();
  }
  if (this.labelAfterFadingOut !== null && this.labelAfterFadingOut !== undefined) {
    output.writeFieldBegin('labelAfterFadingOut', Thrift.Type.STRING, 44);
    output.writeString(this.labelAfterFadingOut);
    output.writeFieldEnd();
  }
  if (this.useLowerBanner !== null && this.useLowerBanner !== undefined) {
    output.writeFieldBegin('useLowerBanner', Thrift.Type.BOOL, 51);
    output.writeBool(this.useLowerBanner);
    output.writeFieldEnd();
  }
  if (this.lowerBannerUrl !== null && this.lowerBannerUrl !== undefined) {
    output.writeFieldBegin('lowerBannerUrl', Thrift.Type.STRING, 52);
    output.writeString(this.lowerBannerUrl);
    output.writeFieldEnd();
  }
  if (this.lowerBannerLabel !== null && this.lowerBannerLabel !== undefined) {
    output.writeFieldBegin('lowerBannerLabel', Thrift.Type.STRING, 53);
    output.writeString(this.lowerBannerLabel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyOnAirUrls = module.exports.BuddyOnAirUrls = function(args) {
  this.hls = null;
  this.smoothStreaming = null;
  if (args) {
    if (args.hls !== undefined && args.hls !== null) {
      this.hls = Thrift.copyMap(args.hls, [null]);
    }
    if (args.smoothStreaming !== undefined && args.smoothStreaming !== null) {
      this.smoothStreaming = Thrift.copyMap(args.smoothStreaming, [null]);
    }
  }
};
BuddyOnAirUrls.prototype = {};
BuddyOnAirUrls.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size146 = 0;
        var _rtmp3150;
        this.hls = {};
        var _ktype147 = 0;
        var _vtype148 = 0;
        _rtmp3150 = input.readMapBegin();
        _ktype147 = _rtmp3150.ktype;
        _vtype148 = _rtmp3150.vtype;
        _size146 = _rtmp3150.size;
        for (var _i151 = 0; _i151 < _size146; ++_i151)
        {
          var key152 = null;
          var val153 = null;
          key152 = input.readString();
          val153 = input.readString();
          this.hls[key152] = val153;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size154 = 0;
        var _rtmp3158;
        this.smoothStreaming = {};
        var _ktype155 = 0;
        var _vtype156 = 0;
        _rtmp3158 = input.readMapBegin();
        _ktype155 = _rtmp3158.ktype;
        _vtype156 = _rtmp3158.vtype;
        _size154 = _rtmp3158.size;
        for (var _i159 = 0; _i159 < _size154; ++_i159)
        {
          var key160 = null;
          var val161 = null;
          key160 = input.readString();
          val161 = input.readString();
          this.smoothStreaming[key160] = val161;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyOnAirUrls.prototype.write = function(output) {
  output.writeStructBegin('BuddyOnAirUrls');
  if (this.hls !== null && this.hls !== undefined) {
    output.writeFieldBegin('hls', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.hls));
    for (var kiter162 in this.hls)
    {
      if (this.hls.hasOwnProperty(kiter162))
      {
        var viter163 = this.hls[kiter162];
        output.writeString(kiter162);
        output.writeString(viter163);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.smoothStreaming !== null && this.smoothStreaming !== undefined) {
    output.writeFieldBegin('smoothStreaming', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.smoothStreaming));
    for (var kiter164 in this.smoothStreaming)
    {
      if (this.smoothStreaming.hasOwnProperty(kiter164))
      {
        var viter165 = this.smoothStreaming[kiter164];
        output.writeString(kiter164);
        output.writeString(viter165);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyProfile = module.exports.BuddyProfile = function(args) {
  this.buddyId = null;
  this.mid = null;
  this.searchId = null;
  this.displayName = null;
  this.statusMessage = null;
  this.contactCount = null;
  if (args) {
    if (args.buddyId !== undefined && args.buddyId !== null) {
      this.buddyId = args.buddyId;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.searchId !== undefined && args.searchId !== null) {
      this.searchId = args.searchId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.contactCount !== undefined && args.contactCount !== null) {
      this.contactCount = args.contactCount;
    }
  }
};
BuddyProfile.prototype = {};
BuddyProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.buddyId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.searchId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.contactCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyProfile.prototype.write = function(output) {
  output.writeStructBegin('BuddyProfile');
  if (this.buddyId !== null && this.buddyId !== undefined) {
    output.writeFieldBegin('buddyId', Thrift.Type.STRING, 1);
    output.writeString(this.buddyId);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.searchId !== null && this.searchId !== undefined) {
    output.writeFieldBegin('searchId', Thrift.Type.STRING, 3);
    output.writeString(this.searchId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 4);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.contactCount !== null && this.contactCount !== undefined) {
    output.writeFieldBegin('contactCount', Thrift.Type.I64, 11);
    output.writeI64(this.contactCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyProfilePopup = module.exports.BuddyProfilePopup = function(args) {
  this.popupType = null;
  this.linkUrl = null;
  this.backgroundColorRgb = null;
  this.textColorRgb = null;
  this.label = null;
  if (args) {
    if (args.popupType !== undefined && args.popupType !== null) {
      this.popupType = args.popupType;
    }
    if (args.linkUrl !== undefined && args.linkUrl !== null) {
      this.linkUrl = args.linkUrl;
    }
    if (args.backgroundColorRgb !== undefined && args.backgroundColorRgb !== null) {
      this.backgroundColorRgb = args.backgroundColorRgb;
    }
    if (args.textColorRgb !== undefined && args.textColorRgb !== null) {
      this.textColorRgb = args.textColorRgb;
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
  }
};
BuddyProfilePopup.prototype = {};
BuddyProfilePopup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.popupType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.linkUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.backgroundColorRgb = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.textColorRgb = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyProfilePopup.prototype.write = function(output) {
  output.writeStructBegin('BuddyProfilePopup');
  if (this.popupType !== null && this.popupType !== undefined) {
    output.writeFieldBegin('popupType', Thrift.Type.I32, 1);
    output.writeI32(this.popupType);
    output.writeFieldEnd();
  }
  if (this.linkUrl !== null && this.linkUrl !== undefined) {
    output.writeFieldBegin('linkUrl', Thrift.Type.STRING, 2);
    output.writeString(this.linkUrl);
    output.writeFieldEnd();
  }
  if (this.backgroundColorRgb !== null && this.backgroundColorRgb !== undefined) {
    output.writeFieldBegin('backgroundColorRgb', Thrift.Type.I32, 3);
    output.writeI32(this.backgroundColorRgb);
    output.writeFieldEnd();
  }
  if (this.textColorRgb !== null && this.textColorRgb !== undefined) {
    output.writeFieldBegin('textColorRgb', Thrift.Type.I32, 4);
    output.writeI32(this.textColorRgb);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 5);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyRichMenuChatBarItem = module.exports.BuddyRichMenuChatBarItem = function(args) {
  this.label = null;
  this.body = null;
  this.selected = null;
  if (args) {
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.selected !== undefined && args.selected !== null) {
      this.selected = args.selected;
    }
  }
};
BuddyRichMenuChatBarItem.prototype = {};
BuddyRichMenuChatBarItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.selected = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyRichMenuChatBarItem.prototype.write = function(output) {
  output.writeStructBegin('BuddyRichMenuChatBarItem');
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 1);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 2);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.selected !== null && this.selected !== undefined) {
    output.writeFieldBegin('selected', Thrift.Type.BOOL, 3);
    output.writeBool(this.selected);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyRichMenuContents = module.exports.BuddyRichMenuContents = function(args) {
  this.body = null;
  if (args) {
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
BuddyRichMenuContents.prototype = {};
BuddyRichMenuContents.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyRichMenuContents.prototype.write = function(output) {
  output.writeStructBegin('BuddyRichMenuContents');
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 1);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddySearchResult = module.exports.BuddySearchResult = function(args) {
  this.mid = null;
  this.displayName = null;
  this.pictureStatus = null;
  this.picturePath = null;
  this.statusMessage = null;
  this.businessAccount = null;
  this.iconType = null;
  this.botType = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.businessAccount !== undefined && args.businessAccount !== null) {
      this.businessAccount = args.businessAccount;
    }
    if (args.iconType !== undefined && args.iconType !== null) {
      this.iconType = args.iconType;
    }
    if (args.botType !== undefined && args.botType !== null) {
      this.botType = args.botType;
    }
  }
};
BuddySearchResult.prototype = {};
BuddySearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.businessAccount = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.iconType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.botType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddySearchResult.prototype.write = function(output) {
  output.writeStructBegin('BuddySearchResult');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.businessAccount !== null && this.businessAccount !== undefined) {
    output.writeFieldBegin('businessAccount', Thrift.Type.BOOL, 6);
    output.writeBool(this.businessAccount);
    output.writeFieldEnd();
  }
  if (this.iconType !== null && this.iconType !== undefined) {
    output.writeFieldBegin('iconType', Thrift.Type.I32, 7);
    output.writeI32(this.iconType);
    output.writeFieldEnd();
  }
  if (this.botType !== null && this.botType !== undefined) {
    output.writeFieldBegin('botType', Thrift.Type.I32, 8);
    output.writeI32(this.botType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyStatusBar = module.exports.BuddyStatusBar = function(args) {
  this.label = null;
  this.displayType = null;
  if (args) {
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.displayType !== undefined && args.displayType !== null) {
      this.displayType = args.displayType;
    }
  }
};
BuddyStatusBar.prototype = {};
BuddyStatusBar.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.displayType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyStatusBar.prototype.write = function(output) {
  output.writeStructBegin('BuddyStatusBar');
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 1);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.displayType !== null && this.displayType !== undefined) {
    output.writeFieldBegin('displayType', Thrift.Type.I32, 2);
    output.writeI32(this.displayType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyTopView = module.exports.BuddyTopView = function(args) {
  this.banners = null;
  this.collections = null;
  this.rotationInterval = null;
  if (args) {
    if (args.banners !== undefined && args.banners !== null) {
      this.banners = Thrift.copyList(args.banners, [ttypes.BuddyBanner]);
    }
    if (args.collections !== undefined && args.collections !== null) {
      this.collections = Thrift.copyList(args.collections, [ttypes.BuddyCollection]);
    }
    if (args.rotationInterval !== undefined && args.rotationInterval !== null) {
      this.rotationInterval = args.rotationInterval;
    }
  }
};
BuddyTopView.prototype = {};
BuddyTopView.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size166 = 0;
        var _rtmp3170;
        this.banners = [];
        var _etype169 = 0;
        _rtmp3170 = input.readListBegin();
        _etype169 = _rtmp3170.etype;
        _size166 = _rtmp3170.size;
        for (var _i171 = 0; _i171 < _size166; ++_i171)
        {
          var elem172 = null;
          elem172 = new ttypes.BuddyBanner();
          elem172.read(input);
          this.banners.push(elem172);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size173 = 0;
        var _rtmp3177;
        this.collections = [];
        var _etype176 = 0;
        _rtmp3177 = input.readListBegin();
        _etype176 = _rtmp3177.etype;
        _size173 = _rtmp3177.size;
        for (var _i178 = 0; _i178 < _size173; ++_i178)
        {
          var elem179 = null;
          elem179 = new ttypes.BuddyCollection();
          elem179.read(input);
          this.collections.push(elem179);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.rotationInterval = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyTopView.prototype.write = function(output) {
  output.writeStructBegin('BuddyTopView');
  if (this.banners !== null && this.banners !== undefined) {
    output.writeFieldBegin('banners', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.banners.length);
    for (var iter180 in this.banners)
    {
      if (this.banners.hasOwnProperty(iter180))
      {
        iter180 = this.banners[iter180];
        iter180.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.collections !== null && this.collections !== undefined) {
    output.writeFieldBegin('collections', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.collections.length);
    for (var iter181 in this.collections)
    {
      if (this.collections.hasOwnProperty(iter181))
      {
        iter181 = this.collections[iter181];
        iter181.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rotationInterval !== null && this.rotationInterval !== undefined) {
    output.writeFieldBegin('rotationInterval', Thrift.Type.I64, 3);
    output.writeI64(this.rotationInterval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyWebChatBarItem = module.exports.BuddyWebChatBarItem = function(args) {
  this.label = null;
  this.url = null;
  if (args) {
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
BuddyWebChatBarItem.prototype = {};
BuddyWebChatBarItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyWebChatBarItem.prototype.write = function(output) {
  output.writeStructBegin('BuddyWebChatBarItem');
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 1);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyWidget = module.exports.BuddyWidget = function(args) {
  this.icon = null;
  this.label = null;
  this.url = null;
  if (args) {
    if (args.icon !== undefined && args.icon !== null) {
      this.icon = args.icon;
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
BuddyWidget.prototype = {};
BuddyWidget.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.icon = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyWidget.prototype.write = function(output) {
  output.writeStructBegin('BuddyWidget');
  if (this.icon !== null && this.icon !== undefined) {
    output.writeFieldBegin('icon', Thrift.Type.STRING, 1);
    output.writeString(this.icon);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 2);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 3);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BuddyWidgetListCharBarItem = module.exports.BuddyWidgetListCharBarItem = function(args) {
  this.label = null;
  this.widgets = null;
  this.selected = null;
  if (args) {
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.widgets !== undefined && args.widgets !== null) {
      this.widgets = Thrift.copyList(args.widgets, [ttypes.BuddyWidget]);
    }
    if (args.selected !== undefined && args.selected !== null) {
      this.selected = args.selected;
    }
  }
};
BuddyWidgetListCharBarItem.prototype = {};
BuddyWidgetListCharBarItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size182 = 0;
        var _rtmp3186;
        this.widgets = [];
        var _etype185 = 0;
        _rtmp3186 = input.readListBegin();
        _etype185 = _rtmp3186.etype;
        _size182 = _rtmp3186.size;
        for (var _i187 = 0; _i187 < _size182; ++_i187)
        {
          var elem188 = null;
          elem188 = new ttypes.BuddyWidget();
          elem188.read(input);
          this.widgets.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.selected = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BuddyWidgetListCharBarItem.prototype.write = function(output) {
  output.writeStructBegin('BuddyWidgetListCharBarItem');
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 1);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.widgets !== null && this.widgets !== undefined) {
    output.writeFieldBegin('widgets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.widgets.length);
    for (var iter189 in this.widgets)
    {
      if (this.widgets.hasOwnProperty(iter189))
      {
        iter189 = this.widgets[iter189];
        iter189.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selected !== null && this.selected !== undefined) {
    output.writeFieldBegin('selected', Thrift.Type.BOOL, 3);
    output.writeBool(this.selected);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CallHost = module.exports.CallHost = function(args) {
  this.host = null;
  this.port = null;
  this.zone = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    }
    if (args.zone !== undefined && args.zone !== null) {
      this.zone = args.zone;
    }
  }
};
CallHost.prototype = {};
CallHost.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.zone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CallHost.prototype.write = function(output) {
  output.writeStructBegin('CallHost');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.STRING, 3);
    output.writeString(this.zone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelDomain = module.exports.ChannelDomain = function(args) {
  this.host = null;
  this.removed = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    }
    if (args.removed !== undefined && args.removed !== null) {
      this.removed = args.removed;
    }
  }
};
ChannelDomain.prototype = {};
ChannelDomain.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.removed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelDomain.prototype.write = function(output) {
  output.writeStructBegin('ChannelDomain');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.removed !== null && this.removed !== undefined) {
    output.writeFieldBegin('removed', Thrift.Type.BOOL, 2);
    output.writeBool(this.removed);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelDomains = module.exports.ChannelDomains = function(args) {
  this.channelDomains = null;
  this.revision = null;
  if (args) {
    if (args.channelDomains !== undefined && args.channelDomains !== null) {
      this.channelDomains = Thrift.copyList(args.channelDomains, [ttypes.ChannelDomain]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ChannelDomains.prototype = {};
ChannelDomains.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size190 = 0;
        var _rtmp3194;
        this.channelDomains = [];
        var _etype193 = 0;
        _rtmp3194 = input.readListBegin();
        _etype193 = _rtmp3194.etype;
        _size190 = _rtmp3194.size;
        for (var _i195 = 0; _i195 < _size190; ++_i195)
        {
          var elem196 = null;
          elem196 = new ttypes.ChannelDomain();
          elem196.read(input);
          this.channelDomains.push(elem196);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelDomains.prototype.write = function(output) {
  output.writeStructBegin('ChannelDomains');
  if (this.channelDomains !== null && this.channelDomains !== undefined) {
    output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
    for (var iter197 in this.channelDomains)
    {
      if (this.channelDomains.hasOwnProperty(iter197))
      {
        iter197 = this.channelDomains[iter197];
        iter197.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelException = module.exports.ChannelException = function(args) {
  Thrift.TException.call(this, "ChannelException");
  this.name = "ChannelException";
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(ChannelException, Thrift.TException);
ChannelException.prototype.name = 'ChannelException';
ChannelException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size198 = 0;
        var _rtmp3202;
        this.parameterMap = {};
        var _ktype199 = 0;
        var _vtype200 = 0;
        _rtmp3202 = input.readMapBegin();
        _ktype199 = _rtmp3202.ktype;
        _vtype200 = _rtmp3202.vtype;
        _size198 = _rtmp3202.size;
        for (var _i203 = 0; _i203 < _size198; ++_i203)
        {
          var key204 = null;
          var val205 = null;
          key204 = input.readString();
          val205 = input.readString();
          this.parameterMap[key204] = val205;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelException.prototype.write = function(output) {
  output.writeStructBegin('ChannelException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter206 in this.parameterMap)
    {
      if (this.parameterMap.hasOwnProperty(kiter206))
      {
        var viter207 = this.parameterMap[kiter206];
        output.writeString(kiter206);
        output.writeString(viter207);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelIdWithLastUpdated = module.exports.ChannelIdWithLastUpdated = function(args) {
  this.channelId = null;
  this.lastUpdated = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastUpdated !== undefined && args.lastUpdated !== null) {
      this.lastUpdated = args.lastUpdated;
    }
  }
};
ChannelIdWithLastUpdated.prototype = {};
ChannelIdWithLastUpdated.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.lastUpdated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelIdWithLastUpdated.prototype.write = function(output) {
  output.writeStructBegin('ChannelIdWithLastUpdated');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastUpdated !== null && this.lastUpdated !== undefined) {
    output.writeFieldBegin('lastUpdated', Thrift.Type.I64, 2);
    output.writeI64(this.lastUpdated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelInfo = module.exports.ChannelInfo = function(args) {
  this.channelId = null;
  this.name = null;
  this.entryPageUrl = null;
  this.descriptionText = null;
  this.provider = null;
  this.publicType = null;
  this.iconImage = null;
  this.permissions = null;
  this.iconThumbnailImage = null;
  this.channelConfigurations = null;
  this.lcsAllApiUsable = null;
  this.allowedPermissions = null;
  this.channelDomains = null;
  this.updatedTimestamp = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.entryPageUrl !== undefined && args.entryPageUrl !== null) {
      this.entryPageUrl = args.entryPageUrl;
    }
    if (args.descriptionText !== undefined && args.descriptionText !== null) {
      this.descriptionText = args.descriptionText;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = new ttypes.ChannelProvider(args.provider);
    }
    if (args.publicType !== undefined && args.publicType !== null) {
      this.publicType = args.publicType;
    }
    if (args.iconImage !== undefined && args.iconImage !== null) {
      this.iconImage = args.iconImage;
    }
    if (args.permissions !== undefined && args.permissions !== null) {
      this.permissions = Thrift.copyList(args.permissions, [null]);
    }
    if (args.iconThumbnailImage !== undefined && args.iconThumbnailImage !== null) {
      this.iconThumbnailImage = args.iconThumbnailImage;
    }
    if (args.channelConfigurations !== undefined && args.channelConfigurations !== null) {
      this.channelConfigurations = Thrift.copyList(args.channelConfigurations, [null]);
    }
    if (args.lcsAllApiUsable !== undefined && args.lcsAllApiUsable !== null) {
      this.lcsAllApiUsable = args.lcsAllApiUsable;
    }
    if (args.allowedPermissions !== undefined && args.allowedPermissions !== null) {
      this.allowedPermissions = Thrift.copyList(args.allowedPermissions, [null]);
    }
    if (args.channelDomains !== undefined && args.channelDomains !== null) {
      this.channelDomains = Thrift.copyList(args.channelDomains, [ttypes.ChannelDomain]);
    }
    if (args.updatedTimestamp !== undefined && args.updatedTimestamp !== null) {
      this.updatedTimestamp = args.updatedTimestamp;
    }
  }
};
ChannelInfo.prototype = {};
ChannelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.entryPageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.provider = new ttypes.ChannelProvider();
        this.provider.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.publicType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.iconImage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.permissions = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = input.readString();
          this.permissions.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.iconThumbnailImage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size215 = 0;
        var _rtmp3219;
        this.channelConfigurations = [];
        var _etype218 = 0;
        _rtmp3219 = input.readListBegin();
        _etype218 = _rtmp3219.etype;
        _size215 = _rtmp3219.size;
        for (var _i220 = 0; _i220 < _size215; ++_i220)
        {
          var elem221 = null;
          elem221 = input.readI32();
          this.channelConfigurations.push(elem221);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.lcsAllApiUsable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.SET) {
        var _size222 = 0;
        var _rtmp3226;
        this.allowedPermissions = [];
        var _etype225 = 0;
        _rtmp3226 = input.readSetBegin();
        _etype225 = _rtmp3226.etype;
        _size222 = _rtmp3226.size;
        for (var _i227 = 0; _i227 < _size222; ++_i227)
        {
          var elem228 = null;
          elem228 = input.readI32();
          this.allowedPermissions.push(elem228);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size229 = 0;
        var _rtmp3233;
        this.channelDomains = [];
        var _etype232 = 0;
        _rtmp3233 = input.readListBegin();
        _etype232 = _rtmp3233.etype;
        _size229 = _rtmp3233.size;
        for (var _i234 = 0; _i234 < _size229; ++_i234)
        {
          var elem235 = null;
          elem235 = new ttypes.ChannelDomain();
          elem235.read(input);
          this.channelDomains.push(elem235);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.updatedTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelInfo.prototype.write = function(output) {
  output.writeStructBegin('ChannelInfo');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.entryPageUrl !== null && this.entryPageUrl !== undefined) {
    output.writeFieldBegin('entryPageUrl', Thrift.Type.STRING, 4);
    output.writeString(this.entryPageUrl);
    output.writeFieldEnd();
  }
  if (this.descriptionText !== null && this.descriptionText !== undefined) {
    output.writeFieldBegin('descriptionText', Thrift.Type.STRING, 5);
    output.writeString(this.descriptionText);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRUCT, 6);
    this.provider.write(output);
    output.writeFieldEnd();
  }
  if (this.publicType !== null && this.publicType !== undefined) {
    output.writeFieldBegin('publicType', Thrift.Type.I32, 7);
    output.writeI32(this.publicType);
    output.writeFieldEnd();
  }
  if (this.iconImage !== null && this.iconImage !== undefined) {
    output.writeFieldBegin('iconImage', Thrift.Type.STRING, 8);
    output.writeString(this.iconImage);
    output.writeFieldEnd();
  }
  if (this.permissions !== null && this.permissions !== undefined) {
    output.writeFieldBegin('permissions', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.permissions.length);
    for (var iter236 in this.permissions)
    {
      if (this.permissions.hasOwnProperty(iter236))
      {
        iter236 = this.permissions[iter236];
        output.writeString(iter236);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.iconThumbnailImage !== null && this.iconThumbnailImage !== undefined) {
    output.writeFieldBegin('iconThumbnailImage', Thrift.Type.STRING, 11);
    output.writeString(this.iconThumbnailImage);
    output.writeFieldEnd();
  }
  if (this.channelConfigurations !== null && this.channelConfigurations !== undefined) {
    output.writeFieldBegin('channelConfigurations', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.I32, this.channelConfigurations.length);
    for (var iter237 in this.channelConfigurations)
    {
      if (this.channelConfigurations.hasOwnProperty(iter237))
      {
        iter237 = this.channelConfigurations[iter237];
        output.writeI32(iter237);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lcsAllApiUsable !== null && this.lcsAllApiUsable !== undefined) {
    output.writeFieldBegin('lcsAllApiUsable', Thrift.Type.BOOL, 13);
    output.writeBool(this.lcsAllApiUsable);
    output.writeFieldEnd();
  }
  if (this.allowedPermissions !== null && this.allowedPermissions !== undefined) {
    output.writeFieldBegin('allowedPermissions', Thrift.Type.SET, 14);
    output.writeSetBegin(Thrift.Type.I32, this.allowedPermissions.length);
    for (var iter238 in this.allowedPermissions)
    {
      if (this.allowedPermissions.hasOwnProperty(iter238))
      {
        iter238 = this.allowedPermissions[iter238];
        output.writeI32(iter238);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.channelDomains !== null && this.channelDomains !== undefined) {
    output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
    for (var iter239 in this.channelDomains)
    {
      if (this.channelDomains.hasOwnProperty(iter239))
      {
        iter239 = this.channelDomains[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.updatedTimestamp !== null && this.updatedTimestamp !== undefined) {
    output.writeFieldBegin('updatedTimestamp', Thrift.Type.I64, 16);
    output.writeI64(this.updatedTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelInfos = module.exports.ChannelInfos = function(args) {
  this.channelInfos = null;
  this.revision = null;
  if (args) {
    if (args.channelInfos !== undefined && args.channelInfos !== null) {
      this.channelInfos = Thrift.copyList(args.channelInfos, [ttypes.ChannelInfo]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ChannelInfos.prototype = {};
ChannelInfos.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.channelInfos = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = new ttypes.ChannelInfo();
          elem246.read(input);
          this.channelInfos.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelInfos.prototype.write = function(output) {
  output.writeStructBegin('ChannelInfos');
  if (this.channelInfos !== null && this.channelInfos !== undefined) {
    output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
    for (var iter247 in this.channelInfos)
    {
      if (this.channelInfos.hasOwnProperty(iter247))
      {
        iter247 = this.channelInfos[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelNotificationSetting = module.exports.ChannelNotificationSetting = function(args) {
  this.channelId = null;
  this.name = null;
  this.notificationReceivable = null;
  this.messageReceivable = null;
  this.showDefault = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.notificationReceivable !== undefined && args.notificationReceivable !== null) {
      this.notificationReceivable = args.notificationReceivable;
    }
    if (args.messageReceivable !== undefined && args.messageReceivable !== null) {
      this.messageReceivable = args.messageReceivable;
    }
    if (args.showDefault !== undefined && args.showDefault !== null) {
      this.showDefault = args.showDefault;
    }
  }
};
ChannelNotificationSetting.prototype = {};
ChannelNotificationSetting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationReceivable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.messageReceivable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.showDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelNotificationSetting.prototype.write = function(output) {
  output.writeStructBegin('ChannelNotificationSetting');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.notificationReceivable !== null && this.notificationReceivable !== undefined) {
    output.writeFieldBegin('notificationReceivable', Thrift.Type.BOOL, 3);
    output.writeBool(this.notificationReceivable);
    output.writeFieldEnd();
  }
  if (this.messageReceivable !== null && this.messageReceivable !== undefined) {
    output.writeFieldBegin('messageReceivable', Thrift.Type.BOOL, 4);
    output.writeBool(this.messageReceivable);
    output.writeFieldEnd();
  }
  if (this.showDefault !== null && this.showDefault !== undefined) {
    output.writeFieldBegin('showDefault', Thrift.Type.BOOL, 5);
    output.writeBool(this.showDefault);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelProvider = module.exports.ChannelProvider = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ChannelProvider.prototype = {};
ChannelProvider.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelProvider.prototype.write = function(output) {
  output.writeStructBegin('ChannelProvider');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelSettings = module.exports.ChannelSettings = function(args) {
  this.unapprovedMessageReceivable = null;
  if (args) {
    if (args.unapprovedMessageReceivable !== undefined && args.unapprovedMessageReceivable !== null) {
      this.unapprovedMessageReceivable = args.unapprovedMessageReceivable;
    }
  }
};
ChannelSettings.prototype = {};
ChannelSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.unapprovedMessageReceivable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelSettings.prototype.write = function(output) {
  output.writeStructBegin('ChannelSettings');
  if (this.unapprovedMessageReceivable !== null && this.unapprovedMessageReceivable !== undefined) {
    output.writeFieldBegin('unapprovedMessageReceivable', Thrift.Type.BOOL, 1);
    output.writeBool(this.unapprovedMessageReceivable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelSyncDatas = module.exports.ChannelSyncDatas = function(args) {
  this.channelInfos = null;
  this.channelDomains = null;
  this.revision = null;
  this.expires = null;
  if (args) {
    if (args.channelInfos !== undefined && args.channelInfos !== null) {
      this.channelInfos = Thrift.copyList(args.channelInfos, [ttypes.ChannelInfo]);
    }
    if (args.channelDomains !== undefined && args.channelDomains !== null) {
      this.channelDomains = Thrift.copyList(args.channelDomains, [ttypes.ChannelDomain]);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.expires !== undefined && args.expires !== null) {
      this.expires = args.expires;
    }
  }
};
ChannelSyncDatas.prototype = {};
ChannelSyncDatas.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size248 = 0;
        var _rtmp3252;
        this.channelInfos = [];
        var _etype251 = 0;
        _rtmp3252 = input.readListBegin();
        _etype251 = _rtmp3252.etype;
        _size248 = _rtmp3252.size;
        for (var _i253 = 0; _i253 < _size248; ++_i253)
        {
          var elem254 = null;
          elem254 = new ttypes.ChannelInfo();
          elem254.read(input);
          this.channelInfos.push(elem254);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size255 = 0;
        var _rtmp3259;
        this.channelDomains = [];
        var _etype258 = 0;
        _rtmp3259 = input.readListBegin();
        _etype258 = _rtmp3259.etype;
        _size255 = _rtmp3259.size;
        for (var _i260 = 0; _i260 < _size255; ++_i260)
        {
          var elem261 = null;
          elem261 = new ttypes.ChannelDomain();
          elem261.read(input);
          this.channelDomains.push(elem261);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.expires = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelSyncDatas.prototype.write = function(output) {
  output.writeStructBegin('ChannelSyncDatas');
  if (this.channelInfos !== null && this.channelInfos !== undefined) {
    output.writeFieldBegin('channelInfos', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelInfos.length);
    for (var iter262 in this.channelInfos)
    {
      if (this.channelInfos.hasOwnProperty(iter262))
      {
        iter262 = this.channelInfos[iter262];
        iter262.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.channelDomains !== null && this.channelDomains !== undefined) {
    output.writeFieldBegin('channelDomains', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.channelDomains.length);
    for (var iter263 in this.channelDomains)
    {
      if (this.channelDomains.hasOwnProperty(iter263))
      {
        iter263 = this.channelDomains[iter263];
        iter263.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.expires !== null && this.expires !== undefined) {
    output.writeFieldBegin('expires', Thrift.Type.I64, 4);
    output.writeI64(this.expires);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChannelToken = module.exports.ChannelToken = function(args) {
  this.token = null;
  this.obsToken = null;
  this.expiration = null;
  this.refreshToken = null;
  this.channelAccessToken = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.obsToken !== undefined && args.obsToken !== null) {
      this.obsToken = args.obsToken;
    }
    if (args.expiration !== undefined && args.expiration !== null) {
      this.expiration = args.expiration;
    }
    if (args.refreshToken !== undefined && args.refreshToken !== null) {
      this.refreshToken = args.refreshToken;
    }
    if (args.channelAccessToken !== undefined && args.channelAccessToken !== null) {
      this.channelAccessToken = args.channelAccessToken;
    }
  }
};
ChannelToken.prototype = {};
ChannelToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.obsToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expiration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.refreshToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.channelAccessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelToken.prototype.write = function(output) {
  output.writeStructBegin('ChannelToken');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.obsToken !== null && this.obsToken !== undefined) {
    output.writeFieldBegin('obsToken', Thrift.Type.STRING, 2);
    output.writeString(this.obsToken);
    output.writeFieldEnd();
  }
  if (this.expiration !== null && this.expiration !== undefined) {
    output.writeFieldBegin('expiration', Thrift.Type.I64, 3);
    output.writeI64(this.expiration);
    output.writeFieldEnd();
  }
  if (this.refreshToken !== null && this.refreshToken !== undefined) {
    output.writeFieldBegin('refreshToken', Thrift.Type.STRING, 4);
    output.writeString(this.refreshToken);
    output.writeFieldEnd();
  }
  if (this.channelAccessToken !== null && this.channelAccessToken !== undefined) {
    output.writeFieldBegin('channelAccessToken', Thrift.Type.STRING, 5);
    output.writeString(this.channelAccessToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientLastStatus = module.exports.ClientLastStatus = function(args) {
  this.lastRev = null;
  this.badgeCount = null;
  if (args) {
    if (args.lastRev !== undefined && args.lastRev !== null) {
      this.lastRev = args.lastRev;
    }
    if (args.badgeCount !== undefined && args.badgeCount !== null) {
      this.badgeCount = args.badgeCount;
    }
  }
};
ClientLastStatus.prototype = {};
ClientLastStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lastRev = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.badgeCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientLastStatus.prototype.write = function(output) {
  output.writeStructBegin('ClientLastStatus');
  if (this.lastRev !== null && this.lastRev !== undefined) {
    output.writeFieldBegin('lastRev', Thrift.Type.I64, 1);
    output.writeI64(this.lastRev);
    output.writeFieldEnd();
  }
  if (this.badgeCount !== null && this.badgeCount !== undefined) {
    output.writeFieldBegin('badgeCount', Thrift.Type.I32, 2);
    output.writeI32(this.badgeCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Coin = module.exports.Coin = function(args) {
  this.freeCoinBalance = null;
  this.payedCoinBalance = null;
  this.totalCoinBalance = null;
  this.rewardCoinBalance = null;
  if (args) {
    if (args.freeCoinBalance !== undefined && args.freeCoinBalance !== null) {
      this.freeCoinBalance = args.freeCoinBalance;
    }
    if (args.payedCoinBalance !== undefined && args.payedCoinBalance !== null) {
      this.payedCoinBalance = args.payedCoinBalance;
    }
    if (args.totalCoinBalance !== undefined && args.totalCoinBalance !== null) {
      this.totalCoinBalance = args.totalCoinBalance;
    }
    if (args.rewardCoinBalance !== undefined && args.rewardCoinBalance !== null) {
      this.rewardCoinBalance = args.rewardCoinBalance;
    }
  }
};
Coin.prototype = {};
Coin.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.freeCoinBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.payedCoinBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.totalCoinBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rewardCoinBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Coin.prototype.write = function(output) {
  output.writeStructBegin('Coin');
  if (this.freeCoinBalance !== null && this.freeCoinBalance !== undefined) {
    output.writeFieldBegin('freeCoinBalance', Thrift.Type.I32, 1);
    output.writeI32(this.freeCoinBalance);
    output.writeFieldEnd();
  }
  if (this.payedCoinBalance !== null && this.payedCoinBalance !== undefined) {
    output.writeFieldBegin('payedCoinBalance', Thrift.Type.I32, 2);
    output.writeI32(this.payedCoinBalance);
    output.writeFieldEnd();
  }
  if (this.totalCoinBalance !== null && this.totalCoinBalance !== undefined) {
    output.writeFieldBegin('totalCoinBalance', Thrift.Type.I32, 3);
    output.writeI32(this.totalCoinBalance);
    output.writeFieldEnd();
  }
  if (this.rewardCoinBalance !== null && this.rewardCoinBalance !== undefined) {
    output.writeFieldBegin('rewardCoinBalance', Thrift.Type.I32, 4);
    output.writeI32(this.rewardCoinBalance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinHistory = module.exports.CoinHistory = function(args) {
  this.payDate = null;
  this.coinBalance = null;
  this.coin = null;
  this.price = null;
  this.title = null;
  this.refund = null;
  this.paySeq = null;
  this.currency = null;
  this.currencySign = null;
  this.displayPrice = null;
  this.payload = null;
  this.channelId = null;
  if (args) {
    if (args.payDate !== undefined && args.payDate !== null) {
      this.payDate = args.payDate;
    }
    if (args.coinBalance !== undefined && args.coinBalance !== null) {
      this.coinBalance = args.coinBalance;
    }
    if (args.coin !== undefined && args.coin !== null) {
      this.coin = args.coin;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.refund !== undefined && args.refund !== null) {
      this.refund = args.refund;
    }
    if (args.paySeq !== undefined && args.paySeq !== null) {
      this.paySeq = args.paySeq;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.currencySign !== undefined && args.currencySign !== null) {
      this.currencySign = args.currencySign;
    }
    if (args.displayPrice !== undefined && args.displayPrice !== null) {
      this.displayPrice = args.displayPrice;
    }
    if (args.payload !== undefined && args.payload !== null) {
      this.payload = new ttypes.CoinPayLoad(args.payload);
    }
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
  }
};
CoinHistory.prototype = {};
CoinHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.payDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.coinBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.coin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.refund = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.paySeq = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.currencySign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.displayPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.payload = new ttypes.CoinPayLoad();
        this.payload.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinHistory.prototype.write = function(output) {
  output.writeStructBegin('CoinHistory');
  if (this.payDate !== null && this.payDate !== undefined) {
    output.writeFieldBegin('payDate', Thrift.Type.I64, 1);
    output.writeI64(this.payDate);
    output.writeFieldEnd();
  }
  if (this.coinBalance !== null && this.coinBalance !== undefined) {
    output.writeFieldBegin('coinBalance', Thrift.Type.I32, 2);
    output.writeI32(this.coinBalance);
    output.writeFieldEnd();
  }
  if (this.coin !== null && this.coin !== undefined) {
    output.writeFieldBegin('coin', Thrift.Type.I32, 3);
    output.writeI32(this.coin);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 4);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 5);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.refund !== null && this.refund !== undefined) {
    output.writeFieldBegin('refund', Thrift.Type.BOOL, 6);
    output.writeBool(this.refund);
    output.writeFieldEnd();
  }
  if (this.paySeq !== null && this.paySeq !== undefined) {
    output.writeFieldBegin('paySeq', Thrift.Type.STRING, 7);
    output.writeString(this.paySeq);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 8);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.currencySign !== null && this.currencySign !== undefined) {
    output.writeFieldBegin('currencySign', Thrift.Type.STRING, 9);
    output.writeString(this.currencySign);
    output.writeFieldEnd();
  }
  if (this.displayPrice !== null && this.displayPrice !== undefined) {
    output.writeFieldBegin('displayPrice', Thrift.Type.STRING, 10);
    output.writeString(this.displayPrice);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRUCT, 11);
    this.payload.write(output);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 12);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinHistoryCondition = module.exports.CoinHistoryCondition = function(args) {
  this.start = null;
  this.size = null;
  this.language = null;
  this.eddt = null;
  this.appStoreCode = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.eddt !== undefined && args.eddt !== null) {
      this.eddt = args.eddt;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
  }
};
CoinHistoryCondition.prototype = {};
CoinHistoryCondition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.eddt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinHistoryCondition.prototype.write = function(output) {
  output.writeStructBegin('CoinHistoryCondition');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 1);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.eddt !== null && this.eddt !== undefined) {
    output.writeFieldBegin('eddt', Thrift.Type.STRING, 4);
    output.writeString(this.eddt);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 5);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinHistoryResult = module.exports.CoinHistoryResult = function(args) {
  this.historys = null;
  this.balance = null;
  this.hasNext = null;
  if (args) {
    if (args.historys !== undefined && args.historys !== null) {
      this.historys = Thrift.copyList(args.historys, [ttypes.CoinHistory]);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new ttypes.Coin(args.balance);
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
CoinHistoryResult.prototype = {};
CoinHistoryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size264 = 0;
        var _rtmp3268;
        this.historys = [];
        var _etype267 = 0;
        _rtmp3268 = input.readListBegin();
        _etype267 = _rtmp3268.etype;
        _size264 = _rtmp3268.size;
        for (var _i269 = 0; _i269 < _size264; ++_i269)
        {
          var elem270 = null;
          elem270 = new ttypes.CoinHistory();
          elem270.read(input);
          this.historys.push(elem270);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new ttypes.Coin();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinHistoryResult.prototype.write = function(output) {
  output.writeStructBegin('CoinHistoryResult');
  if (this.historys !== null && this.historys !== undefined) {
    output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
    for (var iter271 in this.historys)
    {
      if (this.historys.hasOwnProperty(iter271))
      {
        iter271 = this.historys[iter271];
        iter271.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 3);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinPayLoad = module.exports.CoinPayLoad = function(args) {
  this.payCoin = null;
  this.freeCoin = null;
  this.type = null;
  this.rewardCoin = null;
  if (args) {
    if (args.payCoin !== undefined && args.payCoin !== null) {
      this.payCoin = args.payCoin;
    }
    if (args.freeCoin !== undefined && args.freeCoin !== null) {
      this.freeCoin = args.freeCoin;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.rewardCoin !== undefined && args.rewardCoin !== null) {
      this.rewardCoin = args.rewardCoin;
    }
  }
};
CoinPayLoad.prototype = {};
CoinPayLoad.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.payCoin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.freeCoin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.rewardCoin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinPayLoad.prototype.write = function(output) {
  output.writeStructBegin('CoinPayLoad');
  if (this.payCoin !== null && this.payCoin !== undefined) {
    output.writeFieldBegin('payCoin', Thrift.Type.I32, 1);
    output.writeI32(this.payCoin);
    output.writeFieldEnd();
  }
  if (this.freeCoin !== null && this.freeCoin !== undefined) {
    output.writeFieldBegin('freeCoin', Thrift.Type.I32, 2);
    output.writeI32(this.freeCoin);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.rewardCoin !== null && this.rewardCoin !== undefined) {
    output.writeFieldBegin('rewardCoin', Thrift.Type.I32, 4);
    output.writeI32(this.rewardCoin);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinProductItem = module.exports.CoinProductItem = function(args) {
  this.itemId = null;
  this.coin = null;
  this.freeCoin = null;
  this.currency = null;
  this.price = null;
  this.displayPrice = null;
  this.name = null;
  this.desc = null;
  if (args) {
    if (args.itemId !== undefined && args.itemId !== null) {
      this.itemId = args.itemId;
    }
    if (args.coin !== undefined && args.coin !== null) {
      this.coin = args.coin;
    }
    if (args.freeCoin !== undefined && args.freeCoin !== null) {
      this.freeCoin = args.freeCoin;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.displayPrice !== undefined && args.displayPrice !== null) {
      this.displayPrice = args.displayPrice;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.desc !== undefined && args.desc !== null) {
      this.desc = args.desc;
    }
  }
};
CoinProductItem.prototype = {};
CoinProductItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.itemId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.coin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.freeCoin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.displayPrice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.desc = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinProductItem.prototype.write = function(output) {
  output.writeStructBegin('CoinProductItem');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
    output.writeString(this.itemId);
    output.writeFieldEnd();
  }
  if (this.coin !== null && this.coin !== undefined) {
    output.writeFieldBegin('coin', Thrift.Type.I32, 2);
    output.writeI32(this.coin);
    output.writeFieldEnd();
  }
  if (this.freeCoin !== null && this.freeCoin !== undefined) {
    output.writeFieldBegin('freeCoin', Thrift.Type.I32, 3);
    output.writeI32(this.freeCoin);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 5);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 6);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.displayPrice !== null && this.displayPrice !== undefined) {
    output.writeFieldBegin('displayPrice', Thrift.Type.STRING, 7);
    output.writeString(this.displayPrice);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 8);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.desc !== null && this.desc !== undefined) {
    output.writeFieldBegin('desc', Thrift.Type.STRING, 9);
    output.writeString(this.desc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinPurchaseConfirm = module.exports.CoinPurchaseConfirm = function(args) {
  this.orderId = null;
  this.appStoreCode = null;
  this.receipt = null;
  this.signature = null;
  this.seller = null;
  this.requestType = null;
  this.ignoreReceipt = null;
  if (args) {
    if (args.orderId !== undefined && args.orderId !== null) {
      this.orderId = args.orderId;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.receipt !== undefined && args.receipt !== null) {
      this.receipt = args.receipt;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.seller !== undefined && args.seller !== null) {
      this.seller = args.seller;
    }
    if (args.requestType !== undefined && args.requestType !== null) {
      this.requestType = args.requestType;
    }
    if (args.ignoreReceipt !== undefined && args.ignoreReceipt !== null) {
      this.ignoreReceipt = args.ignoreReceipt;
    }
  }
};
CoinPurchaseConfirm.prototype = {};
CoinPurchaseConfirm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.receipt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.seller = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.requestType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreReceipt = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinPurchaseConfirm.prototype.write = function(output) {
  output.writeStructBegin('CoinPurchaseConfirm');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 2);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.receipt !== null && this.receipt !== undefined) {
    output.writeFieldBegin('receipt', Thrift.Type.STRING, 3);
    output.writeString(this.receipt);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 4);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.seller !== null && this.seller !== undefined) {
    output.writeFieldBegin('seller', Thrift.Type.STRING, 5);
    output.writeString(this.seller);
    output.writeFieldEnd();
  }
  if (this.requestType !== null && this.requestType !== undefined) {
    output.writeFieldBegin('requestType', Thrift.Type.STRING, 6);
    output.writeString(this.requestType);
    output.writeFieldEnd();
  }
  if (this.ignoreReceipt !== null && this.ignoreReceipt !== undefined) {
    output.writeFieldBegin('ignoreReceipt', Thrift.Type.BOOL, 7);
    output.writeBool(this.ignoreReceipt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinPurchaseReservation = module.exports.CoinPurchaseReservation = function(args) {
  this.productId = null;
  this.country = null;
  this.currency = null;
  this.price = null;
  this.appStoreCode = null;
  this.language = null;
  this.pgCode = null;
  this.redirectUrl = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.pgCode !== undefined && args.pgCode !== null) {
      this.pgCode = args.pgCode;
    }
    if (args.redirectUrl !== undefined && args.redirectUrl !== null) {
      this.redirectUrl = args.redirectUrl;
    }
  }
};
CoinPurchaseReservation.prototype = {};
CoinPurchaseReservation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.pgCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.redirectUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinPurchaseReservation.prototype.write = function(output) {
  output.writeStructBegin('CoinPurchaseReservation');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 3);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 4);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 5);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 6);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.pgCode !== null && this.pgCode !== undefined) {
    output.writeFieldBegin('pgCode', Thrift.Type.I32, 7);
    output.writeI32(this.pgCode);
    output.writeFieldEnd();
  }
  if (this.redirectUrl !== null && this.redirectUrl !== undefined) {
    output.writeFieldBegin('redirectUrl', Thrift.Type.STRING, 8);
    output.writeString(this.redirectUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinUseReservation = module.exports.CoinUseReservation = function(args) {
  this.channelId = null;
  this.shopOrderId = null;
  this.appStoreCode = null;
  this.items = null;
  this.country = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
      this.shopOrderId = args.shopOrderId;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [null]);
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
  }
};
CoinUseReservation.prototype = {};
CoinUseReservation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shopOrderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size272 = 0;
        var _rtmp3276;
        this.items = [];
        var _etype275 = 0;
        _rtmp3276 = input.readListBegin();
        _etype275 = _rtmp3276.etype;
        _size272 = _rtmp3276.size;
        for (var _i277 = 0; _i277 < _size272; ++_i277)
        {
          var elem278 = null;
          elem278 = new ttypes.CoinUseReservationItem();
          elem278.read(input);
          this.items.push(elem278);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinUseReservation.prototype.write = function(output) {
  output.writeStructBegin('CoinUseReservation');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.shopOrderId !== null && this.shopOrderId !== undefined) {
    output.writeFieldBegin('shopOrderId', Thrift.Type.STRING, 2);
    output.writeString(this.shopOrderId);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 3);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter279 in this.items)
    {
      if (this.items.hasOwnProperty(iter279))
      {
        iter279 = this.items[iter279];
        iter279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 5);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CoinUseReservationItem = module.exports.CoinUseReservationItem = function(args) {
  this.itemId = null;
  this.itemName = null;
  this.amount = null;
  if (args) {
    if (args.itemId !== undefined && args.itemId !== null) {
      this.itemId = args.itemId;
    }
    if (args.itemName !== undefined && args.itemName !== null) {
      this.itemName = args.itemName;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
  }
};
CoinUseReservationItem.prototype = {};
CoinUseReservationItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.itemId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.itemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.amount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CoinUseReservationItem.prototype.write = function(output) {
  output.writeStructBegin('CoinUseReservationItem');
  if (this.itemId !== null && this.itemId !== undefined) {
    output.writeFieldBegin('itemId', Thrift.Type.STRING, 1);
    output.writeString(this.itemId);
    output.writeFieldEnd();
  }
  if (this.itemName !== null && this.itemName !== undefined) {
    output.writeFieldBegin('itemName', Thrift.Type.STRING, 2);
    output.writeString(this.itemName);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.I32, 3);
    output.writeI32(this.amount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommitMessageResult = module.exports.CommitMessageResult = function(args) {
  this.message = null;
  this.code = null;
  this.reason = null;
  this.successCount = null;
  this.failCount = null;
  this.unregisterCount = null;
  this.blockCount = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
  }
};
CommitMessageResult.prototype = {};
CommitMessageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitMessageResult.prototype.write = function(output) {
  output.writeStructBegin('CommitMessageResult');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 2);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 4);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 5);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 6);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 7);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommitSendMessagesToMidRequest = module.exports.CommitSendMessagesToMidRequest = function(args) {
  this.seq = null;
  this.messageIds = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
CommitSendMessagesToMidRequest.prototype = {};
CommitSendMessagesToMidRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.seq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.messageIds = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString();
          this.messageIds.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitSendMessagesToMidRequest.prototype.write = function(output) {
  output.writeStructBegin('CommitSendMessagesToMidRequest');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I32, 1);
    output.writeI32(this.seq);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter287 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter287))
      {
        iter287 = this.messageIds[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommitSendMessagesToMidResponse = module.exports.CommitSendMessagesToMidResponse = function(args) {
  this.successCount = null;
  this.failCount = null;
  this.unregisterCount = null;
  this.blockCount = null;
  if (args) {
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
  }
};
CommitSendMessagesToMidResponse.prototype = {};
CommitSendMessagesToMidResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommitSendMessagesToMidResponse.prototype.write = function(output) {
  output.writeStructBegin('CommitSendMessagesToMidResponse');
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 1);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 2);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 3);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 4);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompactContact = module.exports.CompactContact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.modifiedTime = null;
  this.status = null;
  this.settings = null;
  this.displayNameOverridden = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.modifiedTime !== undefined && args.modifiedTime !== null) {
      this.modifiedTime = args.modifiedTime;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
  }
};
CompactContact.prototype = {};
CompactContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.modifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompactContact.prototype.write = function(output) {
  output.writeStructBegin('CompactContact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.modifiedTime !== null && this.modifiedTime !== undefined) {
    output.writeFieldBegin('modifiedTime', Thrift.Type.I64, 3);
    output.writeI64(this.modifiedTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 5);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 6);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Configurations = module.exports.Configurations = function(args) {
  this.revision = null;
  this.configMap = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.configMap !== undefined && args.configMap !== null) {
      this.configMap = Thrift.copyMap(args.configMap, [null]);
    }
  }
};
Configurations.prototype = {};
Configurations.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size288 = 0;
        var _rtmp3292;
        this.configMap = {};
        var _ktype289 = 0;
        var _vtype290 = 0;
        _rtmp3292 = input.readMapBegin();
        _ktype289 = _rtmp3292.ktype;
        _vtype290 = _rtmp3292.vtype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var key294 = null;
          var val295 = null;
          key294 = input.readString();
          val295 = input.readString();
          this.configMap[key294] = val295;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Configurations.prototype.write = function(output) {
  output.writeStructBegin('Configurations');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.configMap !== null && this.configMap !== undefined) {
    output.writeFieldBegin('configMap', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.configMap));
    for (var kiter296 in this.configMap)
    {
      if (this.configMap.hasOwnProperty(kiter296))
      {
        var viter297 = this.configMap[kiter296];
        output.writeString(kiter296);
        output.writeString(viter297);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Contact = module.exports.Contact = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.type = null;
  this.status = null;
  this.relation = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.displayNameOverridden = null;
  this.favoriteTime = null;
  this.capableVoiceCall = null;
  this.capableVideoCall = null;
  this.capableMyhome = null;
  this.capableBuddy = null;
  this.attributes = null;
  this.settings = null;
  this.picturePath = null;
  this.recommendParams = null;
  this.friendRequestStatus = null;
  this.musicProfile = null;
  this.videoProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.relation !== undefined && args.relation !== null) {
      this.relation = args.relation;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.displayNameOverridden !== undefined && args.displayNameOverridden !== null) {
      this.displayNameOverridden = args.displayNameOverridden;
    }
    if (args.favoriteTime !== undefined && args.favoriteTime !== null) {
      this.favoriteTime = args.favoriteTime;
    }
    if (args.capableVoiceCall !== undefined && args.capableVoiceCall !== null) {
      this.capableVoiceCall = args.capableVoiceCall;
    }
    if (args.capableVideoCall !== undefined && args.capableVideoCall !== null) {
      this.capableVideoCall = args.capableVideoCall;
    }
    if (args.capableMyhome !== undefined && args.capableMyhome !== null) {
      this.capableMyhome = args.capableMyhome;
    }
    if (args.capableBuddy !== undefined && args.capableBuddy !== null) {
      this.capableBuddy = args.capableBuddy;
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = args.attributes;
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = args.settings;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.recommendParams !== undefined && args.recommendParams !== null) {
      this.recommendParams = args.recommendParams;
    }
    if (args.friendRequestStatus !== undefined && args.friendRequestStatus !== null) {
      this.friendRequestStatus = args.friendRequestStatus;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
  }
};
Contact.prototype = {};
Contact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.relation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.displayNameOverridden = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVoiceCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.capableVideoCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.BOOL) {
        this.capableMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.BOOL) {
        this.capableBuddy = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.attributes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I64) {
        this.settings = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.recommendParams = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.I32) {
        this.friendRequestStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Contact.prototype.write = function(output) {
  output.writeStructBegin('Contact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 11);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.relation !== null && this.relation !== undefined) {
    output.writeFieldBegin('relation', Thrift.Type.I32, 21);
    output.writeI32(this.relation);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 22);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 23);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 24);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 25);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 26);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.displayNameOverridden !== null && this.displayNameOverridden !== undefined) {
    output.writeFieldBegin('displayNameOverridden', Thrift.Type.STRING, 27);
    output.writeString(this.displayNameOverridden);
    output.writeFieldEnd();
  }
  if (this.favoriteTime !== null && this.favoriteTime !== undefined) {
    output.writeFieldBegin('favoriteTime', Thrift.Type.I64, 28);
    output.writeI64(this.favoriteTime);
    output.writeFieldEnd();
  }
  if (this.capableVoiceCall !== null && this.capableVoiceCall !== undefined) {
    output.writeFieldBegin('capableVoiceCall', Thrift.Type.BOOL, 31);
    output.writeBool(this.capableVoiceCall);
    output.writeFieldEnd();
  }
  if (this.capableVideoCall !== null && this.capableVideoCall !== undefined) {
    output.writeFieldBegin('capableVideoCall', Thrift.Type.BOOL, 32);
    output.writeBool(this.capableVideoCall);
    output.writeFieldEnd();
  }
  if (this.capableMyhome !== null && this.capableMyhome !== undefined) {
    output.writeFieldBegin('capableMyhome', Thrift.Type.BOOL, 33);
    output.writeBool(this.capableMyhome);
    output.writeFieldEnd();
  }
  if (this.capableBuddy !== null && this.capableBuddy !== undefined) {
    output.writeFieldBegin('capableBuddy', Thrift.Type.BOOL, 34);
    output.writeBool(this.capableBuddy);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.I32, 35);
    output.writeI32(this.attributes);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.I64, 36);
    output.writeI64(this.settings);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 37);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.recommendParams !== null && this.recommendParams !== undefined) {
    output.writeFieldBegin('recommendParams', Thrift.Type.STRING, 38);
    output.writeString(this.recommendParams);
    output.writeFieldEnd();
  }
  if (this.friendRequestStatus !== null && this.friendRequestStatus !== undefined) {
    output.writeFieldBegin('friendRequestStatus', Thrift.Type.I32, 39);
    output.writeI32(this.friendRequestStatus);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 40);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 42);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactModification = module.exports.ContactModification = function(args) {
  this.type = null;
  this.luid = null;
  this.phones = null;
  this.emails = null;
  this.userids = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.luid !== undefined && args.luid !== null) {
      this.luid = args.luid;
    }
    if (args.phones !== undefined && args.phones !== null) {
      this.phones = Thrift.copyList(args.phones, [null]);
    }
    if (args.emails !== undefined && args.emails !== null) {
      this.emails = Thrift.copyList(args.emails, [null]);
    }
    if (args.userids !== undefined && args.userids !== null) {
      this.userids = Thrift.copyList(args.userids, [null]);
    }
  }
};
ContactModification.prototype = {};
ContactModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.luid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size298 = 0;
        var _rtmp3302;
        this.phones = [];
        var _etype301 = 0;
        _rtmp3302 = input.readListBegin();
        _etype301 = _rtmp3302.etype;
        _size298 = _rtmp3302.size;
        for (var _i303 = 0; _i303 < _size298; ++_i303)
        {
          var elem304 = null;
          elem304 = input.readString();
          this.phones.push(elem304);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size305 = 0;
        var _rtmp3309;
        this.emails = [];
        var _etype308 = 0;
        _rtmp3309 = input.readListBegin();
        _etype308 = _rtmp3309.etype;
        _size305 = _rtmp3309.size;
        for (var _i310 = 0; _i310 < _size305; ++_i310)
        {
          var elem311 = null;
          elem311 = input.readString();
          this.emails.push(elem311);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.userids = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = input.readString();
          this.userids.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactModification.prototype.write = function(output) {
  output.writeStructBegin('ContactModification');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.luid !== null && this.luid !== undefined) {
    output.writeFieldBegin('luid', Thrift.Type.STRING, 2);
    output.writeString(this.luid);
    output.writeFieldEnd();
  }
  if (this.phones !== null && this.phones !== undefined) {
    output.writeFieldBegin('phones', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.phones.length);
    for (var iter319 in this.phones)
    {
      if (this.phones.hasOwnProperty(iter319))
      {
        iter319 = this.phones[iter319];
        output.writeString(iter319);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.emails !== null && this.emails !== undefined) {
    output.writeFieldBegin('emails', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.emails.length);
    for (var iter320 in this.emails)
    {
      if (this.emails.hasOwnProperty(iter320))
      {
        iter320 = this.emails[iter320];
        output.writeString(iter320);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userids !== null && this.userids !== undefined) {
    output.writeFieldBegin('userids', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.userids.length);
    for (var iter321 in this.userids)
    {
      if (this.userids.hasOwnProperty(iter321))
      {
        iter321 = this.userids[iter321];
        output.writeString(iter321);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactRegistration = module.exports.ContactRegistration = function(args) {
  this.contact = null;
  this.luid = null;
  this.contactType = null;
  this.contactKey = null;
  if (args) {
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
    if (args.luid !== undefined && args.luid !== null) {
      this.luid = args.luid;
    }
    if (args.contactType !== undefined && args.contactType !== null) {
      this.contactType = args.contactType;
    }
    if (args.contactKey !== undefined && args.contactKey !== null) {
      this.contactKey = args.contactKey;
    }
  }
};
ContactRegistration.prototype = {};
ContactRegistration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.luid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.contactType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.contactKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactRegistration.prototype.write = function(output) {
  output.writeStructBegin('ContactRegistration');
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.luid !== null && this.luid !== undefined) {
    output.writeFieldBegin('luid', Thrift.Type.STRING, 10);
    output.writeString(this.luid);
    output.writeFieldEnd();
  }
  if (this.contactType !== null && this.contactType !== undefined) {
    output.writeFieldBegin('contactType', Thrift.Type.I32, 11);
    output.writeI32(this.contactType);
    output.writeFieldEnd();
  }
  if (this.contactKey !== null && this.contactKey !== undefined) {
    output.writeFieldBegin('contactKey', Thrift.Type.STRING, 12);
    output.writeString(this.contactKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactReport = module.exports.ContactReport = function(args) {
  this.mid = null;
  this.exists = null;
  this.contact = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.exists !== undefined && args.exists !== null) {
      this.exists = args.exists;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
  }
};
ContactReport.prototype = {};
ContactReport.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactReport.prototype.write = function(output) {
  output.writeStructBegin('ContactReport');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.exists !== null && this.exists !== undefined) {
    output.writeFieldBegin('exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.exists);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 3);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactReportResult = module.exports.ContactReportResult = function(args) {
  this.mid = null;
  this.exists = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.exists !== undefined && args.exists !== null) {
      this.exists = args.exists;
    }
  }
};
ContactReportResult.prototype = {};
ContactReportResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactReportResult.prototype.write = function(output) {
  output.writeStructBegin('ContactReportResult');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.exists !== null && this.exists !== undefined) {
    output.writeFieldBegin('exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ContactTransition = module.exports.ContactTransition = function(args) {
  this.ownerMid = null;
  this.targetMid = null;
  this.previousStatus = null;
  this.resultStatus = null;
  if (args) {
    if (args.ownerMid !== undefined && args.ownerMid !== null) {
      this.ownerMid = args.ownerMid;
    }
    if (args.targetMid !== undefined && args.targetMid !== null) {
      this.targetMid = args.targetMid;
    }
    if (args.previousStatus !== undefined && args.previousStatus !== null) {
      this.previousStatus = args.previousStatus;
    }
    if (args.resultStatus !== undefined && args.resultStatus !== null) {
      this.resultStatus = args.resultStatus;
    }
  }
};
ContactTransition.prototype = {};
ContactTransition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ownerMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.previousStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.resultStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContactTransition.prototype.write = function(output) {
  output.writeStructBegin('ContactTransition');
  if (this.ownerMid !== null && this.ownerMid !== undefined) {
    output.writeFieldBegin('ownerMid', Thrift.Type.STRING, 1);
    output.writeString(this.ownerMid);
    output.writeFieldEnd();
  }
  if (this.targetMid !== null && this.targetMid !== undefined) {
    output.writeFieldBegin('targetMid', Thrift.Type.STRING, 2);
    output.writeString(this.targetMid);
    output.writeFieldEnd();
  }
  if (this.previousStatus !== null && this.previousStatus !== undefined) {
    output.writeFieldBegin('previousStatus', Thrift.Type.I32, 3);
    output.writeI32(this.previousStatus);
    output.writeFieldEnd();
  }
  if (this.resultStatus !== null && this.resultStatus !== undefined) {
    output.writeFieldBegin('resultStatus', Thrift.Type.I32, 4);
    output.writeI32(this.resultStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeviceInfo = module.exports.DeviceInfo = function(args) {
  this.deviceName = null;
  this.systemName = null;
  this.systemVersion = null;
  this.model = null;
  this.webViewVersion = null;
  this.carrierCode = null;
  this.carrierName = null;
  this.applicationType = null;
  if (args) {
    if (args.deviceName !== undefined && args.deviceName !== null) {
      this.deviceName = args.deviceName;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.systemVersion !== undefined && args.systemVersion !== null) {
      this.systemVersion = args.systemVersion;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = args.model;
    }
    if (args.webViewVersion !== undefined && args.webViewVersion !== null) {
      this.webViewVersion = args.webViewVersion;
    }
    if (args.carrierCode !== undefined && args.carrierCode !== null) {
      this.carrierCode = args.carrierCode;
    }
    if (args.carrierName !== undefined && args.carrierName !== null) {
      this.carrierName = args.carrierName;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
  }
};
DeviceInfo.prototype = {};
DeviceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.deviceName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.systemVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.model = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.webViewVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.carrierCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.carrierName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeviceInfo.prototype.write = function(output) {
  output.writeStructBegin('DeviceInfo');
  if (this.deviceName !== null && this.deviceName !== undefined) {
    output.writeFieldBegin('deviceName', Thrift.Type.STRING, 1);
    output.writeString(this.deviceName);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 2);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.systemVersion !== null && this.systemVersion !== undefined) {
    output.writeFieldBegin('systemVersion', Thrift.Type.STRING, 3);
    output.writeString(this.systemVersion);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRING, 4);
    output.writeString(this.model);
    output.writeFieldEnd();
  }
  if (this.webViewVersion !== null && this.webViewVersion !== undefined) {
    output.writeFieldBegin('webViewVersion', Thrift.Type.STRING, 5);
    output.writeString(this.webViewVersion);
    output.writeFieldEnd();
  }
  if (this.carrierCode !== null && this.carrierCode !== undefined) {
    output.writeFieldBegin('carrierCode', Thrift.Type.I32, 10);
    output.writeI32(this.carrierCode);
    output.writeFieldEnd();
  }
  if (this.carrierName !== null && this.carrierName !== undefined) {
    output.writeFieldBegin('carrierName', Thrift.Type.STRING, 11);
    output.writeString(this.carrierName);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 20);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEGroupSharedKey = module.exports.E2EEGroupSharedKey = function(args) {
  this.version = null;
  this.groupKeyId = null;
  this.creator = null;
  this.creatorKeyId = null;
  this.receiver = null;
  this.receiverKeyId = null;
  this.encryptedSharedKey = null;
  this.allowedTypes = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.groupKeyId !== undefined && args.groupKeyId !== null) {
      this.groupKeyId = args.groupKeyId;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.creatorKeyId !== undefined && args.creatorKeyId !== null) {
      this.creatorKeyId = args.creatorKeyId;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.receiverKeyId !== undefined && args.receiverKeyId !== null) {
      this.receiverKeyId = args.receiverKeyId;
    }
    if (args.encryptedSharedKey !== undefined && args.encryptedSharedKey !== null) {
      this.encryptedSharedKey = args.encryptedSharedKey;
    }
    if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
      this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
    }
  }
};
E2EEGroupSharedKey.prototype = {};
E2EEGroupSharedKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.groupKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.creatorKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.receiverKeyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.encryptedSharedKey = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.SET) {
        var _size322 = 0;
        var _rtmp3326;
        this.allowedTypes = [];
        var _etype325 = 0;
        _rtmp3326 = input.readSetBegin();
        _etype325 = _rtmp3326.etype;
        _size322 = _rtmp3326.size;
        for (var _i327 = 0; _i327 < _size322; ++_i327)
        {
          var elem328 = null;
          elem328 = input.readI32();
          this.allowedTypes.push(elem328);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEGroupSharedKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEGroupSharedKey');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.groupKeyId !== null && this.groupKeyId !== undefined) {
    output.writeFieldBegin('groupKeyId', Thrift.Type.I32, 2);
    output.writeI32(this.groupKeyId);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 3);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.creatorKeyId !== null && this.creatorKeyId !== undefined) {
    output.writeFieldBegin('creatorKeyId', Thrift.Type.I32, 4);
    output.writeI32(this.creatorKeyId);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 5);
    output.writeString(this.receiver);
    output.writeFieldEnd();
  }
  if (this.receiverKeyId !== null && this.receiverKeyId !== undefined) {
    output.writeFieldBegin('receiverKeyId', Thrift.Type.I32, 6);
    output.writeI32(this.receiverKeyId);
    output.writeFieldEnd();
  }
  if (this.encryptedSharedKey !== null && this.encryptedSharedKey !== undefined) {
    output.writeFieldBegin('encryptedSharedKey', Thrift.Type.STRING, 7);
    output.writeBinary(this.encryptedSharedKey);
    output.writeFieldEnd();
  }
  if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
    output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 8);
    output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
    for (var iter329 in this.allowedTypes)
    {
      if (this.allowedTypes.hasOwnProperty(iter329))
      {
        iter329 = this.allowedTypes[iter329];
        output.writeI32(iter329);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEKey = module.exports.E2EEKey = function(args) {
  this.version = null;
  this.keyId = null;
  this.publicKey = null;
  this.privateKey = null;
  this.createdTime = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = args.publicKey;
    }
    if (args.privateKey !== undefined && args.privateKey !== null) {
      this.privateKey = args.privateKey;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
E2EEKey.prototype = {};
E2EEKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.publicKey = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.privateKey = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEKey');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRING, 4);
    output.writeBinary(this.publicKey);
    output.writeFieldEnd();
  }
  if (this.privateKey !== null && this.privateKey !== undefined) {
    output.writeFieldBegin('privateKey', Thrift.Type.STRING, 5);
    output.writeBinary(this.privateKey);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 6);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEKeyChain = module.exports.E2EEKeyChain = function(args) {
  this.keychain = null;
  if (args) {
    if (args.keychain !== undefined && args.keychain !== null) {
      this.keychain = Thrift.copyList(args.keychain, [ttypes.E2EEKey]);
    }
  }
};
E2EEKeyChain.prototype = {};
E2EEKeyChain.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.keychain = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new ttypes.E2EEKey();
          elem336.read(input);
          this.keychain.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEKeyChain.prototype.write = function(output) {
  output.writeStructBegin('E2EEKeyChain');
  if (this.keychain !== null && this.keychain !== undefined) {
    output.writeFieldBegin('keychain', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.keychain.length);
    for (var iter337 in this.keychain)
    {
      if (this.keychain.hasOwnProperty(iter337))
      {
        iter337 = this.keychain[iter337];
        iter337.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EENegotiationResult = module.exports.E2EENegotiationResult = function(args) {
  this.allowedTypes = null;
  this.publicKey = null;
  if (args) {
    if (args.allowedTypes !== undefined && args.allowedTypes !== null) {
      this.allowedTypes = Thrift.copyList(args.allowedTypes, [null]);
    }
    if (args.publicKey !== undefined && args.publicKey !== null) {
      this.publicKey = new ttypes.E2EEPublicKey(args.publicKey);
    }
  }
};
E2EENegotiationResult.prototype = {};
E2EENegotiationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size338 = 0;
        var _rtmp3342;
        this.allowedTypes = [];
        var _etype341 = 0;
        _rtmp3342 = input.readSetBegin();
        _etype341 = _rtmp3342.etype;
        _size338 = _rtmp3342.size;
        for (var _i343 = 0; _i343 < _size338; ++_i343)
        {
          var elem344 = null;
          elem344 = input.readI32();
          this.allowedTypes.push(elem344);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.publicKey = new ttypes.E2EEPublicKey();
        this.publicKey.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EENegotiationResult.prototype.write = function(output) {
  output.writeStructBegin('E2EENegotiationResult');
  if (this.allowedTypes !== null && this.allowedTypes !== undefined) {
    output.writeFieldBegin('allowedTypes', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.I32, this.allowedTypes.length);
    for (var iter345 in this.allowedTypes)
    {
      if (this.allowedTypes.hasOwnProperty(iter345))
      {
        iter345 = this.allowedTypes[iter345];
        output.writeI32(iter345);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.publicKey !== null && this.publicKey !== undefined) {
    output.writeFieldBegin('publicKey', Thrift.Type.STRUCT, 2);
    this.publicKey.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var E2EEPublicKey = module.exports.E2EEPublicKey = function(args) {
  this.version = null;
  this.keyId = null;
  this.keyData = null;
  this.createdTime = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.keyId !== undefined && args.keyId !== null) {
      this.keyId = args.keyId;
    }
    if (args.keyData !== undefined && args.keyData !== null) {
      this.keyData = args.keyData;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
E2EEPublicKey.prototype = {};
E2EEPublicKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keyId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

E2EEPublicKey.prototype.write = function(output) {
  output.writeStructBegin('E2EEPublicKey');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 1);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.keyId !== null && this.keyId !== undefined) {
    output.writeFieldBegin('keyId', Thrift.Type.I32, 2);
    output.writeI32(this.keyId);
    output.writeFieldEnd();
  }
  if (this.keyData !== null && this.keyData !== undefined) {
    output.writeFieldBegin('keyData', Thrift.Type.STRING, 4);
    output.writeBinary(this.keyData);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmailConfirmation = module.exports.EmailConfirmation = function(args) {
  this.usePasswordSet = null;
  this.email = null;
  this.password = null;
  this.ignoreDuplication = null;
  this.useEmailOnly = null;
  if (args) {
    if (args.usePasswordSet !== undefined && args.usePasswordSet !== null) {
      this.usePasswordSet = args.usePasswordSet;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.ignoreDuplication !== undefined && args.ignoreDuplication !== null) {
      this.ignoreDuplication = args.ignoreDuplication;
    }
    if (args.useEmailOnly !== undefined && args.useEmailOnly !== null) {
      this.useEmailOnly = args.useEmailOnly;
    }
  }
};
EmailConfirmation.prototype = {};
EmailConfirmation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.usePasswordSet = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.ignoreDuplication = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.useEmailOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailConfirmation.prototype.write = function(output) {
  output.writeStructBegin('EmailConfirmation');
  if (this.usePasswordSet !== null && this.usePasswordSet !== undefined) {
    output.writeFieldBegin('usePasswordSet', Thrift.Type.BOOL, 1);
    output.writeBool(this.usePasswordSet);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.ignoreDuplication !== null && this.ignoreDuplication !== undefined) {
    output.writeFieldBegin('ignoreDuplication', Thrift.Type.BOOL, 4);
    output.writeBool(this.ignoreDuplication);
    output.writeFieldEnd();
  }
  if (this.useEmailOnly !== null && this.useEmailOnly !== undefined) {
    output.writeFieldBegin('useEmailOnly', Thrift.Type.BOOL, 5);
    output.writeBool(this.useEmailOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmailConfirmationResult = module.exports.EmailConfirmationResult = function(args) {
  this.certificate = null;
  if (args) {
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
EmailConfirmationResult.prototype = {};
EmailConfirmationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailConfirmationResult.prototype.write = function(output) {
  output.writeStructBegin('EmailConfirmationResult');
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 1);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EmailConfirmationSession = module.exports.EmailConfirmationSession = function(args) {
  this.emailConfirmationType = null;
  this.verifier = null;
  this.targetEmail = null;
  if (args) {
    if (args.emailConfirmationType !== undefined && args.emailConfirmationType !== null) {
      this.emailConfirmationType = args.emailConfirmationType;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.targetEmail !== undefined && args.targetEmail !== null) {
      this.targetEmail = args.targetEmail;
    }
  }
};
EmailConfirmationSession.prototype = {};
EmailConfirmationSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.emailConfirmationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.targetEmail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailConfirmationSession.prototype.write = function(output) {
  output.writeStructBegin('EmailConfirmationSession');
  if (this.emailConfirmationType !== null && this.emailConfirmationType !== undefined) {
    output.writeFieldBegin('emailConfirmationType', Thrift.Type.I32, 1);
    output.writeI32(this.emailConfirmationType);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 2);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.targetEmail !== null && this.targetEmail !== undefined) {
    output.writeFieldBegin('targetEmail', Thrift.Type.STRING, 3);
    output.writeString(this.targetEmail);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtendedProfile = module.exports.ExtendedProfile = function(args) {
  this.birthday = null;
  if (args) {
    if (args.birthday !== undefined && args.birthday !== null) {
      this.birthday = new ttypes.ExtendedProfileBirthday(args.birthday);
    }
  }
};
ExtendedProfile.prototype = {};
ExtendedProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.birthday = new ttypes.ExtendedProfileBirthday();
        this.birthday.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedProfile.prototype.write = function(output) {
  output.writeStructBegin('ExtendedProfile');
  if (this.birthday !== null && this.birthday !== undefined) {
    output.writeFieldBegin('birthday', Thrift.Type.STRUCT, 1);
    this.birthday.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtendedProfileBirthday = module.exports.ExtendedProfileBirthday = function(args) {
  this.year = null;
  this.yearPrivacyLevelType = null;
  this.yearEnabled = null;
  this.day = null;
  this.dayPrivacyLevelType = null;
  this.dayEnabled = null;
  if (args) {
    if (args.year !== undefined && args.year !== null) {
      this.year = args.year;
    }
    if (args.yearPrivacyLevelType !== undefined && args.yearPrivacyLevelType !== null) {
      this.yearPrivacyLevelType = args.yearPrivacyLevelType;
    }
    if (args.yearEnabled !== undefined && args.yearEnabled !== null) {
      this.yearEnabled = args.yearEnabled;
    }
    if (args.day !== undefined && args.day !== null) {
      this.day = args.day;
    }
    if (args.dayPrivacyLevelType !== undefined && args.dayPrivacyLevelType !== null) {
      this.dayPrivacyLevelType = args.dayPrivacyLevelType;
    }
    if (args.dayEnabled !== undefined && args.dayEnabled !== null) {
      this.dayEnabled = args.dayEnabled;
    }
  }
};
ExtendedProfileBirthday.prototype = {};
ExtendedProfileBirthday.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.year = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.yearPrivacyLevelType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.yearEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.day = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.dayPrivacyLevelType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.dayEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtendedProfileBirthday.prototype.write = function(output) {
  output.writeStructBegin('ExtendedProfileBirthday');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.STRING, 1);
    output.writeString(this.year);
    output.writeFieldEnd();
  }
  if (this.yearPrivacyLevelType !== null && this.yearPrivacyLevelType !== undefined) {
    output.writeFieldBegin('yearPrivacyLevelType', Thrift.Type.I32, 2);
    output.writeI32(this.yearPrivacyLevelType);
    output.writeFieldEnd();
  }
  if (this.yearEnabled !== null && this.yearEnabled !== undefined) {
    output.writeFieldBegin('yearEnabled', Thrift.Type.BOOL, 3);
    output.writeBool(this.yearEnabled);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.STRING, 5);
    output.writeString(this.day);
    output.writeFieldEnd();
  }
  if (this.dayPrivacyLevelType !== null && this.dayPrivacyLevelType !== undefined) {
    output.writeFieldBegin('dayPrivacyLevelType', Thrift.Type.I32, 6);
    output.writeI32(this.dayPrivacyLevelType);
    output.writeFieldEnd();
  }
  if (this.dayEnabled !== null && this.dayEnabled !== undefined) {
    output.writeFieldBegin('dayEnabled', Thrift.Type.BOOL, 7);
    output.writeBool(this.dayEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendChannelMatricesResponse = module.exports.FriendChannelMatricesResponse = function(args) {
  this.expires = null;
  this.matrices = null;
  if (args) {
    if (args.expires !== undefined && args.expires !== null) {
      this.expires = args.expires;
    }
    if (args.matrices !== undefined && args.matrices !== null) {
      this.matrices = Thrift.copyList(args.matrices, [null]);
    }
  }
};
FriendChannelMatricesResponse.prototype = {};
FriendChannelMatricesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.expires = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.matrices = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = new ttypes.FriendChannelMatrix();
          elem352.read(input);
          this.matrices.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendChannelMatricesResponse.prototype.write = function(output) {
  output.writeStructBegin('FriendChannelMatricesResponse');
  if (this.expires !== null && this.expires !== undefined) {
    output.writeFieldBegin('expires', Thrift.Type.I64, 1);
    output.writeI64(this.expires);
    output.writeFieldEnd();
  }
  if (this.matrices !== null && this.matrices !== undefined) {
    output.writeFieldBegin('matrices', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.matrices.length);
    for (var iter353 in this.matrices)
    {
      if (this.matrices.hasOwnProperty(iter353))
      {
        iter353 = this.matrices[iter353];
        iter353.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendChannelMatrix = module.exports.FriendChannelMatrix = function(args) {
  this.channelId = null;
  this.representMid = null;
  this.count = null;
  this.point = null;
  if (args) {
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.representMid !== undefined && args.representMid !== null) {
      this.representMid = args.representMid;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.point !== undefined && args.point !== null) {
      this.point = args.point;
    }
  }
};
FriendChannelMatrix.prototype = {};
FriendChannelMatrix.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.representMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.count = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.point = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendChannelMatrix.prototype.write = function(output) {
  output.writeStructBegin('FriendChannelMatrix');
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 1);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.representMid !== null && this.representMid !== undefined) {
    output.writeFieldBegin('representMid', Thrift.Type.STRING, 2);
    output.writeString(this.representMid);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I32, 3);
    output.writeI32(this.count);
    output.writeFieldEnd();
  }
  if (this.point !== null && this.point !== undefined) {
    output.writeFieldBegin('point', Thrift.Type.I32, 4);
    output.writeI32(this.point);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendRequest = module.exports.FriendRequest = function(args) {
  this.eMid = null;
  this.mid = null;
  this.direction = null;
  this.method = null;
  this.param = null;
  this.timestamp = null;
  this.seqId = null;
  this.displayName = null;
  this.picturePath = null;
  this.pictureStatus = null;
  if (args) {
    if (args.eMid !== undefined && args.eMid !== null) {
      this.eMid = args.eMid;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.param !== undefined && args.param !== null) {
      this.param = args.param;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.seqId !== undefined && args.seqId !== null) {
      this.seqId = args.seqId;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
  }
};
FriendRequest.prototype = {};
FriendRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.param = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.seqId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendRequest.prototype.write = function(output) {
  output.writeStructBegin('FriendRequest');
  if (this.eMid !== null && this.eMid !== undefined) {
    output.writeFieldBegin('eMid', Thrift.Type.STRING, 1);
    output.writeString(this.eMid);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 2);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 3);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 4);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.param !== null && this.param !== undefined) {
    output.writeFieldBegin('param', Thrift.Type.STRING, 5);
    output.writeString(this.param);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 6);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.seqId !== null && this.seqId !== undefined) {
    output.writeFieldBegin('seqId', Thrift.Type.I64, 7);
    output.writeI64(this.seqId);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 10);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 11);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 12);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendRequestsInfo = module.exports.FriendRequestsInfo = function(args) {
  this.totalIncomingCount = null;
  this.totalOutgoingCount = null;
  this.recentIncomings = null;
  this.recentOutgoings = null;
  this.totalIncomingLimit = null;
  this.totalOutgoingLimit = null;
  if (args) {
    if (args.totalIncomingCount !== undefined && args.totalIncomingCount !== null) {
      this.totalIncomingCount = args.totalIncomingCount;
    }
    if (args.totalOutgoingCount !== undefined && args.totalOutgoingCount !== null) {
      this.totalOutgoingCount = args.totalOutgoingCount;
    }
    if (args.recentIncomings !== undefined && args.recentIncomings !== null) {
      this.recentIncomings = Thrift.copyList(args.recentIncomings, [ttypes.FriendRequest]);
    }
    if (args.recentOutgoings !== undefined && args.recentOutgoings !== null) {
      this.recentOutgoings = Thrift.copyList(args.recentOutgoings, [ttypes.FriendRequest]);
    }
    if (args.totalIncomingLimit !== undefined && args.totalIncomingLimit !== null) {
      this.totalIncomingLimit = args.totalIncomingLimit;
    }
    if (args.totalOutgoingLimit !== undefined && args.totalOutgoingLimit !== null) {
      this.totalOutgoingLimit = args.totalOutgoingLimit;
    }
  }
};
FriendRequestsInfo.prototype = {};
FriendRequestsInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.totalIncomingCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalOutgoingCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size354 = 0;
        var _rtmp3358;
        this.recentIncomings = [];
        var _etype357 = 0;
        _rtmp3358 = input.readListBegin();
        _etype357 = _rtmp3358.etype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var elem360 = null;
          elem360 = new ttypes.FriendRequest();
          elem360.read(input);
          this.recentIncomings.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size361 = 0;
        var _rtmp3365;
        this.recentOutgoings = [];
        var _etype364 = 0;
        _rtmp3365 = input.readListBegin();
        _etype364 = _rtmp3365.etype;
        _size361 = _rtmp3365.size;
        for (var _i366 = 0; _i366 < _size361; ++_i366)
        {
          var elem367 = null;
          elem367 = new ttypes.FriendRequest();
          elem367.read(input);
          this.recentOutgoings.push(elem367);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.totalIncomingLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.totalOutgoingLimit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendRequestsInfo.prototype.write = function(output) {
  output.writeStructBegin('FriendRequestsInfo');
  if (this.totalIncomingCount !== null && this.totalIncomingCount !== undefined) {
    output.writeFieldBegin('totalIncomingCount', Thrift.Type.I32, 1);
    output.writeI32(this.totalIncomingCount);
    output.writeFieldEnd();
  }
  if (this.totalOutgoingCount !== null && this.totalOutgoingCount !== undefined) {
    output.writeFieldBegin('totalOutgoingCount', Thrift.Type.I32, 2);
    output.writeI32(this.totalOutgoingCount);
    output.writeFieldEnd();
  }
  if (this.recentIncomings !== null && this.recentIncomings !== undefined) {
    output.writeFieldBegin('recentIncomings', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentIncomings.length);
    for (var iter368 in this.recentIncomings)
    {
      if (this.recentIncomings.hasOwnProperty(iter368))
      {
        iter368 = this.recentIncomings[iter368];
        iter368.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recentOutgoings !== null && this.recentOutgoings !== undefined) {
    output.writeFieldBegin('recentOutgoings', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.recentOutgoings.length);
    for (var iter369 in this.recentOutgoings)
    {
      if (this.recentOutgoings.hasOwnProperty(iter369))
      {
        iter369 = this.recentOutgoings[iter369];
        iter369.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalIncomingLimit !== null && this.totalIncomingLimit !== undefined) {
    output.writeFieldBegin('totalIncomingLimit', Thrift.Type.I32, 5);
    output.writeI32(this.totalIncomingLimit);
    output.writeFieldEnd();
  }
  if (this.totalOutgoingLimit !== null && this.totalOutgoingLimit !== undefined) {
    output.writeFieldBegin('totalOutgoingLimit', Thrift.Type.I32, 6);
    output.writeI32(this.totalOutgoingLimit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Geolocation = module.exports.Geolocation = function(args) {
  this.longitude = null;
  this.latitude = null;
  if (args) {
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
  }
};
Geolocation.prototype = {};
Geolocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Geolocation.prototype.write = function(output) {
  output.writeStructBegin('Geolocation');
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBalanceRequest = module.exports.GetBalanceRequest = function(args) {
};
GetBalanceRequest.prototype = {};
GetBalanceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBalanceRequest.prototype.write = function(output) {
  output.writeStructBegin('GetBalanceRequest');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetBalanceResponse = module.exports.GetBalanceResponse = function(args) {
  this.balance = null;
  if (args) {
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new ttypes.Balance(args.balance);
    }
  }
};
GetBalanceResponse.prototype = {};
GetBalanceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new ttypes.Balance();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetBalanceResponse.prototype.write = function(output) {
  output.writeStructBegin('GetBalanceResponse');
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 1);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCoinHistoryRequest = module.exports.GetCoinHistoryRequest = function(args) {
  this.appStoreCode = null;
  this.country = null;
  this.language = null;
  this.searchEndDate = null;
  this.offset = null;
  this.limit = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.searchEndDate !== undefined && args.searchEndDate !== null) {
      this.searchEndDate = args.searchEndDate;
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
GetCoinHistoryRequest.prototype = {};
GetCoinHistoryRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.searchEndDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCoinHistoryRequest.prototype.write = function(output) {
  output.writeStructBegin('GetCoinHistoryRequest');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 1);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.searchEndDate !== null && this.searchEndDate !== undefined) {
    output.writeFieldBegin('searchEndDate', Thrift.Type.STRING, 4);
    output.writeString(this.searchEndDate);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 5);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 6);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCoinHistoryResponse = module.exports.GetCoinHistoryResponse = function(args) {
  this.histories = null;
  this.balance = null;
  this.offset = null;
  this.hasNext = null;
  if (args) {
    if (args.histories !== undefined && args.histories !== null) {
      this.histories = Thrift.copyList(args.histories, [ttypes.CoinHistory]);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new ttypes.Coin(args.balance);
    }
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
GetCoinHistoryResponse.prototype = {};
GetCoinHistoryResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size370 = 0;
        var _rtmp3374;
        this.histories = [];
        var _etype373 = 0;
        _rtmp3374 = input.readListBegin();
        _etype373 = _rtmp3374.etype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          var elem376 = null;
          elem376 = new ttypes.CoinHistory();
          elem376.read(input);
          this.histories.push(elem376);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new ttypes.Coin();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCoinHistoryResponse.prototype.write = function(output) {
  output.writeStructBegin('GetCoinHistoryResponse');
  if (this.histories !== null && this.histories !== undefined) {
    output.writeFieldBegin('histories', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.histories.length);
    for (var iter377 in this.histories)
    {
      if (this.histories.hasOwnProperty(iter377))
      {
        iter377 = this.histories[iter377];
        iter377.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I32, 3);
    output.writeI32(this.offset);
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 4);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCoinProductsRequest = module.exports.GetCoinProductsRequest = function(args) {
  this.appStoreCode = null;
  this.country = null;
  this.language = null;
  this.pgCode = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.pgCode !== undefined && args.pgCode !== null) {
      this.pgCode = args.pgCode;
    }
  }
};
GetCoinProductsRequest.prototype = {};
GetCoinProductsRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.pgCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCoinProductsRequest.prototype.write = function(output) {
  output.writeStructBegin('GetCoinProductsRequest');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 1);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 2);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.pgCode !== null && this.pgCode !== undefined) {
    output.writeFieldBegin('pgCode', Thrift.Type.I32, 4);
    output.writeI32(this.pgCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetCoinProductsResponse = module.exports.GetCoinProductsResponse = function(args) {
  this.items = null;
  if (args) {
    if (args.items !== undefined && args.items !== null) {
      this.items = Thrift.copyList(args.items, [ttypes.CoinProductItem]);
    }
  }
};
GetCoinProductsResponse.prototype = {};
GetCoinProductsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size378 = 0;
        var _rtmp3382;
        this.items = [];
        var _etype381 = 0;
        _rtmp3382 = input.readListBegin();
        _etype381 = _rtmp3382.etype;
        _size378 = _rtmp3382.size;
        for (var _i383 = 0; _i383 < _size378; ++_i383)
        {
          var elem384 = null;
          elem384 = new ttypes.CoinProductItem();
          elem384.read(input);
          this.items.push(elem384);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetCoinProductsResponse.prototype.write = function(output) {
  output.writeStructBegin('GetCoinProductsResponse');
  if (this.items !== null && this.items !== undefined) {
    output.writeFieldBegin('items', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.items.length);
    for (var iter385 in this.items)
    {
      if (this.items.hasOwnProperty(iter385))
      {
        iter385 = this.items[iter385];
        iter385.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetTotalCoinBalanceRequest = module.exports.GetTotalCoinBalanceRequest = function(args) {
  this.appStoreCode = null;
  if (args) {
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
  }
};
GetTotalCoinBalanceRequest.prototype = {};
GetTotalCoinBalanceRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTotalCoinBalanceRequest.prototype.write = function(output) {
  output.writeStructBegin('GetTotalCoinBalanceRequest');
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 1);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetTotalCoinBalanceResponse = module.exports.GetTotalCoinBalanceResponse = function(args) {
  this.totalBalance = null;
  this.paidCoinBalance = null;
  this.freeCoinBalance = null;
  this.rewardCoinBalance = null;
  this.expectedAutoExchangedCoinBalance = null;
  if (args) {
    if (args.totalBalance !== undefined && args.totalBalance !== null) {
      this.totalBalance = args.totalBalance;
    }
    if (args.paidCoinBalance !== undefined && args.paidCoinBalance !== null) {
      this.paidCoinBalance = args.paidCoinBalance;
    }
    if (args.freeCoinBalance !== undefined && args.freeCoinBalance !== null) {
      this.freeCoinBalance = args.freeCoinBalance;
    }
    if (args.rewardCoinBalance !== undefined && args.rewardCoinBalance !== null) {
      this.rewardCoinBalance = args.rewardCoinBalance;
    }
    if (args.expectedAutoExchangedCoinBalance !== undefined && args.expectedAutoExchangedCoinBalance !== null) {
      this.expectedAutoExchangedCoinBalance = args.expectedAutoExchangedCoinBalance;
    }
  }
};
GetTotalCoinBalanceResponse.prototype = {};
GetTotalCoinBalanceResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.totalBalance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paidCoinBalance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.freeCoinBalance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rewardCoinBalance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.expectedAutoExchangedCoinBalance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetTotalCoinBalanceResponse.prototype.write = function(output) {
  output.writeStructBegin('GetTotalCoinBalanceResponse');
  if (this.totalBalance !== null && this.totalBalance !== undefined) {
    output.writeFieldBegin('totalBalance', Thrift.Type.STRING, 1);
    output.writeString(this.totalBalance);
    output.writeFieldEnd();
  }
  if (this.paidCoinBalance !== null && this.paidCoinBalance !== undefined) {
    output.writeFieldBegin('paidCoinBalance', Thrift.Type.STRING, 2);
    output.writeString(this.paidCoinBalance);
    output.writeFieldEnd();
  }
  if (this.freeCoinBalance !== null && this.freeCoinBalance !== undefined) {
    output.writeFieldBegin('freeCoinBalance', Thrift.Type.STRING, 3);
    output.writeString(this.freeCoinBalance);
    output.writeFieldEnd();
  }
  if (this.rewardCoinBalance !== null && this.rewardCoinBalance !== undefined) {
    output.writeFieldBegin('rewardCoinBalance', Thrift.Type.STRING, 4);
    output.writeString(this.rewardCoinBalance);
    output.writeFieldEnd();
  }
  if (this.expectedAutoExchangedCoinBalance !== null && this.expectedAutoExchangedCoinBalance !== undefined) {
    output.writeFieldBegin('expectedAutoExchangedCoinBalance', Thrift.Type.STRING, 5);
    output.writeString(this.expectedAutoExchangedCoinBalance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Group = module.exports.Group = function(args) {
  this.id = null;
  this.createdTime = null;
  this.name = null;
  this.pictureStatus = null;
  this.preventedJoinByTicket = null;
  this.groupPreference = null;
  this.members = null;
  this.creator = null;
  this.invitee = null;
  this.notificationDisabled = null;
  this.picturePath = null;
  this.memberMids = null;
  this.inviteeMids = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.preventedJoinByTicket !== undefined && args.preventedJoinByTicket !== null) {
      this.preventedJoinByTicket = args.preventedJoinByTicket;
    }
    if (args.groupPreference !== undefined && args.groupPreference !== null) {
      this.groupPreference = new ttypes.GroupPreference(args.groupPreference);
    }
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [ttypes.Contact]);
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = new ttypes.Contact(args.creator);
    }
    if (args.invitee !== undefined && args.invitee !== null) {
      this.invitee = Thrift.copyList(args.invitee, [ttypes.Contact]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.inviteeMids !== undefined && args.inviteeMids !== null) {
      this.inviteeMids = Thrift.copyList(args.inviteeMids, [null]);
    }
  }
};
Group.prototype = {};
Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.preventedJoinByTicket = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupPreference = new ttypes.GroupPreference();
        this.groupPreference.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size386 = 0;
        var _rtmp3390;
        this.members = [];
        var _etype389 = 0;
        _rtmp3390 = input.readListBegin();
        _etype389 = _rtmp3390.etype;
        _size386 = _rtmp3390.size;
        for (var _i391 = 0; _i391 < _size386; ++_i391)
        {
          var elem392 = null;
          elem392 = new ttypes.Contact();
          elem392.read(input);
          this.members.push(elem392);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.creator = new ttypes.Contact();
        this.creator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size393 = 0;
        var _rtmp3397;
        this.invitee = [];
        var _etype396 = 0;
        _rtmp3397 = input.readListBegin();
        _etype396 = _rtmp3397.etype;
        _size393 = _rtmp3397.size;
        for (var _i398 = 0; _i398 < _size393; ++_i398)
        {
          var elem399 = null;
          elem399 = new ttypes.Contact();
          elem399.read(input);
          this.invitee.push(elem399);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.LIST) {
        var _size400 = 0;
        var _rtmp3404;
        this.memberMids = [];
        var _etype403 = 0;
        _rtmp3404 = input.readListBegin();
        _etype403 = _rtmp3404.etype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var elem406 = null;
          elem406 = input.readString();
          this.memberMids.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.LIST) {
        var _size407 = 0;
        var _rtmp3411;
        this.inviteeMids = [];
        var _etype410 = 0;
        _rtmp3411 = input.readListBegin();
        _etype410 = _rtmp3411.etype;
        _size407 = _rtmp3411.size;
        for (var _i412 = 0; _i412 < _size407; ++_i412)
        {
          var elem413 = null;
          elem413 = input.readString();
          this.inviteeMids.push(elem413);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Group.prototype.write = function(output) {
  output.writeStructBegin('Group');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 11);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.preventedJoinByTicket !== null && this.preventedJoinByTicket !== undefined) {
    output.writeFieldBegin('preventedJoinByTicket', Thrift.Type.BOOL, 12);
    output.writeBool(this.preventedJoinByTicket);
    output.writeFieldEnd();
  }
  if (this.groupPreference !== null && this.groupPreference !== undefined) {
    output.writeFieldBegin('groupPreference', Thrift.Type.STRUCT, 13);
    this.groupPreference.write(output);
    output.writeFieldEnd();
  }
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter414 in this.members)
    {
      if (this.members.hasOwnProperty(iter414))
      {
        iter414 = this.members[iter414];
        iter414.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRUCT, 21);
    this.creator.write(output);
    output.writeFieldEnd();
  }
  if (this.invitee !== null && this.invitee !== undefined) {
    output.writeFieldBegin('invitee', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.STRUCT, this.invitee.length);
    for (var iter415 in this.invitee)
    {
      if (this.invitee.hasOwnProperty(iter415))
      {
        iter415 = this.invitee[iter415];
        iter415.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 32);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter416 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter416))
      {
        iter416 = this.memberMids[iter416];
        output.writeString(iter416);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.inviteeMids !== null && this.inviteeMids !== undefined) {
    output.writeFieldBegin('inviteeMids', Thrift.Type.LIST, 41);
    output.writeListBegin(Thrift.Type.STRING, this.inviteeMids.length);
    for (var iter417 in this.inviteeMids)
    {
      if (this.inviteeMids.hasOwnProperty(iter417))
      {
        iter417 = this.inviteeMids[iter417];
        output.writeString(iter417);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupCall = module.exports.GroupCall = function(args) {
  this.online = null;
  this.chatMid = null;
  this.hostMid = null;
  this.memberMids = null;
  this.started = null;
  this.mediaType = null;
  if (args) {
    if (args.online !== undefined && args.online !== null) {
      this.online = args.online;
    }
    if (args.chatMid !== undefined && args.chatMid !== null) {
      this.chatMid = args.chatMid;
    }
    if (args.hostMid !== undefined && args.hostMid !== null) {
      this.hostMid = args.hostMid;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
    if (args.started !== undefined && args.started !== null) {
      this.started = args.started;
    }
    if (args.mediaType !== undefined && args.mediaType !== null) {
      this.mediaType = args.mediaType;
    }
  }
};
GroupCall.prototype = {};
GroupCall.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.online = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hostMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size418 = 0;
        var _rtmp3422;
        this.memberMids = [];
        var _etype421 = 0;
        _rtmp3422 = input.readListBegin();
        _etype421 = _rtmp3422.etype;
        _size418 = _rtmp3422.size;
        for (var _i423 = 0; _i423 < _size418; ++_i423)
        {
          var elem424 = null;
          elem424 = input.readString();
          this.memberMids.push(elem424);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.started = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.mediaType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCall.prototype.write = function(output) {
  output.writeStructBegin('GroupCall');
  if (this.online !== null && this.online !== undefined) {
    output.writeFieldBegin('online', Thrift.Type.BOOL, 1);
    output.writeBool(this.online);
    output.writeFieldEnd();
  }
  if (this.chatMid !== null && this.chatMid !== undefined) {
    output.writeFieldBegin('chatMid', Thrift.Type.STRING, 2);
    output.writeString(this.chatMid);
    output.writeFieldEnd();
  }
  if (this.hostMid !== null && this.hostMid !== undefined) {
    output.writeFieldBegin('hostMid', Thrift.Type.STRING, 3);
    output.writeString(this.hostMid);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter425 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter425))
      {
        iter425 = this.memberMids[iter425];
        output.writeString(iter425);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.started !== null && this.started !== undefined) {
    output.writeFieldBegin('started', Thrift.Type.I64, 5);
    output.writeI64(this.started);
    output.writeFieldEnd();
  }
  if (this.mediaType !== null && this.mediaType !== undefined) {
    output.writeFieldBegin('mediaType', Thrift.Type.I32, 6);
    output.writeI32(this.mediaType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupCallRoute = module.exports.GroupCallRoute = function(args) {
  this.token = null;
  this.cscf = null;
  this.mix = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cscf !== undefined && args.cscf !== null) {
      this.cscf = new ttypes.CallHost(args.cscf);
    }
    if (args.mix !== undefined && args.mix !== null) {
      this.mix = new ttypes.CallHost(args.mix);
    }
  }
};
GroupCallRoute.prototype = {};
GroupCallRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cscf = new ttypes.CallHost();
        this.cscf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mix = new ttypes.CallHost();
        this.mix.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCallRoute.prototype.write = function(output) {
  output.writeStructBegin('GroupCallRoute');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cscf !== null && this.cscf !== undefined) {
    output.writeFieldBegin('cscf', Thrift.Type.STRUCT, 2);
    this.cscf.write(output);
    output.writeFieldEnd();
  }
  if (this.mix !== null && this.mix !== undefined) {
    output.writeFieldBegin('mix', Thrift.Type.STRUCT, 3);
    this.mix.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupPreference = module.exports.GroupPreference = function(args) {
  this.invitationTicket = null;
  this.favoriteTimestamp = null;
  if (args) {
    if (args.invitationTicket !== undefined && args.invitationTicket !== null) {
      this.invitationTicket = args.invitationTicket;
    }
    if (args.favoriteTimestamp !== undefined && args.favoriteTimestamp !== null) {
      this.favoriteTimestamp = args.favoriteTimestamp;
    }
  }
};
GroupPreference.prototype = {};
GroupPreference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.invitationTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.favoriteTimestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupPreference.prototype.write = function(output) {
  output.writeStructBegin('GroupPreference');
  if (this.invitationTicket !== null && this.invitationTicket !== undefined) {
    output.writeFieldBegin('invitationTicket', Thrift.Type.STRING, 11);
    output.writeString(this.invitationTicket);
    output.writeFieldEnd();
  }
  if (this.favoriteTimestamp !== null && this.favoriteTimestamp !== undefined) {
    output.writeFieldBegin('favoriteTimestamp', Thrift.Type.I64, 12);
    output.writeI64(this.favoriteTimestamp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IdentityCredential = module.exports.IdentityCredential = function(args) {
  this.provider = null;
  this.identifier = null;
  this.password = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
IdentityCredential.prototype = {};
IdentityCredential.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.provider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IdentityCredential.prototype.write = function(output) {
  output.writeStructBegin('IdentityCredential');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.I32, 1);
    output.writeI32(this.provider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 2);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Location = module.exports.Location = function(args) {
  this.title = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  this.phone = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
  }
};
Location.prototype = {};
Location.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Location.prototype.write = function(output) {
  output.writeStructBegin('Location');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 5);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginRequest = module.exports.LoginRequest = function(args) {
  this.type = null;
  this.identityProvider = null;
  this.identifier = null;
  this.password = null;
  this.keepLoggedIn = null;
  this.accessLocation = null;
  this.systemName = null;
  this.certificate = null;
  this.verifier = null;
  this.secret = null;
  this.e2eeVersion = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.keepLoggedIn !== undefined && args.keepLoggedIn !== null) {
      this.keepLoggedIn = args.keepLoggedIn;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
    if (args.e2eeVersion !== undefined && args.e2eeVersion !== null) {
      this.e2eeVersion = args.e2eeVersion;
    }
  }
};
LoginRequest.prototype = {};
LoginRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.keepLoggedIn = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.e2eeVersion = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginRequest.prototype.write = function(output) {
  output.writeStructBegin('LoginRequest');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 2);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 3);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.keepLoggedIn !== null && this.keepLoggedIn !== undefined) {
    output.writeFieldBegin('keepLoggedIn', Thrift.Type.BOOL, 5);
    output.writeBool(this.keepLoggedIn);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 6);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 7);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 8);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 9);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 10);
    output.writeBinary(this.secret);
    output.writeFieldEnd();
  }
  if (this.e2eeVersion !== null && this.e2eeVersion !== undefined) {
    output.writeFieldBegin('e2eeVersion', Thrift.Type.I32, 11);
    output.writeI32(this.e2eeVersion);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginResult = module.exports.LoginResult = function(args) {
  this.authToken = null;
  this.certificate = null;
  this.verifier = null;
  this.pinCode = null;
  this.type = null;
  this.lastPrimaryBindTime = null;
  this.displayMessage = null;
  this.sessionForSMSConfirm = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
    if (args.verifier !== undefined && args.verifier !== null) {
      this.verifier = args.verifier;
    }
    if (args.pinCode !== undefined && args.pinCode !== null) {
      this.pinCode = args.pinCode;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.lastPrimaryBindTime !== undefined && args.lastPrimaryBindTime !== null) {
      this.lastPrimaryBindTime = args.lastPrimaryBindTime;
    }
    if (args.displayMessage !== undefined && args.displayMessage !== null) {
      this.displayMessage = args.displayMessage;
    }
    if (args.sessionForSMSConfirm !== undefined && args.sessionForSMSConfirm !== null) {
      this.sessionForSMSConfirm = new ttypes.VerificationSessionData(args.sessionForSMSConfirm);
    }
  }
};
LoginResult.prototype = {};
LoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pinCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.lastPrimaryBindTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.displayMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionForSMSConfirm = new ttypes.VerificationSessionData();
        this.sessionForSMSConfirm.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResult.prototype.write = function(output) {
  output.writeStructBegin('LoginResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 2);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  if (this.verifier !== null && this.verifier !== undefined) {
    output.writeFieldBegin('verifier', Thrift.Type.STRING, 3);
    output.writeString(this.verifier);
    output.writeFieldEnd();
  }
  if (this.pinCode !== null && this.pinCode !== undefined) {
    output.writeFieldBegin('pinCode', Thrift.Type.STRING, 4);
    output.writeString(this.pinCode);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.lastPrimaryBindTime !== null && this.lastPrimaryBindTime !== undefined) {
    output.writeFieldBegin('lastPrimaryBindTime', Thrift.Type.I64, 6);
    output.writeI64(this.lastPrimaryBindTime);
    output.writeFieldEnd();
  }
  if (this.displayMessage !== null && this.displayMessage !== undefined) {
    output.writeFieldBegin('displayMessage', Thrift.Type.STRING, 7);
    output.writeString(this.displayMessage);
    output.writeFieldEnd();
  }
  if (this.sessionForSMSConfirm !== null && this.sessionForSMSConfirm !== undefined) {
    output.writeFieldBegin('sessionForSMSConfirm', Thrift.Type.STRUCT, 8);
    this.sessionForSMSConfirm.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LoginSession = module.exports.LoginSession = function(args) {
  this.tokenKey = null;
  this.expirationTime = null;
  this.applicationType = null;
  this.systemName = null;
  this.accessLocation = null;
  if (args) {
    if (args.tokenKey !== undefined && args.tokenKey !== null) {
      this.tokenKey = args.tokenKey;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.systemName !== undefined && args.systemName !== null) {
      this.systemName = args.systemName;
    }
    if (args.accessLocation !== undefined && args.accessLocation !== null) {
      this.accessLocation = args.accessLocation;
    }
  }
};
LoginSession.prototype = {};
LoginSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tokenKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.applicationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.systemName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.accessLocation = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginSession.prototype.write = function(output) {
  output.writeStructBegin('LoginSession');
  if (this.tokenKey !== null && this.tokenKey !== undefined) {
    output.writeFieldBegin('tokenKey', Thrift.Type.STRING, 1);
    output.writeString(this.tokenKey);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 3);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.I32, 11);
    output.writeI32(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.systemName !== null && this.systemName !== undefined) {
    output.writeFieldBegin('systemName', Thrift.Type.STRING, 12);
    output.writeString(this.systemName);
    output.writeFieldEnd();
  }
  if (this.accessLocation !== null && this.accessLocation !== undefined) {
    output.writeFieldBegin('accessLocation', Thrift.Type.STRING, 22);
    output.writeString(this.accessLocation);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Message = module.exports.Message = function(args) {
  this.from_ = null;
  this.to = null;
  this.toType = null;
  this.id = null;
  this.createdTime = null;
  this.deliveredTime = null;
  this.text = null;
  this.location = null;
  this.hasContent = null;
  this.contentType = null;
  this.contentPreview = null;
  this.contentMetadata = null;
  this.sessionId = null;
  this.chunks = null;
  this.relatedMessageId = null;
  this.messageRelationType = null;
  this.readCount = null;
  this.relatedMessageServiceCode = null;
  if (args) {
    if (args.from_ !== undefined && args.from_ !== null) {
      this.from_ = args.from_;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.toType !== undefined && args.toType !== null) {
      this.toType = args.toType;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Location(args.location);
    }
    if (args.hasContent !== undefined && args.hasContent !== null) {
      this.hasContent = args.hasContent;
    }
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.contentPreview !== undefined && args.contentPreview !== null) {
      this.contentPreview = args.contentPreview;
    }
    if (args.contentMetadata !== undefined && args.contentMetadata !== null) {
      this.contentMetadata = Thrift.copyMap(args.contentMetadata, [null]);
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.chunks !== undefined && args.chunks !== null) {
      this.chunks = Thrift.copyList(args.chunks, [null]);
    }
    if (args.relatedMessageId !== undefined && args.relatedMessageId !== null) {
      this.relatedMessageId = args.relatedMessageId;
    }
    if (args.messageRelationType !== undefined && args.messageRelationType !== null) {
      this.messageRelationType = args.messageRelationType;
    }
    if (args.readCount !== undefined && args.readCount !== null) {
      this.readCount = args.readCount;
    }
    if (args.relatedMessageServiceCode !== undefined && args.relatedMessageServiceCode !== null) {
      this.relatedMessageServiceCode = args.relatedMessageServiceCode;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.from_ = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.toType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.hasContent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.contentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.contentPreview = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        var _size426 = 0;
        var _rtmp3430;
        this.contentMetadata = {};
        var _ktype427 = 0;
        var _vtype428 = 0;
        _rtmp3430 = input.readMapBegin();
        _ktype427 = _rtmp3430.ktype;
        _vtype428 = _rtmp3430.vtype;
        _size426 = _rtmp3430.size;
        for (var _i431 = 0; _i431 < _size426; ++_i431)
        {
          var key432 = null;
          var val433 = null;
          key432 = input.readString();
          val433 = input.readString();
          this.contentMetadata[key432] = val433;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BYTE) {
        this.sessionId = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size434 = 0;
        var _rtmp3438;
        this.chunks = [];
        var _etype437 = 0;
        _rtmp3438 = input.readListBegin();
        _etype437 = _rtmp3438.etype;
        _size434 = _rtmp3438.size;
        for (var _i439 = 0; _i439 < _size434; ++_i439)
        {
          var elem440 = null;
          elem440 = input.readBinary();
          this.chunks.push(elem440);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.relatedMessageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.messageRelationType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.readCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.relatedMessageServiceCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.from_ !== null && this.from_ !== undefined) {
    output.writeFieldBegin('from_', Thrift.Type.STRING, 1);
    output.writeString(this.from_);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.toType !== null && this.toType !== undefined) {
    output.writeFieldBegin('toType', Thrift.Type.I32, 3);
    output.writeI32(this.toType);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 5);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 6);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 10);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.hasContent !== null && this.hasContent !== undefined) {
    output.writeFieldBegin('hasContent', Thrift.Type.BOOL, 14);
    output.writeBool(this.hasContent);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.I32, 15);
    output.writeI32(this.contentType);
    output.writeFieldEnd();
  }
  if (this.contentPreview !== null && this.contentPreview !== undefined) {
    output.writeFieldBegin('contentPreview', Thrift.Type.STRING, 17);
    output.writeBinary(this.contentPreview);
    output.writeFieldEnd();
  }
  if (this.contentMetadata !== null && this.contentMetadata !== undefined) {
    output.writeFieldBegin('contentMetadata', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.contentMetadata));
    for (var kiter441 in this.contentMetadata)
    {
      if (this.contentMetadata.hasOwnProperty(kiter441))
      {
        var viter442 = this.contentMetadata[kiter441];
        output.writeString(kiter441);
        output.writeString(viter442);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.BYTE, 19);
    output.writeByte(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.chunks !== null && this.chunks !== undefined) {
    output.writeFieldBegin('chunks', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRING, this.chunks.length);
    for (var iter443 in this.chunks)
    {
      if (this.chunks.hasOwnProperty(iter443))
      {
        iter443 = this.chunks[iter443];
        output.writeBinary(iter443);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.relatedMessageId !== null && this.relatedMessageId !== undefined) {
    output.writeFieldBegin('relatedMessageId', Thrift.Type.STRING, 21);
    output.writeString(this.relatedMessageId);
    output.writeFieldEnd();
  }
  if (this.messageRelationType !== null && this.messageRelationType !== undefined) {
    output.writeFieldBegin('messageRelationType', Thrift.Type.I32, 22);
    output.writeI32(this.messageRelationType);
    output.writeFieldEnd();
  }
  if (this.readCount !== null && this.readCount !== undefined) {
    output.writeFieldBegin('readCount', Thrift.Type.I32, 23);
    output.writeI32(this.readCount);
    output.writeFieldEnd();
  }
  if (this.relatedMessageServiceCode !== null && this.relatedMessageServiceCode !== undefined) {
    output.writeFieldBegin('relatedMessageServiceCode', Thrift.Type.I32, 24);
    output.writeI32(this.relatedMessageServiceCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageBoxV2MessageId = module.exports.MessageBoxV2MessageId = function(args) {
  this.deliveredTime = null;
  this.messageId = null;
  if (args) {
    if (args.deliveredTime !== undefined && args.deliveredTime !== null) {
      this.deliveredTime = args.deliveredTime;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
  }
};
MessageBoxV2MessageId.prototype = {};
MessageBoxV2MessageId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.deliveredTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.messageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageBoxV2MessageId.prototype.write = function(output) {
  output.writeStructBegin('MessageBoxV2MessageId');
  if (this.deliveredTime !== null && this.deliveredTime !== undefined) {
    output.writeFieldBegin('deliveredTime', Thrift.Type.I64, 1);
    output.writeI64(this.deliveredTime);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.I64, 2);
    output.writeI64(this.messageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageCommitResult = module.exports.MessageCommitResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.messageStoreRequestId = null;
  this.messageIds = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.blockCount = null;
  this.unregisteredCount = null;
  this.unrelatedCount = null;
  this.errorDescription = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.messageStoreRequestId !== undefined && args.messageStoreRequestId !== null) {
      this.messageStoreRequestId = args.messageStoreRequestId;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
    if (args.unregisteredCount !== undefined && args.unregisteredCount !== null) {
      this.unregisteredCount = args.unregisteredCount;
    }
    if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
      this.unrelatedCount = args.unrelatedCount;
    }
    if (args.errorDescription !== undefined && args.errorDescription !== null) {
      this.errorDescription = args.errorDescription;
    }
  }
};
MessageCommitResult.prototype = {};
MessageCommitResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageStoreRequestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.messageIds = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = input.readString();
          this.messageIds.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unregisteredCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.unrelatedCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.errorDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageCommitResult.prototype.write = function(output) {
  output.writeStructBegin('MessageCommitResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.messageStoreRequestId !== null && this.messageStoreRequestId !== undefined) {
    output.writeFieldBegin('messageStoreRequestId', Thrift.Type.STRING, 3);
    output.writeString(this.messageStoreRequestId);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter451 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter451))
      {
        iter451 = this.messageIds[iter451];
        output.writeString(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 14);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  if (this.unregisteredCount !== null && this.unregisteredCount !== undefined) {
    output.writeFieldBegin('unregisteredCount', Thrift.Type.I64, 15);
    output.writeI64(this.unregisteredCount);
    output.writeFieldEnd();
  }
  if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
    output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 16);
    output.writeI64(this.unrelatedCount);
    output.writeFieldEnd();
  }
  if (this.errorDescription !== null && this.errorDescription !== undefined) {
    output.writeFieldBegin('errorDescription', Thrift.Type.STRING, 21);
    output.writeString(this.errorDescription);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MessageStoreResult = module.exports.MessageStoreResult = function(args) {
  this.requestId = null;
  this.messageIds = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.messageIds !== undefined && args.messageIds !== null) {
      this.messageIds = Thrift.copyList(args.messageIds, [null]);
    }
  }
};
MessageStoreResult.prototype = {};
MessageStoreResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.messageIds = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = input.readString();
          this.messageIds.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MessageStoreResult.prototype.write = function(output) {
  output.writeStructBegin('MessageStoreResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.messageIds !== null && this.messageIds !== undefined) {
    output.writeFieldBegin('messageIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.messageIds.length);
    for (var iter459 in this.messageIds)
    {
      if (this.messageIds.hasOwnProperty(iter459))
      {
        iter459 = this.messageIds[iter459];
        output.writeString(iter459);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MetaProfile = module.exports.MetaProfile = function(args) {
  this.createTime = null;
  this.regionCode = null;
  this.identities = null;
  this.udid = null;
  if (args) {
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.identities !== undefined && args.identities !== null) {
      this.identities = Thrift.copyMap(args.identities, [null]);
    }
    if (args.udid !== undefined && args.udid !== null) {
      this.udid = args.udid;
    }
  }
};
MetaProfile.prototype = {};
MetaProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size460 = 0;
        var _rtmp3464;
        this.identities = {};
        var _ktype461 = 0;
        var _vtype462 = 0;
        _rtmp3464 = input.readMapBegin();
        _ktype461 = _rtmp3464.ktype;
        _vtype462 = _rtmp3464.vtype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var key466 = null;
          var val467 = null;
          key466 = input.readI32();
          val467 = input.readString();
          this.identities[key466] = val467;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.udid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetaProfile.prototype.write = function(output) {
  output.writeStructBegin('MetaProfile');
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 1);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 2);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.identities !== null && this.identities !== undefined) {
    output.writeFieldBegin('identities', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.identities));
    for (var kiter468 in this.identities)
    {
      if (this.identities.hasOwnProperty(kiter468))
      {
        var viter469 = this.identities[kiter468];
        output.writeI32(kiter468);
        output.writeString(viter469);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.udid !== null && this.udid !== undefined) {
    output.writeFieldBegin('udid', Thrift.Type.STRING, 4);
    output.writeString(this.udid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MoretabRecommend = module.exports.MoretabRecommend = function(args) {
  this.accounts = null;
  this.nextUpdateTime = null;
  this.cacheTtlMillis = null;
  if (args) {
    if (args.accounts !== undefined && args.accounts !== null) {
      this.accounts = Thrift.copyList(args.accounts, [null]);
    }
    if (args.nextUpdateTime !== undefined && args.nextUpdateTime !== null) {
      this.nextUpdateTime = args.nextUpdateTime;
    }
    if (args.cacheTtlMillis !== undefined && args.cacheTtlMillis !== null) {
      this.cacheTtlMillis = args.cacheTtlMillis;
    }
  }
};
MoretabRecommend.prototype = {};
MoretabRecommend.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size470 = 0;
        var _rtmp3474;
        this.accounts = [];
        var _etype473 = 0;
        _rtmp3474 = input.readListBegin();
        _etype473 = _rtmp3474.etype;
        _size470 = _rtmp3474.size;
        for (var _i475 = 0; _i475 < _size470; ++_i475)
        {
          var elem476 = null;
          elem476 = new ttypes.MoretabRecommendAccount();
          elem476.read(input);
          this.accounts.push(elem476);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nextUpdateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.cacheTtlMillis = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoretabRecommend.prototype.write = function(output) {
  output.writeStructBegin('MoretabRecommend');
  if (this.accounts !== null && this.accounts !== undefined) {
    output.writeFieldBegin('accounts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.accounts.length);
    for (var iter477 in this.accounts)
    {
      if (this.accounts.hasOwnProperty(iter477))
      {
        iter477 = this.accounts[iter477];
        iter477.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nextUpdateTime !== null && this.nextUpdateTime !== undefined) {
    output.writeFieldBegin('nextUpdateTime', Thrift.Type.I64, 2);
    output.writeI64(this.nextUpdateTime);
    output.writeFieldEnd();
  }
  if (this.cacheTtlMillis !== null && this.cacheTtlMillis !== undefined) {
    output.writeFieldBegin('cacheTtlMillis', Thrift.Type.I64, 3);
    output.writeI64(this.cacheTtlMillis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MoretabRecommendAccount = module.exports.MoretabRecommendAccount = function(args) {
  this.mid = null;
  this.displayName = null;
  this.statusMessage = null;
  this.pictureStatus = null;
  this.picturePath = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
  }
};
MoretabRecommendAccount.prototype = {};
MoretabRecommendAccount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoretabRecommendAccount.prototype.write = function(output) {
  output.writeStructBegin('MoretabRecommendAccount');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 3);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 4);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 5);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NearbyEntry = module.exports.NearbyEntry = function(args) {
  this.emid = null;
  this.distance = null;
  this.lastUpdatedInSec = null;
  this.property = null;
  this.profile = null;
  if (args) {
    if (args.emid !== undefined && args.emid !== null) {
      this.emid = args.emid;
    }
    if (args.distance !== undefined && args.distance !== null) {
      this.distance = args.distance;
    }
    if (args.lastUpdatedInSec !== undefined && args.lastUpdatedInSec !== null) {
      this.lastUpdatedInSec = args.lastUpdatedInSec;
    }
    if (args.property !== undefined && args.property !== null) {
      this.property = Thrift.copyMap(args.property, [null]);
    }
    if (args.profile !== undefined && args.profile !== null) {
      this.profile = new ttypes.Profile(args.profile);
    }
  }
};
NearbyEntry.prototype = {};
NearbyEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.emid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.distance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.lastUpdatedInSec = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size478 = 0;
        var _rtmp3482;
        this.property = {};
        var _ktype479 = 0;
        var _vtype480 = 0;
        _rtmp3482 = input.readMapBegin();
        _ktype479 = _rtmp3482.ktype;
        _vtype480 = _rtmp3482.vtype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var key484 = null;
          var val485 = null;
          key484 = input.readString();
          val485 = input.readString();
          this.property[key484] = val485;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.profile = new ttypes.Profile();
        this.profile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NearbyEntry.prototype.write = function(output) {
  output.writeStructBegin('NearbyEntry');
  if (this.emid !== null && this.emid !== undefined) {
    output.writeFieldBegin('emid', Thrift.Type.STRING, 1);
    output.writeString(this.emid);
    output.writeFieldEnd();
  }
  if (this.distance !== null && this.distance !== undefined) {
    output.writeFieldBegin('distance', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.distance);
    output.writeFieldEnd();
  }
  if (this.lastUpdatedInSec !== null && this.lastUpdatedInSec !== undefined) {
    output.writeFieldBegin('lastUpdatedInSec', Thrift.Type.I32, 3);
    output.writeI32(this.lastUpdatedInSec);
    output.writeFieldEnd();
  }
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.property));
    for (var kiter486 in this.property)
    {
      if (this.property.hasOwnProperty(kiter486))
      {
        var viter487 = this.property[kiter486];
        output.writeString(kiter486);
        output.writeString(viter487);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.profile !== null && this.profile !== undefined) {
    output.writeFieldBegin('profile', Thrift.Type.STRUCT, 5);
    this.profile.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotiCenterEventData = module.exports.NotiCenterEventData = function(args) {
  this.id = null;
  this.to = null;
  this.from_ = null;
  this.toChannel = null;
  this.fromChannel = null;
  this.eventType = null;
  this.createdTime = null;
  this.operationRevision = null;
  this.content = null;
  this.push = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.from_ !== undefined && args.from_ !== null) {
      this.from_ = args.from_;
    }
    if (args.toChannel !== undefined && args.toChannel !== null) {
      this.toChannel = args.toChannel;
    }
    if (args.fromChannel !== undefined && args.fromChannel !== null) {
      this.fromChannel = args.fromChannel;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.operationRevision !== undefined && args.operationRevision !== null) {
      this.operationRevision = args.operationRevision;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyMap(args.content, [null]);
    }
    if (args.push !== undefined && args.push !== null) {
      this.push = Thrift.copyMap(args.push, [null]);
    }
  }
};
NotiCenterEventData.prototype = {};
NotiCenterEventData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.from_ = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.toChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fromChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.eventType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.operationRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size488 = 0;
        var _rtmp3492;
        this.content = {};
        var _ktype489 = 0;
        var _vtype490 = 0;
        _rtmp3492 = input.readMapBegin();
        _ktype489 = _rtmp3492.ktype;
        _vtype490 = _rtmp3492.vtype;
        _size488 = _rtmp3492.size;
        for (var _i493 = 0; _i493 < _size488; ++_i493)
        {
          var key494 = null;
          var val495 = null;
          key494 = input.readString();
          val495 = input.readString();
          this.content[key494] = val495;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size496 = 0;
        var _rtmp3500;
        this.push = {};
        var _ktype497 = 0;
        var _vtype498 = 0;
        _rtmp3500 = input.readMapBegin();
        _ktype497 = _rtmp3500.ktype;
        _vtype498 = _rtmp3500.vtype;
        _size496 = _rtmp3500.size;
        for (var _i501 = 0; _i501 < _size496; ++_i501)
        {
          var key502 = null;
          var val503 = null;
          key502 = input.readString();
          val503 = input.readString();
          this.push[key502] = val503;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotiCenterEventData.prototype.write = function(output) {
  output.writeStructBegin('NotiCenterEventData');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.from_ !== null && this.from_ !== undefined) {
    output.writeFieldBegin('from_', Thrift.Type.STRING, 3);
    output.writeString(this.from_);
    output.writeFieldEnd();
  }
  if (this.toChannel !== null && this.toChannel !== undefined) {
    output.writeFieldBegin('toChannel', Thrift.Type.STRING, 4);
    output.writeString(this.toChannel);
    output.writeFieldEnd();
  }
  if (this.fromChannel !== null && this.fromChannel !== undefined) {
    output.writeFieldBegin('fromChannel', Thrift.Type.STRING, 5);
    output.writeString(this.fromChannel);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.STRING, 6);
    output.writeString(this.eventType);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 7);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.operationRevision !== null && this.operationRevision !== undefined) {
    output.writeFieldBegin('operationRevision', Thrift.Type.I64, 8);
    output.writeI64(this.operationRevision);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.content));
    for (var kiter504 in this.content)
    {
      if (this.content.hasOwnProperty(kiter504))
      {
        var viter505 = this.content[kiter504];
        output.writeString(kiter504);
        output.writeString(viter505);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.push !== null && this.push !== undefined) {
    output.writeFieldBegin('push', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.push));
    for (var kiter506 in this.push)
    {
      if (this.push.hasOwnProperty(kiter506))
      {
        var viter507 = this.push[kiter506];
        output.writeString(kiter506);
        output.writeString(viter507);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotificationFetchResult = module.exports.NotificationFetchResult = function(args) {
  this.fetchMode = null;
  this.itemList = null;
  if (args) {
    if (args.fetchMode !== undefined && args.fetchMode !== null) {
      this.fetchMode = args.fetchMode;
    }
    if (args.itemList !== undefined && args.itemList !== null) {
      this.itemList = Thrift.copyList(args.itemList, [null]);
    }
  }
};
NotificationFetchResult.prototype = {};
NotificationFetchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.fetchMode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size508 = 0;
        var _rtmp3512;
        this.itemList = [];
        var _etype511 = 0;
        _rtmp3512 = input.readListBegin();
        _etype511 = _rtmp3512.etype;
        _size508 = _rtmp3512.size;
        for (var _i513 = 0; _i513 < _size508; ++_i513)
        {
          var elem514 = null;
          elem514 = new ttypes.NotificationItem();
          elem514.read(input);
          this.itemList.push(elem514);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationFetchResult.prototype.write = function(output) {
  output.writeStructBegin('NotificationFetchResult');
  if (this.fetchMode !== null && this.fetchMode !== undefined) {
    output.writeFieldBegin('fetchMode', Thrift.Type.I32, 1);
    output.writeI32(this.fetchMode);
    output.writeFieldEnd();
  }
  if (this.itemList !== null && this.itemList !== undefined) {
    output.writeFieldBegin('itemList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.itemList.length);
    for (var iter515 in this.itemList)
    {
      if (this.itemList.hasOwnProperty(iter515))
      {
        iter515 = this.itemList[iter515];
        iter515.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NotificationItem = module.exports.NotificationItem = function(args) {
  this.id = null;
  this.from_ = null;
  this.to = null;
  this.fromChannel = null;
  this.toChannel = null;
  this.revision = null;
  this.createdTime = null;
  this.content = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.from_ !== undefined && args.from_ !== null) {
      this.from_ = args.from_;
    }
    if (args.to !== undefined && args.to !== null) {
      this.to = args.to;
    }
    if (args.fromChannel !== undefined && args.fromChannel !== null) {
      this.fromChannel = args.fromChannel;
    }
    if (args.toChannel !== undefined && args.toChannel !== null) {
      this.toChannel = args.toChannel;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyMap(args.content, [null]);
    }
  }
};
NotificationItem.prototype = {};
NotificationItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.from_ = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fromChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toChannel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size516 = 0;
        var _rtmp3520;
        this.content = {};
        var _ktype517 = 0;
        var _vtype518 = 0;
        _rtmp3520 = input.readMapBegin();
        _ktype517 = _rtmp3520.ktype;
        _vtype518 = _rtmp3520.vtype;
        _size516 = _rtmp3520.size;
        for (var _i521 = 0; _i521 < _size516; ++_i521)
        {
          var key522 = null;
          var val523 = null;
          key522 = input.readString();
          val523 = input.readString();
          this.content[key522] = val523;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotificationItem.prototype.write = function(output) {
  output.writeStructBegin('NotificationItem');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.from_ !== null && this.from_ !== undefined) {
    output.writeFieldBegin('from_', Thrift.Type.STRING, 2);
    output.writeString(this.from_);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 3);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.fromChannel !== null && this.fromChannel !== undefined) {
    output.writeFieldBegin('fromChannel', Thrift.Type.STRING, 4);
    output.writeString(this.fromChannel);
    output.writeFieldEnd();
  }
  if (this.toChannel !== null && this.toChannel !== undefined) {
    output.writeFieldBegin('toChannel', Thrift.Type.STRING, 5);
    output.writeString(this.toChannel);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 7);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 8);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.content));
    for (var kiter524 in this.content)
    {
      if (this.content.hasOwnProperty(kiter524))
      {
        var viter525 = this.content[kiter524];
        output.writeString(kiter524);
        output.writeString(viter525);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Operation = module.exports.Operation = function(args) {
  this.revision = null;
  this.createdTime = null;
  this.type = null;
  this.reqSeq = null;
  this.checksum = null;
  this.status = null;
  this.param1 = null;
  this.param2 = null;
  this.param3 = null;
  this.message = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.reqSeq !== undefined && args.reqSeq !== null) {
      this.reqSeq = args.reqSeq;
    }
    if (args.checksum !== undefined && args.checksum !== null) {
      this.checksum = args.checksum;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.param1 !== undefined && args.param1 !== null) {
      this.param1 = args.param1;
    }
    if (args.param2 !== undefined && args.param2 !== null) {
      this.param2 = args.param2;
    }
    if (args.param3 !== undefined && args.param3 !== null) {
      this.param3 = args.param3;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
  }
};
Operation.prototype = {};
Operation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.reqSeq = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.checksum = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.param1 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.param2 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.param3 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Operation.prototype.write = function(output) {
  output.writeStructBegin('Operation');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.reqSeq !== null && this.reqSeq !== undefined) {
    output.writeFieldBegin('reqSeq', Thrift.Type.I32, 4);
    output.writeI32(this.reqSeq);
    output.writeFieldEnd();
  }
  if (this.checksum !== null && this.checksum !== undefined) {
    output.writeFieldBegin('checksum', Thrift.Type.STRING, 5);
    output.writeString(this.checksum);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.param1 !== null && this.param1 !== undefined) {
    output.writeFieldBegin('param1', Thrift.Type.STRING, 10);
    output.writeString(this.param1);
    output.writeFieldEnd();
  }
  if (this.param2 !== null && this.param2 !== undefined) {
    output.writeFieldBegin('param2', Thrift.Type.STRING, 11);
    output.writeString(this.param2);
    output.writeFieldEnd();
  }
  if (this.param3 !== null && this.param3 !== undefined) {
    output.writeFieldBegin('param3', Thrift.Type.STRING, 12);
    output.writeString(this.param3);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 20);
    this.message.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OTPResult = module.exports.OTPResult = function(args) {
  this.otpId = null;
  this.otp = null;
  if (args) {
    if (args.otpId !== undefined && args.otpId !== null) {
      this.otpId = args.otpId;
    }
    if (args.otp !== undefined && args.otp !== null) {
      this.otp = args.otp;
    }
  }
};
OTPResult.prototype = {};
OTPResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.otpId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.otp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OTPResult.prototype.write = function(output) {
  output.writeStructBegin('OTPResult');
  if (this.otpId !== null && this.otpId !== undefined) {
    output.writeFieldBegin('otpId', Thrift.Type.STRING, 1);
    output.writeString(this.otpId);
    output.writeFieldEnd();
  }
  if (this.otp !== null && this.otp !== undefined) {
    output.writeFieldBegin('otp', Thrift.Type.STRING, 2);
    output.writeString(this.otp);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallAdCountry = module.exports.PaidCallAdCountry = function(args) {
  this.countryCode = null;
  this.rateDivision = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
  }
};
PaidCallAdCountry.prototype = {};
PaidCallAdCountry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallAdCountry.prototype.write = function(output) {
  output.writeStructBegin('PaidCallAdCountry');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 2);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallAdResult = module.exports.PaidCallAdResult = function(args) {
  this.adRemains = null;
  if (args) {
    if (args.adRemains !== undefined && args.adRemains !== null) {
      this.adRemains = args.adRemains;
    }
  }
};
PaidCallAdResult.prototype = {};
PaidCallAdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.adRemains = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallAdResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallAdResult');
  if (this.adRemains !== null && this.adRemains !== undefined) {
    output.writeFieldBegin('adRemains', Thrift.Type.I32, 1);
    output.writeI32(this.adRemains);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallBalance = module.exports.PaidCallBalance = function(args) {
  this.productType = null;
  this.productName = null;
  this.unit = null;
  this.limitedPaidBalance = null;
  this.limitedFreeBalance = null;
  this.unlimitedPaidBalance = null;
  this.unlimitedFreeBalance = null;
  this.startTime = null;
  this.endTime = null;
  this.autopayEnabled = null;
  if (args) {
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.limitedPaidBalance !== undefined && args.limitedPaidBalance !== null) {
      this.limitedPaidBalance = args.limitedPaidBalance;
    }
    if (args.limitedFreeBalance !== undefined && args.limitedFreeBalance !== null) {
      this.limitedFreeBalance = args.limitedFreeBalance;
    }
    if (args.unlimitedPaidBalance !== undefined && args.unlimitedPaidBalance !== null) {
      this.unlimitedPaidBalance = args.unlimitedPaidBalance;
    }
    if (args.unlimitedFreeBalance !== undefined && args.unlimitedFreeBalance !== null) {
      this.unlimitedFreeBalance = args.unlimitedFreeBalance;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.autopayEnabled !== undefined && args.autopayEnabled !== null) {
      this.autopayEnabled = args.autopayEnabled;
    }
  }
};
PaidCallBalance.prototype = {};
PaidCallBalance.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.limitedPaidBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.limitedFreeBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.unlimitedPaidBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.unlimitedFreeBalance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.autopayEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallBalance.prototype.write = function(output) {
  output.writeStructBegin('PaidCallBalance');
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 1);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 2);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 3);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.limitedPaidBalance !== null && this.limitedPaidBalance !== undefined) {
    output.writeFieldBegin('limitedPaidBalance', Thrift.Type.I32, 4);
    output.writeI32(this.limitedPaidBalance);
    output.writeFieldEnd();
  }
  if (this.limitedFreeBalance !== null && this.limitedFreeBalance !== undefined) {
    output.writeFieldBegin('limitedFreeBalance', Thrift.Type.I32, 5);
    output.writeI32(this.limitedFreeBalance);
    output.writeFieldEnd();
  }
  if (this.unlimitedPaidBalance !== null && this.unlimitedPaidBalance !== undefined) {
    output.writeFieldBegin('unlimitedPaidBalance', Thrift.Type.I32, 6);
    output.writeI32(this.unlimitedPaidBalance);
    output.writeFieldEnd();
  }
  if (this.unlimitedFreeBalance !== null && this.unlimitedFreeBalance !== undefined) {
    output.writeFieldBegin('unlimitedFreeBalance', Thrift.Type.I32, 7);
    output.writeI32(this.unlimitedFreeBalance);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.autopayEnabled !== null && this.autopayEnabled !== undefined) {
    output.writeFieldBegin('autopayEnabled', Thrift.Type.BOOL, 10);
    output.writeBool(this.autopayEnabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallCurrencyExchangeRate = module.exports.PaidCallCurrencyExchangeRate = function(args) {
  this.currencyCode = null;
  this.currencyName = null;
  this.currencySign = null;
  this.preferred = null;
  this.coinRate = null;
  this.creditRate = null;
  if (args) {
    if (args.currencyCode !== undefined && args.currencyCode !== null) {
      this.currencyCode = args.currencyCode;
    }
    if (args.currencyName !== undefined && args.currencyName !== null) {
      this.currencyName = args.currencyName;
    }
    if (args.currencySign !== undefined && args.currencySign !== null) {
      this.currencySign = args.currencySign;
    }
    if (args.preferred !== undefined && args.preferred !== null) {
      this.preferred = args.preferred;
    }
    if (args.coinRate !== undefined && args.coinRate !== null) {
      this.coinRate = args.coinRate;
    }
    if (args.creditRate !== undefined && args.creditRate !== null) {
      this.creditRate = args.creditRate;
    }
  }
};
PaidCallCurrencyExchangeRate.prototype = {};
PaidCallCurrencyExchangeRate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currencyCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.currencyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.currencySign = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.preferred = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.coinRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.creditRate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallCurrencyExchangeRate.prototype.write = function(output) {
  output.writeStructBegin('PaidCallCurrencyExchangeRate');
  if (this.currencyCode !== null && this.currencyCode !== undefined) {
    output.writeFieldBegin('currencyCode', Thrift.Type.STRING, 1);
    output.writeString(this.currencyCode);
    output.writeFieldEnd();
  }
  if (this.currencyName !== null && this.currencyName !== undefined) {
    output.writeFieldBegin('currencyName', Thrift.Type.STRING, 2);
    output.writeString(this.currencyName);
    output.writeFieldEnd();
  }
  if (this.currencySign !== null && this.currencySign !== undefined) {
    output.writeFieldBegin('currencySign', Thrift.Type.STRING, 3);
    output.writeString(this.currencySign);
    output.writeFieldEnd();
  }
  if (this.preferred !== null && this.preferred !== undefined) {
    output.writeFieldBegin('preferred', Thrift.Type.BOOL, 4);
    output.writeBool(this.preferred);
    output.writeFieldEnd();
  }
  if (this.coinRate !== null && this.coinRate !== undefined) {
    output.writeFieldBegin('coinRate', Thrift.Type.STRING, 5);
    output.writeString(this.coinRate);
    output.writeFieldEnd();
  }
  if (this.creditRate !== null && this.creditRate !== undefined) {
    output.writeFieldBegin('creditRate', Thrift.Type.STRING, 6);
    output.writeString(this.creditRate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallDialing = module.exports.PaidCallDialing = function(args) {
  this.type = null;
  this.dialedNumber = null;
  this.serviceDomain = null;
  this.productType = null;
  this.productName = null;
  this.multipleProduct = null;
  this.callerIdStatus = null;
  this.balance = null;
  this.unit = null;
  this.rate = null;
  this.displayCode = null;
  this.calledNumber = null;
  this.calleeNationalNumber = null;
  this.calleeCallingCode = null;
  this.rateDivision = null;
  this.adMaxMin = null;
  this.adRemains = null;
  this.adSessionId = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.serviceDomain !== undefined && args.serviceDomain !== null) {
      this.serviceDomain = args.serviceDomain;
    }
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.productName !== undefined && args.productName !== null) {
      this.productName = args.productName;
    }
    if (args.multipleProduct !== undefined && args.multipleProduct !== null) {
      this.multipleProduct = args.multipleProduct;
    }
    if (args.callerIdStatus !== undefined && args.callerIdStatus !== null) {
      this.callerIdStatus = args.callerIdStatus;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
    if (args.displayCode !== undefined && args.displayCode !== null) {
      this.displayCode = args.displayCode;
    }
    if (args.calledNumber !== undefined && args.calledNumber !== null) {
      this.calledNumber = args.calledNumber;
    }
    if (args.calleeNationalNumber !== undefined && args.calleeNationalNumber !== null) {
      this.calleeNationalNumber = args.calleeNationalNumber;
    }
    if (args.calleeCallingCode !== undefined && args.calleeCallingCode !== null) {
      this.calleeCallingCode = args.calleeCallingCode;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
    if (args.adMaxMin !== undefined && args.adMaxMin !== null) {
      this.adMaxMin = args.adMaxMin;
    }
    if (args.adRemains !== undefined && args.adRemains !== null) {
      this.adRemains = args.adRemains;
    }
    if (args.adSessionId !== undefined && args.adSessionId !== null) {
      this.adSessionId = args.adSessionId;
    }
  }
};
PaidCallDialing.prototype = {};
PaidCallDialing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceDomain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.productName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.multipleProduct = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.callerIdStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.balance = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.rate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.displayCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.calledNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.calleeNationalNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.calleeCallingCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.adMaxMin = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.adRemains = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.adSessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallDialing.prototype.write = function(output) {
  output.writeStructBegin('PaidCallDialing');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 2);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.serviceDomain !== null && this.serviceDomain !== undefined) {
    output.writeFieldBegin('serviceDomain', Thrift.Type.STRING, 3);
    output.writeString(this.serviceDomain);
    output.writeFieldEnd();
  }
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 4);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.productName !== null && this.productName !== undefined) {
    output.writeFieldBegin('productName', Thrift.Type.STRING, 5);
    output.writeString(this.productName);
    output.writeFieldEnd();
  }
  if (this.multipleProduct !== null && this.multipleProduct !== undefined) {
    output.writeFieldBegin('multipleProduct', Thrift.Type.BOOL, 6);
    output.writeBool(this.multipleProduct);
    output.writeFieldEnd();
  }
  if (this.callerIdStatus !== null && this.callerIdStatus !== undefined) {
    output.writeFieldBegin('callerIdStatus', Thrift.Type.I32, 7);
    output.writeI32(this.callerIdStatus);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.I32, 10);
    output.writeI32(this.balance);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 11);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.I32, 12);
    output.writeI32(this.rate);
    output.writeFieldEnd();
  }
  if (this.displayCode !== null && this.displayCode !== undefined) {
    output.writeFieldBegin('displayCode', Thrift.Type.STRING, 13);
    output.writeString(this.displayCode);
    output.writeFieldEnd();
  }
  if (this.calledNumber !== null && this.calledNumber !== undefined) {
    output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 14);
    output.writeString(this.calledNumber);
    output.writeFieldEnd();
  }
  if (this.calleeNationalNumber !== null && this.calleeNationalNumber !== undefined) {
    output.writeFieldBegin('calleeNationalNumber', Thrift.Type.STRING, 15);
    output.writeString(this.calleeNationalNumber);
    output.writeFieldEnd();
  }
  if (this.calleeCallingCode !== null && this.calleeCallingCode !== undefined) {
    output.writeFieldBegin('calleeCallingCode', Thrift.Type.STRING, 16);
    output.writeString(this.calleeCallingCode);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 17);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  if (this.adMaxMin !== null && this.adMaxMin !== undefined) {
    output.writeFieldBegin('adMaxMin', Thrift.Type.I32, 20);
    output.writeI32(this.adMaxMin);
    output.writeFieldEnd();
  }
  if (this.adRemains !== null && this.adRemains !== undefined) {
    output.writeFieldBegin('adRemains', Thrift.Type.I32, 21);
    output.writeI32(this.adRemains);
    output.writeFieldEnd();
  }
  if (this.adSessionId !== null && this.adSessionId !== undefined) {
    output.writeFieldBegin('adSessionId', Thrift.Type.STRING, 22);
    output.writeString(this.adSessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallHistory = module.exports.PaidCallHistory = function(args) {
  this.seq = null;
  this.type = null;
  this.dialedNumber = null;
  this.calledNumber = null;
  this.toMid = null;
  this.toName = null;
  this.setupTime = null;
  this.startTime = null;
  this.endTime = null;
  this.duration = null;
  this.terminate = null;
  this.productType = null;
  this.charge = null;
  this.unit = null;
  this.result = null;
  if (args) {
    if (args.seq !== undefined && args.seq !== null) {
      this.seq = args.seq;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.dialedNumber !== undefined && args.dialedNumber !== null) {
      this.dialedNumber = args.dialedNumber;
    }
    if (args.calledNumber !== undefined && args.calledNumber !== null) {
      this.calledNumber = args.calledNumber;
    }
    if (args.toMid !== undefined && args.toMid !== null) {
      this.toMid = args.toMid;
    }
    if (args.toName !== undefined && args.toName !== null) {
      this.toName = args.toName;
    }
    if (args.setupTime !== undefined && args.setupTime !== null) {
      this.setupTime = args.setupTime;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.terminate !== undefined && args.terminate !== null) {
      this.terminate = args.terminate;
    }
    if (args.productType !== undefined && args.productType !== null) {
      this.productType = args.productType;
    }
    if (args.charge !== undefined && args.charge !== null) {
      this.charge = args.charge;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
  }
};
PaidCallHistory.prototype = {};
PaidCallHistory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.seq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dialedNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.calledNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.toMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.toName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.setupTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.duration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.terminate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.productType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.charge = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallHistory.prototype.write = function(output) {
  output.writeStructBegin('PaidCallHistory');
  if (this.seq !== null && this.seq !== undefined) {
    output.writeFieldBegin('seq', Thrift.Type.I64, 1);
    output.writeI64(this.seq);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.dialedNumber !== null && this.dialedNumber !== undefined) {
    output.writeFieldBegin('dialedNumber', Thrift.Type.STRING, 3);
    output.writeString(this.dialedNumber);
    output.writeFieldEnd();
  }
  if (this.calledNumber !== null && this.calledNumber !== undefined) {
    output.writeFieldBegin('calledNumber', Thrift.Type.STRING, 4);
    output.writeString(this.calledNumber);
    output.writeFieldEnd();
  }
  if (this.toMid !== null && this.toMid !== undefined) {
    output.writeFieldBegin('toMid', Thrift.Type.STRING, 5);
    output.writeString(this.toMid);
    output.writeFieldEnd();
  }
  if (this.toName !== null && this.toName !== undefined) {
    output.writeFieldBegin('toName', Thrift.Type.STRING, 6);
    output.writeString(this.toName);
    output.writeFieldEnd();
  }
  if (this.setupTime !== null && this.setupTime !== undefined) {
    output.writeFieldBegin('setupTime', Thrift.Type.I64, 7);
    output.writeI64(this.setupTime);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 8);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 9);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I64, 10);
    output.writeI64(this.duration);
    output.writeFieldEnd();
  }
  if (this.terminate !== null && this.terminate !== undefined) {
    output.writeFieldBegin('terminate', Thrift.Type.I32, 11);
    output.writeI32(this.terminate);
    output.writeFieldEnd();
  }
  if (this.productType !== null && this.productType !== undefined) {
    output.writeFieldBegin('productType', Thrift.Type.I32, 12);
    output.writeI32(this.productType);
    output.writeFieldEnd();
  }
  if (this.charge !== null && this.charge !== undefined) {
    output.writeFieldBegin('charge', Thrift.Type.I32, 13);
    output.writeI32(this.charge);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 14);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 15);
    output.writeString(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallHistoryResult = module.exports.PaidCallHistoryResult = function(args) {
  this.historys = null;
  this.hasNext = null;
  if (args) {
    if (args.historys !== undefined && args.historys !== null) {
      this.historys = Thrift.copyList(args.historys, [ttypes.PaidCallHistory]);
    }
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
  }
};
PaidCallHistoryResult.prototype = {};
PaidCallHistoryResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size526 = 0;
        var _rtmp3530;
        this.historys = [];
        var _etype529 = 0;
        _rtmp3530 = input.readListBegin();
        _etype529 = _rtmp3530.etype;
        _size526 = _rtmp3530.size;
        for (var _i531 = 0; _i531 < _size526; ++_i531)
        {
          var elem532 = null;
          elem532 = new ttypes.PaidCallHistory();
          elem532.read(input);
          this.historys.push(elem532);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallHistoryResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallHistoryResult');
  if (this.historys !== null && this.historys !== undefined) {
    output.writeFieldBegin('historys', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.historys.length);
    for (var iter533 in this.historys)
    {
      if (this.historys.hasOwnProperty(iter533))
      {
        iter533 = this.historys[iter533];
        iter533.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallMetadataResult = module.exports.PaidCallMetadataResult = function(args) {
  this.currencyExchangeRates = null;
  this.recommendedCountryCodes = null;
  this.adCountries = null;
  if (args) {
    if (args.currencyExchangeRates !== undefined && args.currencyExchangeRates !== null) {
      this.currencyExchangeRates = Thrift.copyList(args.currencyExchangeRates, [ttypes.PaidCallCurrencyExchangeRate]);
    }
    if (args.recommendedCountryCodes !== undefined && args.recommendedCountryCodes !== null) {
      this.recommendedCountryCodes = Thrift.copyList(args.recommendedCountryCodes, [null]);
    }
    if (args.adCountries !== undefined && args.adCountries !== null) {
      this.adCountries = Thrift.copyList(args.adCountries, [ttypes.PaidCallAdCountry]);
    }
  }
};
PaidCallMetadataResult.prototype = {};
PaidCallMetadataResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size534 = 0;
        var _rtmp3538;
        this.currencyExchangeRates = [];
        var _etype537 = 0;
        _rtmp3538 = input.readListBegin();
        _etype537 = _rtmp3538.etype;
        _size534 = _rtmp3538.size;
        for (var _i539 = 0; _i539 < _size534; ++_i539)
        {
          var elem540 = null;
          elem540 = new ttypes.PaidCallCurrencyExchangeRate();
          elem540.read(input);
          this.currencyExchangeRates.push(elem540);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size541 = 0;
        var _rtmp3545;
        this.recommendedCountryCodes = [];
        var _etype544 = 0;
        _rtmp3545 = input.readListBegin();
        _etype544 = _rtmp3545.etype;
        _size541 = _rtmp3545.size;
        for (var _i546 = 0; _i546 < _size541; ++_i546)
        {
          var elem547 = null;
          elem547 = input.readString();
          this.recommendedCountryCodes.push(elem547);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size548 = 0;
        var _rtmp3552;
        this.adCountries = [];
        var _etype551 = 0;
        _rtmp3552 = input.readListBegin();
        _etype551 = _rtmp3552.etype;
        _size548 = _rtmp3552.size;
        for (var _i553 = 0; _i553 < _size548; ++_i553)
        {
          var elem554 = null;
          elem554 = new ttypes.PaidCallAdCountry();
          elem554.read(input);
          this.adCountries.push(elem554);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallMetadataResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallMetadataResult');
  if (this.currencyExchangeRates !== null && this.currencyExchangeRates !== undefined) {
    output.writeFieldBegin('currencyExchangeRates', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.currencyExchangeRates.length);
    for (var iter555 in this.currencyExchangeRates)
    {
      if (this.currencyExchangeRates.hasOwnProperty(iter555))
      {
        iter555 = this.currencyExchangeRates[iter555];
        iter555.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recommendedCountryCodes !== null && this.recommendedCountryCodes !== undefined) {
    output.writeFieldBegin('recommendedCountryCodes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.recommendedCountryCodes.length);
    for (var iter556 in this.recommendedCountryCodes)
    {
      if (this.recommendedCountryCodes.hasOwnProperty(iter556))
      {
        iter556 = this.recommendedCountryCodes[iter556];
        output.writeString(iter556);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.adCountries !== null && this.adCountries !== undefined) {
    output.writeFieldBegin('adCountries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.adCountries.length);
    for (var iter557 in this.adCountries)
    {
      if (this.adCountries.hasOwnProperty(iter557))
      {
        iter557 = this.adCountries[iter557];
        iter557.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallRedeemResult = module.exports.PaidCallRedeemResult = function(args) {
  this.eventName = null;
  this.eventAmount = null;
  if (args) {
    if (args.eventName !== undefined && args.eventName !== null) {
      this.eventName = args.eventName;
    }
    if (args.eventAmount !== undefined && args.eventAmount !== null) {
      this.eventAmount = args.eventAmount;
    }
  }
};
PaidCallRedeemResult.prototype = {};
PaidCallRedeemResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.eventName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventAmount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallRedeemResult.prototype.write = function(output) {
  output.writeStructBegin('PaidCallRedeemResult');
  if (this.eventName !== null && this.eventName !== undefined) {
    output.writeFieldBegin('eventName', Thrift.Type.STRING, 1);
    output.writeString(this.eventName);
    output.writeFieldEnd();
  }
  if (this.eventAmount !== null && this.eventAmount !== undefined) {
    output.writeFieldBegin('eventAmount', Thrift.Type.I32, 2);
    output.writeI32(this.eventAmount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallResponse = module.exports.PaidCallResponse = function(args) {
  this.host = null;
  this.dialing = null;
  this.token = null;
  this.spotItems = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = new ttypes.CallHost(args.host);
    }
    if (args.dialing !== undefined && args.dialing !== null) {
      this.dialing = new ttypes.PaidCallDialing(args.dialing);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.spotItems !== undefined && args.spotItems !== null) {
      this.spotItems = Thrift.copyList(args.spotItems, [null]);
    }
  }
};
PaidCallResponse.prototype = {};
PaidCallResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.host = new ttypes.CallHost();
        this.host.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dialing = new ttypes.PaidCallDialing();
        this.dialing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size558 = 0;
        var _rtmp3562;
        this.spotItems = [];
        var _etype561 = 0;
        _rtmp3562 = input.readListBegin();
        _etype561 = _rtmp3562.etype;
        _size558 = _rtmp3562.size;
        for (var _i563 = 0; _i563 < _size558; ++_i563)
        {
          var elem564 = null;
          elem564 = new ttypes.SpotItem();
          elem564.read(input);
          this.spotItems.push(elem564);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallResponse.prototype.write = function(output) {
  output.writeStructBegin('PaidCallResponse');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRUCT, 1);
    this.host.write(output);
    output.writeFieldEnd();
  }
  if (this.dialing !== null && this.dialing !== undefined) {
    output.writeFieldBegin('dialing', Thrift.Type.STRUCT, 2);
    this.dialing.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.spotItems !== null && this.spotItems !== undefined) {
    output.writeFieldBegin('spotItems', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.spotItems.length);
    for (var iter565 in this.spotItems)
    {
      if (this.spotItems.hasOwnProperty(iter565))
      {
        iter565 = this.spotItems[iter565];
        iter565.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaidCallUserRate = module.exports.PaidCallUserRate = function(args) {
  this.countryCode = null;
  this.rate = null;
  this.rateDivision = null;
  this.rateName = null;
  if (args) {
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
    if (args.rateDivision !== undefined && args.rateDivision !== null) {
      this.rateDivision = args.rateDivision;
    }
    if (args.rateName !== undefined && args.rateName !== null) {
      this.rateName = args.rateName;
    }
  }
};
PaidCallUserRate.prototype = {};
PaidCallUserRate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.rate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.rateDivision = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.rateName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaidCallUserRate.prototype.write = function(output) {
  output.writeStructBegin('PaidCallUserRate');
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 1);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.I32, 2);
    output.writeI32(this.rate);
    output.writeFieldEnd();
  }
  if (this.rateDivision !== null && this.rateDivision !== undefined) {
    output.writeFieldBegin('rateDivision', Thrift.Type.STRING, 3);
    output.writeString(this.rateDivision);
    output.writeFieldEnd();
  }
  if (this.rateName !== null && this.rateName !== undefined) {
    output.writeFieldBegin('rateName', Thrift.Type.STRING, 4);
    output.writeString(this.rateName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentReservation = module.exports.PaymentReservation = function(args) {
  this.receiverMid = null;
  this.productId = null;
  this.language = null;
  this.location = null;
  this.currency = null;
  this.price = null;
  this.appStoreCode = null;
  this.messageText = null;
  this.messageTemplate = null;
  this.packageId = null;
  if (args) {
    if (args.receiverMid !== undefined && args.receiverMid !== null) {
      this.receiverMid = args.receiverMid;
    }
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.appStoreCode !== undefined && args.appStoreCode !== null) {
      this.appStoreCode = args.appStoreCode;
    }
    if (args.messageText !== undefined && args.messageText !== null) {
      this.messageText = args.messageText;
    }
    if (args.messageTemplate !== undefined && args.messageTemplate !== null) {
      this.messageTemplate = args.messageTemplate;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
  }
};
PaymentReservation.prototype = {};
PaymentReservation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.receiverMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.appStoreCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.messageText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.messageTemplate = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentReservation.prototype.write = function(output) {
  output.writeStructBegin('PaymentReservation');
  if (this.receiverMid !== null && this.receiverMid !== undefined) {
    output.writeFieldBegin('receiverMid', Thrift.Type.STRING, 1);
    output.writeString(this.receiverMid);
    output.writeFieldEnd();
  }
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 2);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 3);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 4);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 5);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 6);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.appStoreCode !== null && this.appStoreCode !== undefined) {
    output.writeFieldBegin('appStoreCode', Thrift.Type.I32, 7);
    output.writeI32(this.appStoreCode);
    output.writeFieldEnd();
  }
  if (this.messageText !== null && this.messageText !== undefined) {
    output.writeFieldBegin('messageText', Thrift.Type.STRING, 8);
    output.writeString(this.messageText);
    output.writeFieldEnd();
  }
  if (this.messageTemplate !== null && this.messageTemplate !== undefined) {
    output.writeFieldBegin('messageTemplate', Thrift.Type.I32, 9);
    output.writeI32(this.messageTemplate);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 10);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PaymentReservationResult = module.exports.PaymentReservationResult = function(args) {
  this.orderId = null;
  this.confirmUrl = null;
  this.extras = null;
  if (args) {
    if (args.orderId !== undefined && args.orderId !== null) {
      this.orderId = args.orderId;
    }
    if (args.confirmUrl !== undefined && args.confirmUrl !== null) {
      this.confirmUrl = args.confirmUrl;
    }
    if (args.extras !== undefined && args.extras !== null) {
      this.extras = Thrift.copyMap(args.extras, [null]);
    }
  }
};
PaymentReservationResult.prototype = {};
PaymentReservationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.orderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.confirmUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size566 = 0;
        var _rtmp3570;
        this.extras = {};
        var _ktype567 = 0;
        var _vtype568 = 0;
        _rtmp3570 = input.readMapBegin();
        _ktype567 = _rtmp3570.ktype;
        _vtype568 = _rtmp3570.vtype;
        _size566 = _rtmp3570.size;
        for (var _i571 = 0; _i571 < _size566; ++_i571)
        {
          var key572 = null;
          var val573 = null;
          key572 = input.readString();
          val573 = input.readString();
          this.extras[key572] = val573;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PaymentReservationResult.prototype.write = function(output) {
  output.writeStructBegin('PaymentReservationResult');
  if (this.orderId !== null && this.orderId !== undefined) {
    output.writeFieldBegin('orderId', Thrift.Type.STRING, 1);
    output.writeString(this.orderId);
    output.writeFieldEnd();
  }
  if (this.confirmUrl !== null && this.confirmUrl !== undefined) {
    output.writeFieldBegin('confirmUrl', Thrift.Type.STRING, 2);
    output.writeString(this.confirmUrl);
    output.writeFieldEnd();
  }
  if (this.extras !== null && this.extras !== undefined) {
    output.writeFieldBegin('extras', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extras));
    for (var kiter574 in this.extras)
    {
      if (this.extras.hasOwnProperty(kiter574))
      {
        var viter575 = this.extras[kiter574];
        output.writeString(kiter574);
        output.writeString(viter575);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PhoneInfoForChannel = module.exports.PhoneInfoForChannel = function(args) {
  this.mid = null;
  this.normalizedPhoneNumber = null;
  this.allowedToSearchByPhoneNumber = null;
  this.allowedToReceiveMessageFromNonFriend = null;
  this.region = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.normalizedPhoneNumber !== undefined && args.normalizedPhoneNumber !== null) {
      this.normalizedPhoneNumber = args.normalizedPhoneNumber;
    }
    if (args.allowedToSearchByPhoneNumber !== undefined && args.allowedToSearchByPhoneNumber !== null) {
      this.allowedToSearchByPhoneNumber = args.allowedToSearchByPhoneNumber;
    }
    if (args.allowedToReceiveMessageFromNonFriend !== undefined && args.allowedToReceiveMessageFromNonFriend !== null) {
      this.allowedToReceiveMessageFromNonFriend = args.allowedToReceiveMessageFromNonFriend;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
  }
};
PhoneInfoForChannel.prototype = {};
PhoneInfoForChannel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.normalizedPhoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.allowedToSearchByPhoneNumber = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.allowedToReceiveMessageFromNonFriend = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhoneInfoForChannel.prototype.write = function(output) {
  output.writeStructBegin('PhoneInfoForChannel');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.normalizedPhoneNumber !== null && this.normalizedPhoneNumber !== undefined) {
    output.writeFieldBegin('normalizedPhoneNumber', Thrift.Type.STRING, 2);
    output.writeString(this.normalizedPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.allowedToSearchByPhoneNumber !== null && this.allowedToSearchByPhoneNumber !== undefined) {
    output.writeFieldBegin('allowedToSearchByPhoneNumber', Thrift.Type.BOOL, 3);
    output.writeBool(this.allowedToSearchByPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.allowedToReceiveMessageFromNonFriend !== null && this.allowedToReceiveMessageFromNonFriend !== undefined) {
    output.writeFieldBegin('allowedToReceiveMessageFromNonFriend', Thrift.Type.BOOL, 4);
    output.writeBool(this.allowedToReceiveMessageFromNonFriend);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 5);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PhoneVerificationResult = module.exports.PhoneVerificationResult = function(args) {
  this.verificationResult = null;
  this.accountMigrationCheckType = null;
  this.recommendAddFriends = null;
  if (args) {
    if (args.verificationResult !== undefined && args.verificationResult !== null) {
      this.verificationResult = args.verificationResult;
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
    if (args.recommendAddFriends !== undefined && args.recommendAddFriends !== null) {
      this.recommendAddFriends = args.recommendAddFriends;
    }
  }
};
PhoneVerificationResult.prototype = {};
PhoneVerificationResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.verificationResult = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendAddFriends = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PhoneVerificationResult.prototype.write = function(output) {
  output.writeStructBegin('PhoneVerificationResult');
  if (this.verificationResult !== null && this.verificationResult !== undefined) {
    output.writeFieldBegin('verificationResult', Thrift.Type.I32, 1);
    output.writeI32(this.verificationResult);
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 2);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  if (this.recommendAddFriends !== null && this.recommendAddFriends !== undefined) {
    output.writeFieldBegin('recommendAddFriends', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommendAddFriends);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PlaceSearchInfo = module.exports.PlaceSearchInfo = function(args) {
  this.name = null;
  this.address = null;
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
  }
};
PlaceSearchInfo.prototype = {};
PlaceSearchInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlaceSearchInfo.prototype.write = function(output) {
  output.writeStructBegin('PlaceSearchInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PointException = module.exports.PointException = function(args) {
  Thrift.TException.call(this, "PointException");
  this.name = "PointException";
  this.code = null;
  this.reason = null;
  this.extra = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
Thrift.inherits(PointException, Thrift.TException);
PointException.prototype.name = 'PointException';
PointException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size576 = 0;
        var _rtmp3580;
        this.extra = {};
        var _ktype577 = 0;
        var _vtype578 = 0;
        _rtmp3580 = input.readMapBegin();
        _ktype577 = _rtmp3580.ktype;
        _vtype578 = _rtmp3580.vtype;
        _size576 = _rtmp3580.size;
        for (var _i581 = 0; _i581 < _size576; ++_i581)
        {
          var key582 = null;
          var val583 = null;
          key582 = input.readString();
          val583 = input.readString();
          this.extra[key582] = val583;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PointException.prototype.write = function(output) {
  output.writeStructBegin('PointException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter584 in this.extra)
    {
      if (this.extra.hasOwnProperty(kiter584))
      {
        var viter585 = this.extra[kiter584];
        output.writeString(kiter584);
        output.writeString(viter585);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PrivateBotMessage = module.exports.PrivateBotMessage = function(args) {
  this.message = null;
  this.linkFrom = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.Message(args.message);
    }
    if (args.linkFrom !== undefined && args.linkFrom !== null) {
      this.linkFrom = args.linkFrom;
    }
  }
};
PrivateBotMessage.prototype = {};
PrivateBotMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.Message();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.linkFrom = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PrivateBotMessage.prototype.write = function(output) {
  output.writeStructBegin('PrivateBotMessage');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 1);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.linkFrom !== null && this.linkFrom !== undefined) {
    output.writeFieldBegin('linkFrom', Thrift.Type.STRING, 2);
    output.writeString(this.linkFrom);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Product = module.exports.Product = function(args) {
  this.productId = null;
  this.packageId = null;
  this.version = null;
  this.authorName = null;
  this.onSale = null;
  this.validDays = null;
  this.saleType = null;
  this.copyright = null;
  this.title = null;
  this.descriptionText = null;
  this.shopOrderId = null;
  this.fromMid = null;
  this.toMid = null;
  this.validUntil = null;
  this.priceTier = null;
  this.price = null;
  this.currency = null;
  this.currencySymbol = null;
  this.paymentType = null;
  this.createDate = null;
  this.ownFlag = null;
  this.eventType = null;
  this.urlSchema = null;
  this.downloadUrl = null;
  this.buddyMid = null;
  this.publishSince = null;
  this.newFlag = null;
  this.missionFlag = null;
  this.categories = null;
  this.missionButtonText = null;
  this.missionShortDescription = null;
  this.authorId = null;
  this.grantedByDefault = null;
  this.displayOrder = null;
  this.availableForPresent = null;
  this.availableForMyself = null;
  this.hasAnimation = null;
  this.hasSound = null;
  this.recommendationsEnabled = null;
  this.stickerResourceType = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.authorName !== undefined && args.authorName !== null) {
      this.authorName = args.authorName;
    }
    if (args.onSale !== undefined && args.onSale !== null) {
      this.onSale = args.onSale;
    }
    if (args.validDays !== undefined && args.validDays !== null) {
      this.validDays = args.validDays;
    }
    if (args.saleType !== undefined && args.saleType !== null) {
      this.saleType = args.saleType;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.descriptionText !== undefined && args.descriptionText !== null) {
      this.descriptionText = args.descriptionText;
    }
    if (args.shopOrderId !== undefined && args.shopOrderId !== null) {
      this.shopOrderId = args.shopOrderId;
    }
    if (args.fromMid !== undefined && args.fromMid !== null) {
      this.fromMid = args.fromMid;
    }
    if (args.toMid !== undefined && args.toMid !== null) {
      this.toMid = args.toMid;
    }
    if (args.validUntil !== undefined && args.validUntil !== null) {
      this.validUntil = args.validUntil;
    }
    if (args.priceTier !== undefined && args.priceTier !== null) {
      this.priceTier = args.priceTier;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.currencySymbol !== undefined && args.currencySymbol !== null) {
      this.currencySymbol = args.currencySymbol;
    }
    if (args.paymentType !== undefined && args.paymentType !== null) {
      this.paymentType = args.paymentType;
    }
    if (args.createDate !== undefined && args.createDate !== null) {
      this.createDate = args.createDate;
    }
    if (args.ownFlag !== undefined && args.ownFlag !== null) {
      this.ownFlag = args.ownFlag;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.urlSchema !== undefined && args.urlSchema !== null) {
      this.urlSchema = args.urlSchema;
    }
    if (args.downloadUrl !== undefined && args.downloadUrl !== null) {
      this.downloadUrl = args.downloadUrl;
    }
    if (args.buddyMid !== undefined && args.buddyMid !== null) {
      this.buddyMid = args.buddyMid;
    }
    if (args.publishSince !== undefined && args.publishSince !== null) {
      this.publishSince = args.publishSince;
    }
    if (args.newFlag !== undefined && args.newFlag !== null) {
      this.newFlag = args.newFlag;
    }
    if (args.missionFlag !== undefined && args.missionFlag !== null) {
      this.missionFlag = args.missionFlag;
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = Thrift.copyList(args.categories, [null]);
    }
    if (args.missionButtonText !== undefined && args.missionButtonText !== null) {
      this.missionButtonText = args.missionButtonText;
    }
    if (args.missionShortDescription !== undefined && args.missionShortDescription !== null) {
      this.missionShortDescription = args.missionShortDescription;
    }
    if (args.authorId !== undefined && args.authorId !== null) {
      this.authorId = args.authorId;
    }
    if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
      this.grantedByDefault = args.grantedByDefault;
    }
    if (args.displayOrder !== undefined && args.displayOrder !== null) {
      this.displayOrder = args.displayOrder;
    }
    if (args.availableForPresent !== undefined && args.availableForPresent !== null) {
      this.availableForPresent = args.availableForPresent;
    }
    if (args.availableForMyself !== undefined && args.availableForMyself !== null) {
      this.availableForMyself = args.availableForMyself;
    }
    if (args.hasAnimation !== undefined && args.hasAnimation !== null) {
      this.hasAnimation = args.hasAnimation;
    }
    if (args.hasSound !== undefined && args.hasSound !== null) {
      this.hasSound = args.hasSound;
    }
    if (args.recommendationsEnabled !== undefined && args.recommendationsEnabled !== null) {
      this.recommendationsEnabled = args.recommendationsEnabled;
    }
    if (args.stickerResourceType !== undefined && args.stickerResourceType !== null) {
      this.stickerResourceType = args.stickerResourceType;
    }
  }
};
Product.prototype = {};
Product.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.authorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.onSale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.validDays = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.saleType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.descriptionText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.shopOrderId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.fromMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.toMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.validUntil = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.priceTier = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.currency = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.currencySymbol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.paymentType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.createDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.ownFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.urlSchema = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.downloadUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.buddyMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I64) {
        this.publishSince = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.newFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.BOOL) {
        this.missionFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.LIST) {
        var _size586 = 0;
        var _rtmp3590;
        this.categories = [];
        var _etype589 = 0;
        _rtmp3590 = input.readListBegin();
        _etype589 = _rtmp3590.etype;
        _size586 = _rtmp3590.size;
        for (var _i591 = 0; _i591 < _size586; ++_i591)
        {
          var elem592 = null;
          elem592 = new ttypes.ProductCategory();
          elem592.read(input);
          this.categories.push(elem592);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.missionButtonText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.missionShortDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.authorId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.BOOL) {
        this.grantedByDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I32) {
        this.displayOrder = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.BOOL) {
        this.availableForPresent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.BOOL) {
        this.availableForMyself = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.BOOL) {
        this.hasAnimation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.BOOL) {
        this.hasSound = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendationsEnabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.I32) {
        this.stickerResourceType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Product.prototype.write = function(output) {
  output.writeStructBegin('Product');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.authorName !== null && this.authorName !== undefined) {
    output.writeFieldBegin('authorName', Thrift.Type.STRING, 4);
    output.writeString(this.authorName);
    output.writeFieldEnd();
  }
  if (this.onSale !== null && this.onSale !== undefined) {
    output.writeFieldBegin('onSale', Thrift.Type.BOOL, 5);
    output.writeBool(this.onSale);
    output.writeFieldEnd();
  }
  if (this.validDays !== null && this.validDays !== undefined) {
    output.writeFieldBegin('validDays', Thrift.Type.I32, 6);
    output.writeI32(this.validDays);
    output.writeFieldEnd();
  }
  if (this.saleType !== null && this.saleType !== undefined) {
    output.writeFieldBegin('saleType', Thrift.Type.I32, 7);
    output.writeI32(this.saleType);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 8);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 9);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.descriptionText !== null && this.descriptionText !== undefined) {
    output.writeFieldBegin('descriptionText', Thrift.Type.STRING, 10);
    output.writeString(this.descriptionText);
    output.writeFieldEnd();
  }
  if (this.shopOrderId !== null && this.shopOrderId !== undefined) {
    output.writeFieldBegin('shopOrderId', Thrift.Type.I64, 11);
    output.writeI64(this.shopOrderId);
    output.writeFieldEnd();
  }
  if (this.fromMid !== null && this.fromMid !== undefined) {
    output.writeFieldBegin('fromMid', Thrift.Type.STRING, 12);
    output.writeString(this.fromMid);
    output.writeFieldEnd();
  }
  if (this.toMid !== null && this.toMid !== undefined) {
    output.writeFieldBegin('toMid', Thrift.Type.STRING, 13);
    output.writeString(this.toMid);
    output.writeFieldEnd();
  }
  if (this.validUntil !== null && this.validUntil !== undefined) {
    output.writeFieldBegin('validUntil', Thrift.Type.I64, 14);
    output.writeI64(this.validUntil);
    output.writeFieldEnd();
  }
  if (this.priceTier !== null && this.priceTier !== undefined) {
    output.writeFieldBegin('priceTier', Thrift.Type.I32, 15);
    output.writeI32(this.priceTier);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 16);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.STRING, 17);
    output.writeString(this.currency);
    output.writeFieldEnd();
  }
  if (this.currencySymbol !== null && this.currencySymbol !== undefined) {
    output.writeFieldBegin('currencySymbol', Thrift.Type.STRING, 18);
    output.writeString(this.currencySymbol);
    output.writeFieldEnd();
  }
  if (this.paymentType !== null && this.paymentType !== undefined) {
    output.writeFieldBegin('paymentType', Thrift.Type.I32, 19);
    output.writeI32(this.paymentType);
    output.writeFieldEnd();
  }
  if (this.createDate !== null && this.createDate !== undefined) {
    output.writeFieldBegin('createDate', Thrift.Type.I64, 20);
    output.writeI64(this.createDate);
    output.writeFieldEnd();
  }
  if (this.ownFlag !== null && this.ownFlag !== undefined) {
    output.writeFieldBegin('ownFlag', Thrift.Type.BOOL, 21);
    output.writeBool(this.ownFlag);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 22);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.urlSchema !== null && this.urlSchema !== undefined) {
    output.writeFieldBegin('urlSchema', Thrift.Type.STRING, 23);
    output.writeString(this.urlSchema);
    output.writeFieldEnd();
  }
  if (this.downloadUrl !== null && this.downloadUrl !== undefined) {
    output.writeFieldBegin('downloadUrl', Thrift.Type.STRING, 24);
    output.writeString(this.downloadUrl);
    output.writeFieldEnd();
  }
  if (this.buddyMid !== null && this.buddyMid !== undefined) {
    output.writeFieldBegin('buddyMid', Thrift.Type.STRING, 25);
    output.writeString(this.buddyMid);
    output.writeFieldEnd();
  }
  if (this.publishSince !== null && this.publishSince !== undefined) {
    output.writeFieldBegin('publishSince', Thrift.Type.I64, 26);
    output.writeI64(this.publishSince);
    output.writeFieldEnd();
  }
  if (this.newFlag !== null && this.newFlag !== undefined) {
    output.writeFieldBegin('newFlag', Thrift.Type.BOOL, 27);
    output.writeBool(this.newFlag);
    output.writeFieldEnd();
  }
  if (this.missionFlag !== null && this.missionFlag !== undefined) {
    output.writeFieldBegin('missionFlag', Thrift.Type.BOOL, 28);
    output.writeBool(this.missionFlag);
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.LIST, 29);
    output.writeListBegin(Thrift.Type.STRUCT, this.categories.length);
    for (var iter593 in this.categories)
    {
      if (this.categories.hasOwnProperty(iter593))
      {
        iter593 = this.categories[iter593];
        iter593.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.missionButtonText !== null && this.missionButtonText !== undefined) {
    output.writeFieldBegin('missionButtonText', Thrift.Type.STRING, 30);
    output.writeString(this.missionButtonText);
    output.writeFieldEnd();
  }
  if (this.missionShortDescription !== null && this.missionShortDescription !== undefined) {
    output.writeFieldBegin('missionShortDescription', Thrift.Type.STRING, 31);
    output.writeString(this.missionShortDescription);
    output.writeFieldEnd();
  }
  if (this.authorId !== null && this.authorId !== undefined) {
    output.writeFieldBegin('authorId', Thrift.Type.STRING, 32);
    output.writeString(this.authorId);
    output.writeFieldEnd();
  }
  if (this.grantedByDefault !== null && this.grantedByDefault !== undefined) {
    output.writeFieldBegin('grantedByDefault', Thrift.Type.BOOL, 41);
    output.writeBool(this.grantedByDefault);
    output.writeFieldEnd();
  }
  if (this.displayOrder !== null && this.displayOrder !== undefined) {
    output.writeFieldBegin('displayOrder', Thrift.Type.I32, 42);
    output.writeI32(this.displayOrder);
    output.writeFieldEnd();
  }
  if (this.availableForPresent !== null && this.availableForPresent !== undefined) {
    output.writeFieldBegin('availableForPresent', Thrift.Type.BOOL, 43);
    output.writeBool(this.availableForPresent);
    output.writeFieldEnd();
  }
  if (this.availableForMyself !== null && this.availableForMyself !== undefined) {
    output.writeFieldBegin('availableForMyself', Thrift.Type.BOOL, 44);
    output.writeBool(this.availableForMyself);
    output.writeFieldEnd();
  }
  if (this.hasAnimation !== null && this.hasAnimation !== undefined) {
    output.writeFieldBegin('hasAnimation', Thrift.Type.BOOL, 51);
    output.writeBool(this.hasAnimation);
    output.writeFieldEnd();
  }
  if (this.hasSound !== null && this.hasSound !== undefined) {
    output.writeFieldBegin('hasSound', Thrift.Type.BOOL, 52);
    output.writeBool(this.hasSound);
    output.writeFieldEnd();
  }
  if (this.recommendationsEnabled !== null && this.recommendationsEnabled !== undefined) {
    output.writeFieldBegin('recommendationsEnabled', Thrift.Type.BOOL, 53);
    output.writeBool(this.recommendationsEnabled);
    output.writeFieldEnd();
  }
  if (this.stickerResourceType !== null && this.stickerResourceType !== undefined) {
    output.writeFieldBegin('stickerResourceType', Thrift.Type.I32, 54);
    output.writeI32(this.stickerResourceType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProductCategory = module.exports.ProductCategory = function(args) {
  this.productCategoryId = null;
  this.title = null;
  this.productCount = null;
  this.newFlag = null;
  if (args) {
    if (args.productCategoryId !== undefined && args.productCategoryId !== null) {
      this.productCategoryId = args.productCategoryId;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.productCount !== undefined && args.productCount !== null) {
      this.productCount = args.productCount;
    }
    if (args.newFlag !== undefined && args.newFlag !== null) {
      this.newFlag = args.newFlag;
    }
  }
};
ProductCategory.prototype = {};
ProductCategory.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.productCategoryId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.productCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.newFlag = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductCategory.prototype.write = function(output) {
  output.writeStructBegin('ProductCategory');
  if (this.productCategoryId !== null && this.productCategoryId !== undefined) {
    output.writeFieldBegin('productCategoryId', Thrift.Type.I64, 1);
    output.writeI64(this.productCategoryId);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.productCount !== null && this.productCount !== undefined) {
    output.writeFieldBegin('productCount', Thrift.Type.I32, 3);
    output.writeI32(this.productCount);
    output.writeFieldEnd();
  }
  if (this.newFlag !== null && this.newFlag !== undefined) {
    output.writeFieldBegin('newFlag', Thrift.Type.BOOL, 4);
    output.writeBool(this.newFlag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProductList = module.exports.ProductList = function(args) {
  this.hasNext = null;
  this.bannerSequence = null;
  this.bannerTargetType = null;
  this.bannerTargetPath = null;
  this.productList = null;
  this.bannerLang = null;
  if (args) {
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
    if (args.bannerSequence !== undefined && args.bannerSequence !== null) {
      this.bannerSequence = args.bannerSequence;
    }
    if (args.bannerTargetType !== undefined && args.bannerTargetType !== null) {
      this.bannerTargetType = args.bannerTargetType;
    }
    if (args.bannerTargetPath !== undefined && args.bannerTargetPath !== null) {
      this.bannerTargetPath = args.bannerTargetPath;
    }
    if (args.productList !== undefined && args.productList !== null) {
      this.productList = Thrift.copyList(args.productList, [ttypes.Product]);
    }
    if (args.bannerLang !== undefined && args.bannerLang !== null) {
      this.bannerLang = args.bannerLang;
    }
  }
};
ProductList.prototype = {};
ProductList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.bannerSequence = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.bannerTargetType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.bannerTargetPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size594 = 0;
        var _rtmp3598;
        this.productList = [];
        var _etype597 = 0;
        _rtmp3598 = input.readListBegin();
        _etype597 = _rtmp3598.etype;
        _size594 = _rtmp3598.size;
        for (var _i599 = 0; _i599 < _size594; ++_i599)
        {
          var elem600 = null;
          elem600 = new ttypes.Product();
          elem600.read(input);
          this.productList.push(elem600);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.bannerLang = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductList.prototype.write = function(output) {
  output.writeStructBegin('ProductList');
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  if (this.bannerSequence !== null && this.bannerSequence !== undefined) {
    output.writeFieldBegin('bannerSequence', Thrift.Type.I64, 4);
    output.writeI64(this.bannerSequence);
    output.writeFieldEnd();
  }
  if (this.bannerTargetType !== null && this.bannerTargetType !== undefined) {
    output.writeFieldBegin('bannerTargetType', Thrift.Type.I32, 5);
    output.writeI32(this.bannerTargetType);
    output.writeFieldEnd();
  }
  if (this.bannerTargetPath !== null && this.bannerTargetPath !== undefined) {
    output.writeFieldBegin('bannerTargetPath', Thrift.Type.STRING, 6);
    output.writeString(this.bannerTargetPath);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter601 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter601))
      {
        iter601 = this.productList[iter601];
        iter601.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bannerLang !== null && this.bannerLang !== undefined) {
    output.writeFieldBegin('bannerLang', Thrift.Type.STRING, 8);
    output.writeString(this.bannerLang);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProductSimple = module.exports.ProductSimple = function(args) {
  this.productId = null;
  this.packageId = null;
  this.version = null;
  this.onSale = null;
  this.validUntil = null;
  this.stickerIdRanges = null;
  this.grantedByDefault = null;
  this.displayOrder = null;
  if (args) {
    if (args.productId !== undefined && args.productId !== null) {
      this.productId = args.productId;
    }
    if (args.packageId !== undefined && args.packageId !== null) {
      this.packageId = args.packageId;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.onSale !== undefined && args.onSale !== null) {
      this.onSale = args.onSale;
    }
    if (args.validUntil !== undefined && args.validUntil !== null) {
      this.validUntil = args.validUntil;
    }
    if (args.stickerIdRanges !== undefined && args.stickerIdRanges !== null) {
      this.stickerIdRanges = Thrift.copyList(args.stickerIdRanges, [null]);
    }
    if (args.grantedByDefault !== undefined && args.grantedByDefault !== null) {
      this.grantedByDefault = args.grantedByDefault;
    }
    if (args.displayOrder !== undefined && args.displayOrder !== null) {
      this.displayOrder = args.displayOrder;
    }
  }
};
ProductSimple.prototype = {};
ProductSimple.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.productId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.packageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.onSale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.validUntil = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size602 = 0;
        var _rtmp3606;
        this.stickerIdRanges = [];
        var _etype605 = 0;
        _rtmp3606 = input.readListBegin();
        _etype605 = _rtmp3606.etype;
        _size602 = _rtmp3606.size;
        for (var _i607 = 0; _i607 < _size602; ++_i607)
        {
          var elem608 = null;
          elem608 = new ttypes.StickerIdRange();
          elem608.read(input);
          this.stickerIdRanges.push(elem608);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.BOOL) {
        this.grantedByDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.I32) {
        this.displayOrder = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSimple.prototype.write = function(output) {
  output.writeStructBegin('ProductSimple');
  if (this.productId !== null && this.productId !== undefined) {
    output.writeFieldBegin('productId', Thrift.Type.STRING, 1);
    output.writeString(this.productId);
    output.writeFieldEnd();
  }
  if (this.packageId !== null && this.packageId !== undefined) {
    output.writeFieldBegin('packageId', Thrift.Type.I64, 2);
    output.writeI64(this.packageId);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.onSale !== null && this.onSale !== undefined) {
    output.writeFieldBegin('onSale', Thrift.Type.BOOL, 4);
    output.writeBool(this.onSale);
    output.writeFieldEnd();
  }
  if (this.validUntil !== null && this.validUntil !== undefined) {
    output.writeFieldBegin('validUntil', Thrift.Type.I64, 5);
    output.writeI64(this.validUntil);
    output.writeFieldEnd();
  }
  if (this.stickerIdRanges !== null && this.stickerIdRanges !== undefined) {
    output.writeFieldBegin('stickerIdRanges', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.stickerIdRanges.length);
    for (var iter609 in this.stickerIdRanges)
    {
      if (this.stickerIdRanges.hasOwnProperty(iter609))
      {
        iter609 = this.stickerIdRanges[iter609];
        iter609.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.grantedByDefault !== null && this.grantedByDefault !== undefined) {
    output.writeFieldBegin('grantedByDefault', Thrift.Type.BOOL, 41);
    output.writeBool(this.grantedByDefault);
    output.writeFieldEnd();
  }
  if (this.displayOrder !== null && this.displayOrder !== undefined) {
    output.writeFieldBegin('displayOrder', Thrift.Type.I32, 42);
    output.writeI32(this.displayOrder);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProductSimpleList = module.exports.ProductSimpleList = function(args) {
  this.hasNext = null;
  this.reinvokeHour = null;
  this.lastVersionSeq = null;
  this.productList = null;
  this.recentNewReleaseDate = null;
  this.recentEventReleaseDate = null;
  if (args) {
    if (args.hasNext !== undefined && args.hasNext !== null) {
      this.hasNext = args.hasNext;
    }
    if (args.reinvokeHour !== undefined && args.reinvokeHour !== null) {
      this.reinvokeHour = args.reinvokeHour;
    }
    if (args.lastVersionSeq !== undefined && args.lastVersionSeq !== null) {
      this.lastVersionSeq = args.lastVersionSeq;
    }
    if (args.productList !== undefined && args.productList !== null) {
      this.productList = Thrift.copyList(args.productList, [ttypes.ProductSimple]);
    }
    if (args.recentNewReleaseDate !== undefined && args.recentNewReleaseDate !== null) {
      this.recentNewReleaseDate = args.recentNewReleaseDate;
    }
    if (args.recentEventReleaseDate !== undefined && args.recentEventReleaseDate !== null) {
      this.recentEventReleaseDate = args.recentEventReleaseDate;
    }
  }
};
ProductSimpleList.prototype = {};
ProductSimpleList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasNext = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.reinvokeHour = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.lastVersionSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size610 = 0;
        var _rtmp3614;
        this.productList = [];
        var _etype613 = 0;
        _rtmp3614 = input.readListBegin();
        _etype613 = _rtmp3614.etype;
        _size610 = _rtmp3614.size;
        for (var _i615 = 0; _i615 < _size610; ++_i615)
        {
          var elem616 = null;
          elem616 = new ttypes.ProductSimple();
          elem616.read(input);
          this.productList.push(elem616);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.recentNewReleaseDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.recentEventReleaseDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProductSimpleList.prototype.write = function(output) {
  output.writeStructBegin('ProductSimpleList');
  if (this.hasNext !== null && this.hasNext !== undefined) {
    output.writeFieldBegin('hasNext', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasNext);
    output.writeFieldEnd();
  }
  if (this.reinvokeHour !== null && this.reinvokeHour !== undefined) {
    output.writeFieldBegin('reinvokeHour', Thrift.Type.I32, 2);
    output.writeI32(this.reinvokeHour);
    output.writeFieldEnd();
  }
  if (this.lastVersionSeq !== null && this.lastVersionSeq !== undefined) {
    output.writeFieldBegin('lastVersionSeq', Thrift.Type.I64, 3);
    output.writeI64(this.lastVersionSeq);
    output.writeFieldEnd();
  }
  if (this.productList !== null && this.productList !== undefined) {
    output.writeFieldBegin('productList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.productList.length);
    for (var iter617 in this.productList)
    {
      if (this.productList.hasOwnProperty(iter617))
      {
        iter617 = this.productList[iter617];
        iter617.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.recentNewReleaseDate !== null && this.recentNewReleaseDate !== undefined) {
    output.writeFieldBegin('recentNewReleaseDate', Thrift.Type.I64, 5);
    output.writeI64(this.recentNewReleaseDate);
    output.writeFieldEnd();
  }
  if (this.recentEventReleaseDate !== null && this.recentEventReleaseDate !== undefined) {
    output.writeFieldBegin('recentEventReleaseDate', Thrift.Type.I64, 6);
    output.writeI64(this.recentEventReleaseDate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Profile = module.exports.Profile = function(args) {
  this.mid = null;
  this.userid = null;
  this.phone = null;
  this.email = null;
  this.regionCode = null;
  this.displayName = null;
  this.phoneticName = null;
  this.pictureStatus = null;
  this.thumbnailUrl = null;
  this.statusMessage = null;
  this.allowSearchByUserid = null;
  this.allowSearchByEmail = null;
  this.picturePath = null;
  this.musicProfile = null;
  this.videoProfile = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.phoneticName !== undefined && args.phoneticName !== null) {
      this.phoneticName = args.phoneticName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.allowSearchByUserid !== undefined && args.allowSearchByUserid !== null) {
      this.allowSearchByUserid = args.allowSearchByUserid;
    }
    if (args.allowSearchByEmail !== undefined && args.allowSearchByEmail !== null) {
      this.allowSearchByEmail = args.allowSearchByEmail;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.musicProfile !== undefined && args.musicProfile !== null) {
      this.musicProfile = args.musicProfile;
    }
    if (args.videoProfile !== undefined && args.videoProfile !== null) {
      this.videoProfile = args.videoProfile;
    }
  }
};
Profile.prototype = {};
Profile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.phoneticName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByUserid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.BOOL) {
        this.allowSearchByEmail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.musicProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.videoProfile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Profile.prototype.write = function(output) {
  output.writeStructBegin('Profile');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 3);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 11);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 12);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 20);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.phoneticName !== null && this.phoneticName !== undefined) {
    output.writeFieldBegin('phoneticName', Thrift.Type.STRING, 21);
    output.writeString(this.phoneticName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 22);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 23);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 24);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.allowSearchByUserid !== null && this.allowSearchByUserid !== undefined) {
    output.writeFieldBegin('allowSearchByUserid', Thrift.Type.BOOL, 31);
    output.writeBool(this.allowSearchByUserid);
    output.writeFieldEnd();
  }
  if (this.allowSearchByEmail !== null && this.allowSearchByEmail !== undefined) {
    output.writeFieldBegin('allowSearchByEmail', Thrift.Type.BOOL, 32);
    output.writeBool(this.allowSearchByEmail);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 33);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.musicProfile !== null && this.musicProfile !== undefined) {
    output.writeFieldBegin('musicProfile', Thrift.Type.STRING, 34);
    output.writeString(this.musicProfile);
    output.writeFieldEnd();
  }
  if (this.videoProfile !== null && this.videoProfile !== undefined) {
    output.writeFieldBegin('videoProfile', Thrift.Type.STRING, 35);
    output.writeString(this.videoProfile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProximityMatchCandidateEntry = module.exports.ProximityMatchCandidateEntry = function(args) {
  this.contact = null;
  this.buddyDetail = null;
  if (args) {
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
    if (args.buddyDetail !== undefined && args.buddyDetail !== null) {
      this.buddyDetail = new ttypes.BuddyDetail(args.buddyDetail);
    }
  }
};
ProximityMatchCandidateEntry.prototype = {};
ProximityMatchCandidateEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.buddyDetail = new ttypes.BuddyDetail();
        this.buddyDetail.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProximityMatchCandidateEntry.prototype.write = function(output) {
  output.writeStructBegin('ProximityMatchCandidateEntry');
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.buddyDetail !== null && this.buddyDetail !== undefined) {
    output.writeFieldBegin('buddyDetail', Thrift.Type.STRUCT, 11);
    this.buddyDetail.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProximityMatchCandidateResult = module.exports.ProximityMatchCandidateResult = function(args) {
  this.users = null;
  this.buddies = null;
  this.endOfResult = null;
  if (args) {
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.ProximityMatchCandidateEntry]);
    }
    if (args.buddies !== undefined && args.buddies !== null) {
      this.buddies = Thrift.copyList(args.buddies, [ttypes.ProximityMatchCandidateEntry]);
    }
    if (args.endOfResult !== undefined && args.endOfResult !== null) {
      this.endOfResult = args.endOfResult;
    }
  }
};
ProximityMatchCandidateResult.prototype = {};
ProximityMatchCandidateResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size618 = 0;
        var _rtmp3622;
        this.users = [];
        var _etype621 = 0;
        _rtmp3622 = input.readListBegin();
        _etype621 = _rtmp3622.etype;
        _size618 = _rtmp3622.size;
        for (var _i623 = 0; _i623 < _size618; ++_i623)
        {
          var elem624 = null;
          elem624 = new ttypes.ProximityMatchCandidateEntry();
          elem624.read(input);
          this.users.push(elem624);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size625 = 0;
        var _rtmp3629;
        this.buddies = [];
        var _etype628 = 0;
        _rtmp3629 = input.readListBegin();
        _etype628 = _rtmp3629.etype;
        _size625 = _rtmp3629.size;
        for (var _i630 = 0; _i630 < _size625; ++_i630)
        {
          var elem631 = null;
          elem631 = new ttypes.ProximityMatchCandidateEntry();
          elem631.read(input);
          this.buddies.push(elem631);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 91:
      if (ftype == Thrift.Type.BOOL) {
        this.endOfResult = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProximityMatchCandidateResult.prototype.write = function(output) {
  output.writeStructBegin('ProximityMatchCandidateResult');
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter632 in this.users)
    {
      if (this.users.hasOwnProperty(iter632))
      {
        iter632 = this.users[iter632];
        iter632.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.buddies !== null && this.buddies !== undefined) {
    output.writeFieldBegin('buddies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.buddies.length);
    for (var iter633 in this.buddies)
    {
      if (this.buddies.hasOwnProperty(iter633))
      {
        iter633 = this.buddies[iter633];
        iter633.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.endOfResult !== null && this.endOfResult !== undefined) {
    output.writeFieldBegin('endOfResult', Thrift.Type.BOOL, 91);
    output.writeBool(this.endOfResult);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicKey = module.exports.PublicKey = function(args) {
  this.keyAlgorithm = null;
  this.keySize = null;
  this.keyData = null;
  this.createdTime = null;
  if (args) {
    if (args.keyAlgorithm !== undefined && args.keyAlgorithm !== null) {
      this.keyAlgorithm = args.keyAlgorithm;
    }
    if (args.keySize !== undefined && args.keySize !== null) {
      this.keySize = args.keySize;
    }
    if (args.keyData !== undefined && args.keyData !== null) {
      this.keyData = args.keyData;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
  }
};
PublicKey.prototype = {};
PublicKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.keyAlgorithm = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.keySize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.keyData = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicKey.prototype.write = function(output) {
  output.writeStructBegin('PublicKey');
  if (this.keyAlgorithm !== null && this.keyAlgorithm !== undefined) {
    output.writeFieldBegin('keyAlgorithm', Thrift.Type.I32, 1);
    output.writeI32(this.keyAlgorithm);
    output.writeFieldEnd();
  }
  if (this.keySize !== null && this.keySize !== undefined) {
    output.writeFieldBegin('keySize', Thrift.Type.I32, 2);
    output.writeI32(this.keySize);
    output.writeFieldEnd();
  }
  if (this.keyData !== null && this.keyData !== undefined) {
    output.writeFieldBegin('keyData', Thrift.Type.STRING, 3);
    output.writeBinary(this.keyData);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 4);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicKeychain = module.exports.PublicKeychain = function(args) {
  this.publicKeys = null;
  if (args) {
    if (args.publicKeys !== undefined && args.publicKeys !== null) {
      this.publicKeys = Thrift.copyList(args.publicKeys, [ttypes.PublicKey]);
    }
  }
};
PublicKeychain.prototype = {};
PublicKeychain.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size634 = 0;
        var _rtmp3638;
        this.publicKeys = [];
        var _etype637 = 0;
        _rtmp3638 = input.readSetBegin();
        _etype637 = _rtmp3638.etype;
        _size634 = _rtmp3638.size;
        for (var _i639 = 0; _i639 < _size634; ++_i639)
        {
          var elem640 = null;
          elem640 = new ttypes.PublicKey();
          elem640.read(input);
          this.publicKeys.push(elem640);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicKeychain.prototype.write = function(output) {
  output.writeStructBegin('PublicKeychain');
  if (this.publicKeys !== null && this.publicKeys !== undefined) {
    output.writeFieldBegin('publicKeys', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRUCT, this.publicKeys.length);
    for (var iter641 in this.publicKeys)
    {
      if (this.publicKeys.hasOwnProperty(iter641))
      {
        iter641 = this.publicKeys[iter641];
        iter641.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var QueueingPolicy = module.exports.QueueingPolicy = function(args) {
  this.priority = null;
  this.policy = null;
  if (args) {
    if (args.priority !== undefined && args.priority !== null) {
      this.priority = args.priority;
    }
    if (args.policy !== undefined && args.policy !== null) {
      this.policy = args.policy;
    }
  }
};
QueueingPolicy.prototype = {};
QueueingPolicy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.policy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueueingPolicy.prototype.write = function(output) {
  output.writeStructBegin('QueueingPolicy');
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 1);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.STRING, 2);
    output.writeString(this.policy);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisterWithPhoneNumberResult = module.exports.RegisterWithPhoneNumberResult = function(args) {
  this.authToken = null;
  this.recommendEmailRegistration = null;
  this.certificate = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
      this.recommendEmailRegistration = args.recommendEmailRegistration;
    }
    if (args.certificate !== undefined && args.certificate !== null) {
      this.certificate = args.certificate;
    }
  }
};
RegisterWithPhoneNumberResult.prototype = {};
RegisterWithPhoneNumberResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendEmailRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.certificate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterWithPhoneNumberResult.prototype.write = function(output) {
  output.writeStructBegin('RegisterWithPhoneNumberResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
    output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 2);
    output.writeBool(this.recommendEmailRegistration);
    output.writeFieldEnd();
  }
  if (this.certificate !== null && this.certificate !== undefined) {
    output.writeFieldBegin('certificate', Thrift.Type.STRING, 3);
    output.writeString(this.certificate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RegisterWithSnsIdResult = module.exports.RegisterWithSnsIdResult = function(args) {
  this.authToken = null;
  this.userCreated = null;
  this.recommendEmailRegistration = null;
  if (args) {
    if (args.authToken !== undefined && args.authToken !== null) {
      this.authToken = args.authToken;
    }
    if (args.userCreated !== undefined && args.userCreated !== null) {
      this.userCreated = args.userCreated;
    }
    if (args.recommendEmailRegistration !== undefined && args.recommendEmailRegistration !== null) {
      this.recommendEmailRegistration = args.recommendEmailRegistration;
    }
  }
};
RegisterWithSnsIdResult.prototype = {};
RegisterWithSnsIdResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.userCreated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.recommendEmailRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RegisterWithSnsIdResult.prototype.write = function(output) {
  output.writeStructBegin('RegisterWithSnsIdResult');
  if (this.authToken !== null && this.authToken !== undefined) {
    output.writeFieldBegin('authToken', Thrift.Type.STRING, 1);
    output.writeString(this.authToken);
    output.writeFieldEnd();
  }
  if (this.userCreated !== null && this.userCreated !== undefined) {
    output.writeFieldBegin('userCreated', Thrift.Type.BOOL, 2);
    output.writeBool(this.userCreated);
    output.writeFieldEnd();
  }
  if (this.recommendEmailRegistration !== null && this.recommendEmailRegistration !== undefined) {
    output.writeFieldBegin('recommendEmailRegistration', Thrift.Type.BOOL, 3);
    output.writeBool(this.recommendEmailRegistration);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestTokenResponse = module.exports.RequestTokenResponse = function(args) {
  this.requestToken = null;
  this.returnUrl = null;
  if (args) {
    if (args.requestToken !== undefined && args.requestToken !== null) {
      this.requestToken = args.requestToken;
    }
    if (args.returnUrl !== undefined && args.returnUrl !== null) {
      this.returnUrl = args.returnUrl;
    }
  }
};
RequestTokenResponse.prototype = {};
RequestTokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.returnUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestTokenResponse.prototype.write = function(output) {
  output.writeStructBegin('RequestTokenResponse');
  if (this.requestToken !== null && this.requestToken !== undefined) {
    output.writeFieldBegin('requestToken', Thrift.Type.STRING, 1);
    output.writeString(this.requestToken);
    output.writeFieldEnd();
  }
  if (this.returnUrl !== null && this.returnUrl !== undefined) {
    output.writeFieldBegin('returnUrl', Thrift.Type.STRING, 2);
    output.writeString(this.returnUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RingbackTone = module.exports.RingbackTone = function(args) {
  this.uuid = null;
  this.trackId = null;
  this.title = null;
  this.oid = null;
  this.tids = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
    if (args.trackId !== undefined && args.trackId !== null) {
      this.trackId = args.trackId;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.oid !== undefined && args.oid !== null) {
      this.oid = args.oid;
    }
    if (args.tids !== undefined && args.tids !== null) {
      this.tids = Thrift.copyMap(args.tids, [null]);
    }
  }
};
RingbackTone.prototype = {};
RingbackTone.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.trackId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.oid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size642 = 0;
        var _rtmp3646;
        this.tids = {};
        var _ktype643 = 0;
        var _vtype644 = 0;
        _rtmp3646 = input.readMapBegin();
        _ktype643 = _rtmp3646.ktype;
        _vtype644 = _rtmp3646.vtype;
        _size642 = _rtmp3646.size;
        for (var _i647 = 0; _i647 < _size642; ++_i647)
        {
          var key648 = null;
          var val649 = null;
          key648 = input.readString();
          val649 = input.readString();
          this.tids[key648] = val649;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RingbackTone.prototype.write = function(output) {
  output.writeStructBegin('RingbackTone');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.trackId !== null && this.trackId !== undefined) {
    output.writeFieldBegin('trackId', Thrift.Type.STRING, 2);
    output.writeString(this.trackId);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.oid !== null && this.oid !== undefined) {
    output.writeFieldBegin('oid', Thrift.Type.STRING, 4);
    output.writeString(this.oid);
    output.writeFieldEnd();
  }
  if (this.tids !== null && this.tids !== undefined) {
    output.writeFieldBegin('tids', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.tids));
    for (var kiter650 in this.tids)
    {
      if (this.tids.hasOwnProperty(kiter650))
      {
        var viter651 = this.tids[kiter650];
        output.writeString(kiter650);
        output.writeString(viter651);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Room = module.exports.Room = function(args) {
  this.mid = null;
  this.createdTime = null;
  this.contacts = null;
  this.notificationDisabled = null;
  this.memberMids = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.createdTime !== undefined && args.createdTime !== null) {
      this.createdTime = args.createdTime;
    }
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [ttypes.Contact]);
    }
    if (args.notificationDisabled !== undefined && args.notificationDisabled !== null) {
      this.notificationDisabled = args.notificationDisabled;
    }
    if (args.memberMids !== undefined && args.memberMids !== null) {
      this.memberMids = Thrift.copyList(args.memberMids, [null]);
    }
  }
};
Room.prototype = {};
Room.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.createdTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size652 = 0;
        var _rtmp3656;
        this.contacts = [];
        var _etype655 = 0;
        _rtmp3656 = input.readListBegin();
        _etype655 = _rtmp3656.etype;
        _size652 = _rtmp3656.size;
        for (var _i657 = 0; _i657 < _size652; ++_i657)
        {
          var elem658 = null;
          elem658 = new ttypes.Contact();
          elem658.read(input);
          this.contacts.push(elem658);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.LIST) {
        var _size659 = 0;
        var _rtmp3663;
        this.memberMids = [];
        var _etype662 = 0;
        _rtmp3663 = input.readListBegin();
        _etype662 = _rtmp3663.etype;
        _size659 = _rtmp3663.size;
        for (var _i664 = 0; _i664 < _size659; ++_i664)
        {
          var elem665 = null;
          elem665 = input.readString();
          this.memberMids.push(elem665);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Room.prototype.write = function(output) {
  output.writeStructBegin('Room');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.createdTime !== null && this.createdTime !== undefined) {
    output.writeFieldBegin('createdTime', Thrift.Type.I64, 2);
    output.writeI64(this.createdTime);
    output.writeFieldEnd();
  }
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
    for (var iter666 in this.contacts)
    {
      if (this.contacts.hasOwnProperty(iter666))
      {
        iter666 = this.contacts[iter666];
        iter666.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notificationDisabled !== null && this.notificationDisabled !== undefined) {
    output.writeFieldBegin('notificationDisabled', Thrift.Type.BOOL, 31);
    output.writeBool(this.notificationDisabled);
    output.writeFieldEnd();
  }
  if (this.memberMids !== null && this.memberMids !== undefined) {
    output.writeFieldBegin('memberMids', Thrift.Type.LIST, 40);
    output.writeListBegin(Thrift.Type.STRING, this.memberMids.length);
    for (var iter667 in this.memberMids)
    {
      if (this.memberMids.hasOwnProperty(iter667))
      {
        iter667 = this.memberMids[iter667];
        output.writeString(iter667);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RSAKey = module.exports.RSAKey = function(args) {
  this.keynm = null;
  this.nvalue = null;
  this.evalue = null;
  this.sessionKey = null;
  if (args) {
    if (args.keynm !== undefined && args.keynm !== null) {
      this.keynm = args.keynm;
    }
    if (args.nvalue !== undefined && args.nvalue !== null) {
      this.nvalue = args.nvalue;
    }
    if (args.evalue !== undefined && args.evalue !== null) {
      this.evalue = args.evalue;
    }
    if (args.sessionKey !== undefined && args.sessionKey !== null) {
      this.sessionKey = args.sessionKey;
    }
  }
};
RSAKey.prototype = {};
RSAKey.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.keynm = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nvalue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.evalue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sessionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RSAKey.prototype.write = function(output) {
  output.writeStructBegin('RSAKey');
  if (this.keynm !== null && this.keynm !== undefined) {
    output.writeFieldBegin('keynm', Thrift.Type.STRING, 1);
    output.writeString(this.keynm);
    output.writeFieldEnd();
  }
  if (this.nvalue !== null && this.nvalue !== undefined) {
    output.writeFieldBegin('nvalue', Thrift.Type.STRING, 2);
    output.writeString(this.nvalue);
    output.writeFieldEnd();
  }
  if (this.evalue !== null && this.evalue !== undefined) {
    output.writeFieldBegin('evalue', Thrift.Type.STRING, 3);
    output.writeString(this.evalue);
    output.writeFieldEnd();
  }
  if (this.sessionKey !== null && this.sessionKey !== undefined) {
    output.writeFieldBegin('sessionKey', Thrift.Type.STRING, 4);
    output.writeString(this.sessionKey);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecurityCenterResult = module.exports.SecurityCenterResult = function(args) {
  this.uri = null;
  this.token = null;
  this.cookiePath = null;
  this.skip = null;
  if (args) {
    if (args.uri !== undefined && args.uri !== null) {
      this.uri = args.uri;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.cookiePath !== undefined && args.cookiePath !== null) {
      this.cookiePath = args.cookiePath;
    }
    if (args.skip !== undefined && args.skip !== null) {
      this.skip = args.skip;
    }
  }
};
SecurityCenterResult.prototype = {};
SecurityCenterResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cookiePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.skip = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityCenterResult.prototype.write = function(output) {
  output.writeStructBegin('SecurityCenterResult');
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 1);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.cookiePath !== null && this.cookiePath !== undefined) {
    output.writeFieldBegin('cookiePath', Thrift.Type.STRING, 3);
    output.writeString(this.cookiePath);
    output.writeFieldEnd();
  }
  if (this.skip !== null && this.skip !== undefined) {
    output.writeFieldBegin('skip', Thrift.Type.BOOL, 4);
    output.writeBool(this.skip);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SendBuddyMessageResult = module.exports.SendBuddyMessageResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.messageId = null;
  this.eventNo = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.cancelCount = null;
  this.blockCount = null;
  this.unregisterCount = null;
  this.unrelatedCount = null;
  this.timestamp = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.cancelCount !== undefined && args.cancelCount !== null) {
      this.cancelCount = args.cancelCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
      this.unrelatedCount = args.unrelatedCount;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SendBuddyMessageResult.prototype = {};
SendBuddyMessageResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.cancelCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.unrelatedCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendBuddyMessageResult.prototype.write = function(output) {
  output.writeStructBegin('SendBuddyMessageResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 3);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 4);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.cancelCount !== null && this.cancelCount !== undefined) {
    output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
    output.writeI64(this.cancelCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 15);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 16);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
    output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 17);
    output.writeI64(this.unrelatedCount);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 22);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SendPostbackRequest = module.exports.SendPostbackRequest = function(args) {
  this.messageId = null;
  this.url = null;
  this.chatMID = null;
  this.originMID = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.chatMID !== undefined && args.chatMID !== null) {
      this.chatMID = args.chatMID;
    }
    if (args.originMID !== undefined && args.originMID !== null) {
      this.originMID = args.originMID;
    }
  }
};
SendPostbackRequest.prototype = {};
SendPostbackRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.chatMID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.originMID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SendPostbackRequest.prototype.write = function(output) {
  output.writeStructBegin('SendPostbackRequest');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.chatMID !== null && this.chatMID !== undefined) {
    output.writeFieldBegin('chatMID', Thrift.Type.STRING, 3);
    output.writeString(this.chatMID);
    output.writeFieldEnd();
  }
  if (this.originMID !== null && this.originMID !== undefined) {
    output.writeFieldBegin('originMID', Thrift.Type.STRING, 4);
    output.writeString(this.originMID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SetBuddyOnAirResult = module.exports.SetBuddyOnAirResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.eventNo = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.cancelCount = null;
  this.unregisterCount = null;
  this.timestamp = null;
  this.message = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.cancelCount !== undefined && args.cancelCount !== null) {
      this.cancelCount = args.cancelCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
SetBuddyOnAirResult.prototype = {};
SetBuddyOnAirResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.cancelCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SetBuddyOnAirResult.prototype.write = function(output) {
  output.writeStructBegin('SetBuddyOnAirResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.cancelCount !== null && this.cancelCount !== undefined) {
    output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
    output.writeI64(this.cancelCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 15);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 22);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Settings = module.exports.Settings = function(args) {
  this.notificationEnable = null;
  this.notificationMuteExpiration = null;
  this.notificationNewMessage = null;
  this.notificationGroupInvitation = null;
  this.notificationShowMessage = null;
  this.notificationIncomingCall = null;
  this.notificationSoundMessage = null;
  this.notificationSoundGroup = null;
  this.notificationDisabledWithSub = null;
  this.notificationPayment = null;
  this.privacySyncContacts = null;
  this.privacySearchByPhoneNumber = null;
  this.privacySearchByUserid = null;
  this.privacySearchByEmail = null;
  this.privacyAllowSecondaryDeviceLogin = null;
  this.privacyProfileImagePostToMyhome = null;
  this.privacyReceiveMessagesFromNotFriend = null;
  this.privacyAgreeUseLineCoinToPaidCall = null;
  this.privacyAgreeUsePaidCall = null;
  this.privacyAllowFriendRequest = null;
  this.contactMyTicket = null;
  this.identityProvider = null;
  this.identityIdentifier = null;
  this.snsAccounts = null;
  this.phoneRegistration = null;
  this.emailConfirmationStatus = null;
  this.accountMigrationPincodeType = null;
  this.enforcedInputAccountMigrationPincode = null;
  this.securityCenterSettingsType = null;
  this.allowUnregistrationSecondaryDevice = null;
  this.preferenceLocale = null;
  this.customModes = null;
  this.e2eeEnable = null;
  this.hitokotoBackupRequested = null;
  this.privacyProfileMusicPostToMyhome = null;
  this.privacyAllowNearby = null;
  this.agreementNearbyTime = null;
  this.agreementSquareTime = null;
  this.notificationMention = null;
  this.botUseAgreementAcceptedAt = null;
  if (args) {
    if (args.notificationEnable !== undefined && args.notificationEnable !== null) {
      this.notificationEnable = args.notificationEnable;
    }
    if (args.notificationMuteExpiration !== undefined && args.notificationMuteExpiration !== null) {
      this.notificationMuteExpiration = args.notificationMuteExpiration;
    }
    if (args.notificationNewMessage !== undefined && args.notificationNewMessage !== null) {
      this.notificationNewMessage = args.notificationNewMessage;
    }
    if (args.notificationGroupInvitation !== undefined && args.notificationGroupInvitation !== null) {
      this.notificationGroupInvitation = args.notificationGroupInvitation;
    }
    if (args.notificationShowMessage !== undefined && args.notificationShowMessage !== null) {
      this.notificationShowMessage = args.notificationShowMessage;
    }
    if (args.notificationIncomingCall !== undefined && args.notificationIncomingCall !== null) {
      this.notificationIncomingCall = args.notificationIncomingCall;
    }
    if (args.notificationSoundMessage !== undefined && args.notificationSoundMessage !== null) {
      this.notificationSoundMessage = args.notificationSoundMessage;
    }
    if (args.notificationSoundGroup !== undefined && args.notificationSoundGroup !== null) {
      this.notificationSoundGroup = args.notificationSoundGroup;
    }
    if (args.notificationDisabledWithSub !== undefined && args.notificationDisabledWithSub !== null) {
      this.notificationDisabledWithSub = args.notificationDisabledWithSub;
    }
    if (args.notificationPayment !== undefined && args.notificationPayment !== null) {
      this.notificationPayment = args.notificationPayment;
    }
    if (args.privacySyncContacts !== undefined && args.privacySyncContacts !== null) {
      this.privacySyncContacts = args.privacySyncContacts;
    }
    if (args.privacySearchByPhoneNumber !== undefined && args.privacySearchByPhoneNumber !== null) {
      this.privacySearchByPhoneNumber = args.privacySearchByPhoneNumber;
    }
    if (args.privacySearchByUserid !== undefined && args.privacySearchByUserid !== null) {
      this.privacySearchByUserid = args.privacySearchByUserid;
    }
    if (args.privacySearchByEmail !== undefined && args.privacySearchByEmail !== null) {
      this.privacySearchByEmail = args.privacySearchByEmail;
    }
    if (args.privacyAllowSecondaryDeviceLogin !== undefined && args.privacyAllowSecondaryDeviceLogin !== null) {
      this.privacyAllowSecondaryDeviceLogin = args.privacyAllowSecondaryDeviceLogin;
    }
    if (args.privacyProfileImagePostToMyhome !== undefined && args.privacyProfileImagePostToMyhome !== null) {
      this.privacyProfileImagePostToMyhome = args.privacyProfileImagePostToMyhome;
    }
    if (args.privacyReceiveMessagesFromNotFriend !== undefined && args.privacyReceiveMessagesFromNotFriend !== null) {
      this.privacyReceiveMessagesFromNotFriend = args.privacyReceiveMessagesFromNotFriend;
    }
    if (args.privacyAgreeUseLineCoinToPaidCall !== undefined && args.privacyAgreeUseLineCoinToPaidCall !== null) {
      this.privacyAgreeUseLineCoinToPaidCall = args.privacyAgreeUseLineCoinToPaidCall;
    }
    if (args.privacyAgreeUsePaidCall !== undefined && args.privacyAgreeUsePaidCall !== null) {
      this.privacyAgreeUsePaidCall = args.privacyAgreeUsePaidCall;
    }
    if (args.privacyAllowFriendRequest !== undefined && args.privacyAllowFriendRequest !== null) {
      this.privacyAllowFriendRequest = args.privacyAllowFriendRequest;
    }
    if (args.contactMyTicket !== undefined && args.contactMyTicket !== null) {
      this.contactMyTicket = args.contactMyTicket;
    }
    if (args.identityProvider !== undefined && args.identityProvider !== null) {
      this.identityProvider = args.identityProvider;
    }
    if (args.identityIdentifier !== undefined && args.identityIdentifier !== null) {
      this.identityIdentifier = args.identityIdentifier;
    }
    if (args.snsAccounts !== undefined && args.snsAccounts !== null) {
      this.snsAccounts = Thrift.copyMap(args.snsAccounts, [null]);
    }
    if (args.phoneRegistration !== undefined && args.phoneRegistration !== null) {
      this.phoneRegistration = args.phoneRegistration;
    }
    if (args.emailConfirmationStatus !== undefined && args.emailConfirmationStatus !== null) {
      this.emailConfirmationStatus = args.emailConfirmationStatus;
    }
    if (args.accountMigrationPincodeType !== undefined && args.accountMigrationPincodeType !== null) {
      this.accountMigrationPincodeType = args.accountMigrationPincodeType;
    }
    if (args.enforcedInputAccountMigrationPincode !== undefined && args.enforcedInputAccountMigrationPincode !== null) {
      this.enforcedInputAccountMigrationPincode = args.enforcedInputAccountMigrationPincode;
    }
    if (args.securityCenterSettingsType !== undefined && args.securityCenterSettingsType !== null) {
      this.securityCenterSettingsType = args.securityCenterSettingsType;
    }
    if (args.allowUnregistrationSecondaryDevice !== undefined && args.allowUnregistrationSecondaryDevice !== null) {
      this.allowUnregistrationSecondaryDevice = args.allowUnregistrationSecondaryDevice;
    }
    if (args.preferenceLocale !== undefined && args.preferenceLocale !== null) {
      this.preferenceLocale = args.preferenceLocale;
    }
    if (args.customModes !== undefined && args.customModes !== null) {
      this.customModes = Thrift.copyMap(args.customModes, [null]);
    }
    if (args.e2eeEnable !== undefined && args.e2eeEnable !== null) {
      this.e2eeEnable = args.e2eeEnable;
    }
    if (args.hitokotoBackupRequested !== undefined && args.hitokotoBackupRequested !== null) {
      this.hitokotoBackupRequested = args.hitokotoBackupRequested;
    }
    if (args.privacyProfileMusicPostToMyhome !== undefined && args.privacyProfileMusicPostToMyhome !== null) {
      this.privacyProfileMusicPostToMyhome = args.privacyProfileMusicPostToMyhome;
    }
    if (args.privacyAllowNearby !== undefined && args.privacyAllowNearby !== null) {
      this.privacyAllowNearby = args.privacyAllowNearby;
    }
    if (args.agreementNearbyTime !== undefined && args.agreementNearbyTime !== null) {
      this.agreementNearbyTime = args.agreementNearbyTime;
    }
    if (args.agreementSquareTime !== undefined && args.agreementSquareTime !== null) {
      this.agreementSquareTime = args.agreementSquareTime;
    }
    if (args.notificationMention !== undefined && args.notificationMention !== null) {
      this.notificationMention = args.notificationMention;
    }
    if (args.botUseAgreementAcceptedAt !== undefined && args.botUseAgreementAcceptedAt !== null) {
      this.botUseAgreementAcceptedAt = args.botUseAgreementAcceptedAt;
    }
  }
};
Settings.prototype = {};
Settings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationEnable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.notificationMuteExpiration = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationNewMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationGroupInvitation = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationShowMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationIncomingCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.notificationSoundGroup = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationDisabledWithSub = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationPayment = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySyncContacts = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByPhoneNumber = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByUserid = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.privacySearchByEmail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowSecondaryDeviceLogin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileImagePostToMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyReceiveMessagesFromNotFriend = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgreeUseLineCoinToPaidCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAgreeUsePaidCall = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowFriendRequest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.contactMyTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.identityProvider = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.identityIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.MAP) {
        var _size668 = 0;
        var _rtmp3672;
        this.snsAccounts = {};
        var _ktype669 = 0;
        var _vtype670 = 0;
        _rtmp3672 = input.readMapBegin();
        _ktype669 = _rtmp3672.ktype;
        _vtype670 = _rtmp3672.vtype;
        _size668 = _rtmp3672.size;
        for (var _i673 = 0; _i673 < _size668; ++_i673)
        {
          var key674 = null;
          var val675 = null;
          key674 = input.readI32();
          val675 = input.readString();
          this.snsAccounts[key674] = val675;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneRegistration = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I32) {
        this.emailConfirmationStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationPincodeType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.BOOL) {
        this.enforcedInputAccountMigrationPincode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.I32) {
        this.securityCenterSettingsType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.BOOL) {
        this.allowUnregistrationSecondaryDevice = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.preferenceLocale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.MAP) {
        var _size676 = 0;
        var _rtmp3680;
        this.customModes = {};
        var _ktype677 = 0;
        var _vtype678 = 0;
        _rtmp3680 = input.readMapBegin();
        _ktype677 = _rtmp3680.ktype;
        _vtype678 = _rtmp3680.vtype;
        _size676 = _rtmp3680.size;
        for (var _i681 = 0; _i681 < _size676; ++_i681)
        {
          var key682 = null;
          var val683 = null;
          key682 = input.readI32();
          val683 = input.readString();
          this.customModes[key682] = val683;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.BOOL) {
        this.e2eeEnable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.BOOL) {
        this.hitokotoBackupRequested = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyProfileMusicPostToMyhome = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.BOOL) {
        this.privacyAllowNearby = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.I64) {
        this.agreementNearbyTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.I64) {
        this.agreementSquareTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.BOOL) {
        this.notificationMention = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.I64) {
        this.botUseAgreementAcceptedAt = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Settings.prototype.write = function(output) {
  output.writeStructBegin('Settings');
  if (this.notificationEnable !== null && this.notificationEnable !== undefined) {
    output.writeFieldBegin('notificationEnable', Thrift.Type.BOOL, 10);
    output.writeBool(this.notificationEnable);
    output.writeFieldEnd();
  }
  if (this.notificationMuteExpiration !== null && this.notificationMuteExpiration !== undefined) {
    output.writeFieldBegin('notificationMuteExpiration', Thrift.Type.I64, 11);
    output.writeI64(this.notificationMuteExpiration);
    output.writeFieldEnd();
  }
  if (this.notificationNewMessage !== null && this.notificationNewMessage !== undefined) {
    output.writeFieldBegin('notificationNewMessage', Thrift.Type.BOOL, 12);
    output.writeBool(this.notificationNewMessage);
    output.writeFieldEnd();
  }
  if (this.notificationGroupInvitation !== null && this.notificationGroupInvitation !== undefined) {
    output.writeFieldBegin('notificationGroupInvitation', Thrift.Type.BOOL, 13);
    output.writeBool(this.notificationGroupInvitation);
    output.writeFieldEnd();
  }
  if (this.notificationShowMessage !== null && this.notificationShowMessage !== undefined) {
    output.writeFieldBegin('notificationShowMessage', Thrift.Type.BOOL, 14);
    output.writeBool(this.notificationShowMessage);
    output.writeFieldEnd();
  }
  if (this.notificationIncomingCall !== null && this.notificationIncomingCall !== undefined) {
    output.writeFieldBegin('notificationIncomingCall', Thrift.Type.BOOL, 15);
    output.writeBool(this.notificationIncomingCall);
    output.writeFieldEnd();
  }
  if (this.notificationSoundMessage !== null && this.notificationSoundMessage !== undefined) {
    output.writeFieldBegin('notificationSoundMessage', Thrift.Type.STRING, 16);
    output.writeString(this.notificationSoundMessage);
    output.writeFieldEnd();
  }
  if (this.notificationSoundGroup !== null && this.notificationSoundGroup !== undefined) {
    output.writeFieldBegin('notificationSoundGroup', Thrift.Type.STRING, 17);
    output.writeString(this.notificationSoundGroup);
    output.writeFieldEnd();
  }
  if (this.notificationDisabledWithSub !== null && this.notificationDisabledWithSub !== undefined) {
    output.writeFieldBegin('notificationDisabledWithSub', Thrift.Type.BOOL, 18);
    output.writeBool(this.notificationDisabledWithSub);
    output.writeFieldEnd();
  }
  if (this.notificationPayment !== null && this.notificationPayment !== undefined) {
    output.writeFieldBegin('notificationPayment', Thrift.Type.BOOL, 19);
    output.writeBool(this.notificationPayment);
    output.writeFieldEnd();
  }
  if (this.privacySyncContacts !== null && this.privacySyncContacts !== undefined) {
    output.writeFieldBegin('privacySyncContacts', Thrift.Type.BOOL, 20);
    output.writeBool(this.privacySyncContacts);
    output.writeFieldEnd();
  }
  if (this.privacySearchByPhoneNumber !== null && this.privacySearchByPhoneNumber !== undefined) {
    output.writeFieldBegin('privacySearchByPhoneNumber', Thrift.Type.BOOL, 21);
    output.writeBool(this.privacySearchByPhoneNumber);
    output.writeFieldEnd();
  }
  if (this.privacySearchByUserid !== null && this.privacySearchByUserid !== undefined) {
    output.writeFieldBegin('privacySearchByUserid', Thrift.Type.BOOL, 22);
    output.writeBool(this.privacySearchByUserid);
    output.writeFieldEnd();
  }
  if (this.privacySearchByEmail !== null && this.privacySearchByEmail !== undefined) {
    output.writeFieldBegin('privacySearchByEmail', Thrift.Type.BOOL, 23);
    output.writeBool(this.privacySearchByEmail);
    output.writeFieldEnd();
  }
  if (this.privacyAllowSecondaryDeviceLogin !== null && this.privacyAllowSecondaryDeviceLogin !== undefined) {
    output.writeFieldBegin('privacyAllowSecondaryDeviceLogin', Thrift.Type.BOOL, 24);
    output.writeBool(this.privacyAllowSecondaryDeviceLogin);
    output.writeFieldEnd();
  }
  if (this.privacyProfileImagePostToMyhome !== null && this.privacyProfileImagePostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileImagePostToMyhome', Thrift.Type.BOOL, 25);
    output.writeBool(this.privacyProfileImagePostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyReceiveMessagesFromNotFriend !== null && this.privacyReceiveMessagesFromNotFriend !== undefined) {
    output.writeFieldBegin('privacyReceiveMessagesFromNotFriend', Thrift.Type.BOOL, 26);
    output.writeBool(this.privacyReceiveMessagesFromNotFriend);
    output.writeFieldEnd();
  }
  if (this.privacyAgreeUseLineCoinToPaidCall !== null && this.privacyAgreeUseLineCoinToPaidCall !== undefined) {
    output.writeFieldBegin('privacyAgreeUseLineCoinToPaidCall', Thrift.Type.BOOL, 27);
    output.writeBool(this.privacyAgreeUseLineCoinToPaidCall);
    output.writeFieldEnd();
  }
  if (this.privacyAgreeUsePaidCall !== null && this.privacyAgreeUsePaidCall !== undefined) {
    output.writeFieldBegin('privacyAgreeUsePaidCall', Thrift.Type.BOOL, 28);
    output.writeBool(this.privacyAgreeUsePaidCall);
    output.writeFieldEnd();
  }
  if (this.privacyAllowFriendRequest !== null && this.privacyAllowFriendRequest !== undefined) {
    output.writeFieldBegin('privacyAllowFriendRequest', Thrift.Type.BOOL, 29);
    output.writeBool(this.privacyAllowFriendRequest);
    output.writeFieldEnd();
  }
  if (this.contactMyTicket !== null && this.contactMyTicket !== undefined) {
    output.writeFieldBegin('contactMyTicket', Thrift.Type.STRING, 30);
    output.writeString(this.contactMyTicket);
    output.writeFieldEnd();
  }
  if (this.identityProvider !== null && this.identityProvider !== undefined) {
    output.writeFieldBegin('identityProvider', Thrift.Type.I32, 40);
    output.writeI32(this.identityProvider);
    output.writeFieldEnd();
  }
  if (this.identityIdentifier !== null && this.identityIdentifier !== undefined) {
    output.writeFieldBegin('identityIdentifier', Thrift.Type.STRING, 41);
    output.writeString(this.identityIdentifier);
    output.writeFieldEnd();
  }
  if (this.snsAccounts !== null && this.snsAccounts !== undefined) {
    output.writeFieldBegin('snsAccounts', Thrift.Type.MAP, 42);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.snsAccounts));
    for (var kiter684 in this.snsAccounts)
    {
      if (this.snsAccounts.hasOwnProperty(kiter684))
      {
        var viter685 = this.snsAccounts[kiter684];
        output.writeI32(kiter684);
        output.writeString(viter685);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.phoneRegistration !== null && this.phoneRegistration !== undefined) {
    output.writeFieldBegin('phoneRegistration', Thrift.Type.BOOL, 43);
    output.writeBool(this.phoneRegistration);
    output.writeFieldEnd();
  }
  if (this.emailConfirmationStatus !== null && this.emailConfirmationStatus !== undefined) {
    output.writeFieldBegin('emailConfirmationStatus', Thrift.Type.I32, 44);
    output.writeI32(this.emailConfirmationStatus);
    output.writeFieldEnd();
  }
  if (this.accountMigrationPincodeType !== null && this.accountMigrationPincodeType !== undefined) {
    output.writeFieldBegin('accountMigrationPincodeType', Thrift.Type.I32, 45);
    output.writeI32(this.accountMigrationPincodeType);
    output.writeFieldEnd();
  }
  if (this.enforcedInputAccountMigrationPincode !== null && this.enforcedInputAccountMigrationPincode !== undefined) {
    output.writeFieldBegin('enforcedInputAccountMigrationPincode', Thrift.Type.BOOL, 46);
    output.writeBool(this.enforcedInputAccountMigrationPincode);
    output.writeFieldEnd();
  }
  if (this.securityCenterSettingsType !== null && this.securityCenterSettingsType !== undefined) {
    output.writeFieldBegin('securityCenterSettingsType', Thrift.Type.I32, 47);
    output.writeI32(this.securityCenterSettingsType);
    output.writeFieldEnd();
  }
  if (this.allowUnregistrationSecondaryDevice !== null && this.allowUnregistrationSecondaryDevice !== undefined) {
    output.writeFieldBegin('allowUnregistrationSecondaryDevice', Thrift.Type.BOOL, 48);
    output.writeBool(this.allowUnregistrationSecondaryDevice);
    output.writeFieldEnd();
  }
  if (this.preferenceLocale !== null && this.preferenceLocale !== undefined) {
    output.writeFieldBegin('preferenceLocale', Thrift.Type.STRING, 50);
    output.writeString(this.preferenceLocale);
    output.writeFieldEnd();
  }
  if (this.customModes !== null && this.customModes !== undefined) {
    output.writeFieldBegin('customModes', Thrift.Type.MAP, 60);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.STRING, Thrift.objectLength(this.customModes));
    for (var kiter686 in this.customModes)
    {
      if (this.customModes.hasOwnProperty(kiter686))
      {
        var viter687 = this.customModes[kiter686];
        output.writeI32(kiter686);
        output.writeString(viter687);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.e2eeEnable !== null && this.e2eeEnable !== undefined) {
    output.writeFieldBegin('e2eeEnable', Thrift.Type.BOOL, 61);
    output.writeBool(this.e2eeEnable);
    output.writeFieldEnd();
  }
  if (this.hitokotoBackupRequested !== null && this.hitokotoBackupRequested !== undefined) {
    output.writeFieldBegin('hitokotoBackupRequested', Thrift.Type.BOOL, 62);
    output.writeBool(this.hitokotoBackupRequested);
    output.writeFieldEnd();
  }
  if (this.privacyProfileMusicPostToMyhome !== null && this.privacyProfileMusicPostToMyhome !== undefined) {
    output.writeFieldBegin('privacyProfileMusicPostToMyhome', Thrift.Type.BOOL, 63);
    output.writeBool(this.privacyProfileMusicPostToMyhome);
    output.writeFieldEnd();
  }
  if (this.privacyAllowNearby !== null && this.privacyAllowNearby !== undefined) {
    output.writeFieldBegin('privacyAllowNearby', Thrift.Type.BOOL, 65);
    output.writeBool(this.privacyAllowNearby);
    output.writeFieldEnd();
  }
  if (this.agreementNearbyTime !== null && this.agreementNearbyTime !== undefined) {
    output.writeFieldBegin('agreementNearbyTime', Thrift.Type.I64, 66);
    output.writeI64(this.agreementNearbyTime);
    output.writeFieldEnd();
  }
  if (this.agreementSquareTime !== null && this.agreementSquareTime !== undefined) {
    output.writeFieldBegin('agreementSquareTime', Thrift.Type.I64, 67);
    output.writeI64(this.agreementSquareTime);
    output.writeFieldEnd();
  }
  if (this.notificationMention !== null && this.notificationMention !== undefined) {
    output.writeFieldBegin('notificationMention', Thrift.Type.BOOL, 68);
    output.writeBool(this.notificationMention);
    output.writeFieldEnd();
  }
  if (this.botUseAgreementAcceptedAt !== null && this.botUseAgreementAcceptedAt !== undefined) {
    output.writeFieldBegin('botUseAgreementAcceptedAt', Thrift.Type.I64, 69);
    output.writeI64(this.botUseAgreementAcceptedAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShopUpdates = module.exports.ShopUpdates = function(args) {
  this.latestNewReleaseTime = null;
  this.latestEventReleaseTime = null;
  this.latestCategoryUpdateTime = null;
  this.lastVersion = null;
  this.updatedProductList = null;
  if (args) {
    if (args.latestNewReleaseTime !== undefined && args.latestNewReleaseTime !== null) {
      this.latestNewReleaseTime = args.latestNewReleaseTime;
    }
    if (args.latestEventReleaseTime !== undefined && args.latestEventReleaseTime !== null) {
      this.latestEventReleaseTime = args.latestEventReleaseTime;
    }
    if (args.latestCategoryUpdateTime !== undefined && args.latestCategoryUpdateTime !== null) {
      this.latestCategoryUpdateTime = args.latestCategoryUpdateTime;
    }
    if (args.lastVersion !== undefined && args.lastVersion !== null) {
      this.lastVersion = args.lastVersion;
    }
    if (args.updatedProductList !== undefined && args.updatedProductList !== null) {
      this.updatedProductList = Thrift.copyList(args.updatedProductList, [ttypes.ProductSimple]);
    }
  }
};
ShopUpdates.prototype = {};
ShopUpdates.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.latestNewReleaseTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.latestEventReleaseTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.latestCategoryUpdateTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.lastVersion = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size688 = 0;
        var _rtmp3692;
        this.updatedProductList = [];
        var _etype691 = 0;
        _rtmp3692 = input.readListBegin();
        _etype691 = _rtmp3692.etype;
        _size688 = _rtmp3692.size;
        for (var _i693 = 0; _i693 < _size688; ++_i693)
        {
          var elem694 = null;
          elem694 = new ttypes.ProductSimple();
          elem694.read(input);
          this.updatedProductList.push(elem694);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShopUpdates.prototype.write = function(output) {
  output.writeStructBegin('ShopUpdates');
  if (this.latestNewReleaseTime !== null && this.latestNewReleaseTime !== undefined) {
    output.writeFieldBegin('latestNewReleaseTime', Thrift.Type.I64, 1);
    output.writeI64(this.latestNewReleaseTime);
    output.writeFieldEnd();
  }
  if (this.latestEventReleaseTime !== null && this.latestEventReleaseTime !== undefined) {
    output.writeFieldBegin('latestEventReleaseTime', Thrift.Type.I64, 2);
    output.writeI64(this.latestEventReleaseTime);
    output.writeFieldEnd();
  }
  if (this.latestCategoryUpdateTime !== null && this.latestCategoryUpdateTime !== undefined) {
    output.writeFieldBegin('latestCategoryUpdateTime', Thrift.Type.I64, 3);
    output.writeI64(this.latestCategoryUpdateTime);
    output.writeFieldEnd();
  }
  if (this.lastVersion !== null && this.lastVersion !== undefined) {
    output.writeFieldBegin('lastVersion', Thrift.Type.I64, 11);
    output.writeI64(this.lastVersion);
    output.writeFieldEnd();
  }
  if (this.updatedProductList !== null && this.updatedProductList !== undefined) {
    output.writeFieldBegin('updatedProductList', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.STRUCT, this.updatedProductList.length);
    for (var iter695 in this.updatedProductList)
    {
      if (this.updatedProductList.hasOwnProperty(iter695))
      {
        iter695 = this.updatedProductList[iter695];
        iter695.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ShouldSyncException = module.exports.ShouldSyncException = function(args) {
  Thrift.TException.call(this, "ShouldSyncException");
  this.name = "ShouldSyncException";
  this.syncOpRevision = null;
  this.syncScope = null;
  this.syncReason = null;
  this.message = null;
  if (args) {
    if (args.syncOpRevision !== undefined && args.syncOpRevision !== null) {
      this.syncOpRevision = args.syncOpRevision;
    }
    if (args.syncScope !== undefined && args.syncScope !== null) {
      this.syncScope = new ttypes.SyncScope(args.syncScope);
    }
    if (args.syncReason !== undefined && args.syncReason !== null) {
      this.syncReason = args.syncReason;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ShouldSyncException, Thrift.TException);
ShouldSyncException.prototype.name = 'ShouldSyncException';
ShouldSyncException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.syncOpRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.syncScope = new ttypes.SyncScope();
        this.syncScope.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.syncReason = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ShouldSyncException.prototype.write = function(output) {
  output.writeStructBegin('ShouldSyncException');
  if (this.syncOpRevision !== null && this.syncOpRevision !== undefined) {
    output.writeFieldBegin('syncOpRevision', Thrift.Type.I64, 1);
    output.writeI64(this.syncOpRevision);
    output.writeFieldEnd();
  }
  if (this.syncScope !== null && this.syncScope !== undefined) {
    output.writeFieldBegin('syncScope', Thrift.Type.STRUCT, 2);
    this.syncScope.write(output);
    output.writeFieldEnd();
  }
  if (this.syncReason !== null && this.syncReason !== undefined) {
    output.writeFieldBegin('syncReason', Thrift.Type.I32, 3);
    output.writeI32(this.syncReason);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SIMInfo = module.exports.SIMInfo = function(args) {
  this.phoneNumber = null;
  this.countryCode = null;
  if (args) {
    if (args.phoneNumber !== undefined && args.phoneNumber !== null) {
      this.phoneNumber = args.phoneNumber;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
  }
};
SIMInfo.prototype = {};
SIMInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phoneNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SIMInfo.prototype.write = function(output) {
  output.writeStructBegin('SIMInfo');
  if (this.phoneNumber !== null && this.phoneNumber !== undefined) {
    output.writeFieldBegin('phoneNumber', Thrift.Type.STRING, 1);
    output.writeString(this.phoneNumber);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SimpleChannelClient = module.exports.SimpleChannelClient = function(args) {
  this.applicationType = null;
  this.applicationVersion = null;
  this.locale = null;
  this.mid = null;
  if (args) {
    if (args.applicationType !== undefined && args.applicationType !== null) {
      this.applicationType = args.applicationType;
    }
    if (args.applicationVersion !== undefined && args.applicationVersion !== null) {
      this.applicationVersion = args.applicationVersion;
    }
    if (args.locale !== undefined && args.locale !== null) {
      this.locale = args.locale;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
  }
};
SimpleChannelClient.prototype = {};
SimpleChannelClient.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.applicationType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.applicationVersion = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locale = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleChannelClient.prototype.write = function(output) {
  output.writeStructBegin('SimpleChannelClient');
  if (this.applicationType !== null && this.applicationType !== undefined) {
    output.writeFieldBegin('applicationType', Thrift.Type.STRING, 1);
    output.writeString(this.applicationType);
    output.writeFieldEnd();
  }
  if (this.applicationVersion !== null && this.applicationVersion !== undefined) {
    output.writeFieldBegin('applicationVersion', Thrift.Type.STRING, 2);
    output.writeString(this.applicationVersion);
    output.writeFieldEnd();
  }
  if (this.locale !== null && this.locale !== undefined) {
    output.writeFieldBegin('locale', Thrift.Type.STRING, 3);
    output.writeString(this.locale);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 4);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SimpleChannelContact = module.exports.SimpleChannelContact = function(args) {
  this.mid = null;
  this.displayName = null;
  this.pictureStatus = null;
  this.picturePath = null;
  this.statusMessage = null;
  this.userid = null;
  this.regionCode = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
    if (args.pictureStatus !== undefined && args.pictureStatus !== null) {
      this.pictureStatus = args.pictureStatus;
    }
    if (args.picturePath !== undefined && args.picturePath !== null) {
      this.picturePath = args.picturePath;
    }
    if (args.statusMessage !== undefined && args.statusMessage !== null) {
      this.statusMessage = args.statusMessage;
    }
    if (args.userid !== undefined && args.userid !== null) {
      this.userid = args.userid;
    }
    if (args.regionCode !== undefined && args.regionCode !== null) {
      this.regionCode = args.regionCode;
    }
  }
};
SimpleChannelContact.prototype = {};
SimpleChannelContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pictureStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.picturePath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.statusMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.userid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.regionCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleChannelContact.prototype.write = function(output) {
  output.writeStructBegin('SimpleChannelContact');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  if (this.pictureStatus !== null && this.pictureStatus !== undefined) {
    output.writeFieldBegin('pictureStatus', Thrift.Type.STRING, 3);
    output.writeString(this.pictureStatus);
    output.writeFieldEnd();
  }
  if (this.picturePath !== null && this.picturePath !== undefined) {
    output.writeFieldBegin('picturePath', Thrift.Type.STRING, 4);
    output.writeString(this.picturePath);
    output.writeFieldEnd();
  }
  if (this.statusMessage !== null && this.statusMessage !== undefined) {
    output.writeFieldBegin('statusMessage', Thrift.Type.STRING, 5);
    output.writeString(this.statusMessage);
    output.writeFieldEnd();
  }
  if (this.userid !== null && this.userid !== undefined) {
    output.writeFieldBegin('userid', Thrift.Type.STRING, 6);
    output.writeString(this.userid);
    output.writeFieldEnd();
  }
  if (this.regionCode !== null && this.regionCode !== undefined) {
    output.writeFieldBegin('regionCode', Thrift.Type.STRING, 7);
    output.writeString(this.regionCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnsFriend = module.exports.SnsFriend = function(args) {
  this.snsUserId = null;
  this.snsUserName = null;
  this.snsIdType = null;
  if (args) {
    if (args.snsUserId !== undefined && args.snsUserId !== null) {
      this.snsUserId = args.snsUserId;
    }
    if (args.snsUserName !== undefined && args.snsUserName !== null) {
      this.snsUserName = args.snsUserName;
    }
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
  }
};
SnsFriend.prototype = {};
SnsFriend.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriend.prototype.write = function(output) {
  output.writeStructBegin('SnsFriend');
  if (this.snsUserId !== null && this.snsUserId !== undefined) {
    output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 1);
    output.writeString(this.snsUserId);
    output.writeFieldEnd();
  }
  if (this.snsUserName !== null && this.snsUserName !== undefined) {
    output.writeFieldBegin('snsUserName', Thrift.Type.STRING, 2);
    output.writeString(this.snsUserName);
    output.writeFieldEnd();
  }
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 3);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnsFriendContactRegistration = module.exports.SnsFriendContactRegistration = function(args) {
  this.contact = null;
  this.snsIdType = null;
  this.snsUserId = null;
  if (args) {
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.Contact(args.contact);
    }
    if (args.snsIdType !== undefined && args.snsIdType !== null) {
      this.snsIdType = args.snsIdType;
    }
    if (args.snsUserId !== undefined && args.snsUserId !== null) {
      this.snsUserId = args.snsUserId;
    }
  }
};
SnsFriendContactRegistration.prototype = {};
SnsFriendContactRegistration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.Contact();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.snsIdType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriendContactRegistration.prototype.write = function(output) {
  output.writeStructBegin('SnsFriendContactRegistration');
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 1);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.snsIdType !== null && this.snsIdType !== undefined) {
    output.writeFieldBegin('snsIdType', Thrift.Type.I32, 2);
    output.writeI32(this.snsIdType);
    output.writeFieldEnd();
  }
  if (this.snsUserId !== null && this.snsUserId !== undefined) {
    output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 3);
    output.writeString(this.snsUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnsFriendModification = module.exports.SnsFriendModification = function(args) {
  this.type = null;
  this.snsFriend = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.snsFriend !== undefined && args.snsFriend !== null) {
      this.snsFriend = new ttypes.SnsFriend(args.snsFriend);
    }
  }
};
SnsFriendModification.prototype = {};
SnsFriendModification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.snsFriend = new ttypes.SnsFriend();
        this.snsFriend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriendModification.prototype.write = function(output) {
  output.writeStructBegin('SnsFriendModification');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.snsFriend !== null && this.snsFriend !== undefined) {
    output.writeFieldBegin('snsFriend', Thrift.Type.STRUCT, 2);
    this.snsFriend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnsFriends = module.exports.SnsFriends = function(args) {
  this.snsFriends = null;
  this.hasMore = null;
  if (args) {
    if (args.snsFriends !== undefined && args.snsFriends !== null) {
      this.snsFriends = Thrift.copyList(args.snsFriends, [ttypes.SnsFriend]);
    }
    if (args.hasMore !== undefined && args.hasMore !== null) {
      this.hasMore = args.hasMore;
    }
  }
};
SnsFriends.prototype = {};
SnsFriends.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size696 = 0;
        var _rtmp3700;
        this.snsFriends = [];
        var _etype699 = 0;
        _rtmp3700 = input.readListBegin();
        _etype699 = _rtmp3700.etype;
        _size696 = _rtmp3700.size;
        for (var _i701 = 0; _i701 < _size696; ++_i701)
        {
          var elem702 = null;
          elem702 = new ttypes.SnsFriend();
          elem702.read(input);
          this.snsFriends.push(elem702);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMore = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsFriends.prototype.write = function(output) {
  output.writeStructBegin('SnsFriends');
  if (this.snsFriends !== null && this.snsFriends !== undefined) {
    output.writeFieldBegin('snsFriends', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.snsFriends.length);
    for (var iter703 in this.snsFriends)
    {
      if (this.snsFriends.hasOwnProperty(iter703))
      {
        iter703 = this.snsFriends[iter703];
        iter703.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasMore !== null && this.hasMore !== undefined) {
    output.writeFieldBegin('hasMore', Thrift.Type.BOOL, 2);
    output.writeBool(this.hasMore);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnsIdUserStatus = module.exports.SnsIdUserStatus = function(args) {
  this.userExisting = null;
  this.phoneNumberRegistered = null;
  this.sameDevice = null;
  this.accountMigrationCheckType = null;
  if (args) {
    if (args.userExisting !== undefined && args.userExisting !== null) {
      this.userExisting = args.userExisting;
    }
    if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
      this.phoneNumberRegistered = args.phoneNumberRegistered;
    }
    if (args.sameDevice !== undefined && args.sameDevice !== null) {
      this.sameDevice = args.sameDevice;
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
  }
};
SnsIdUserStatus.prototype = {};
SnsIdUserStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.userExisting = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneNumberRegistered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.sameDevice = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsIdUserStatus.prototype.write = function(output) {
  output.writeStructBegin('SnsIdUserStatus');
  if (this.userExisting !== null && this.userExisting !== undefined) {
    output.writeFieldBegin('userExisting', Thrift.Type.BOOL, 1);
    output.writeBool(this.userExisting);
    output.writeFieldEnd();
  }
  if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
    output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 2);
    output.writeBool(this.phoneNumberRegistered);
    output.writeFieldEnd();
  }
  if (this.sameDevice !== null && this.sameDevice !== undefined) {
    output.writeFieldBegin('sameDevice', Thrift.Type.BOOL, 3);
    output.writeBool(this.sameDevice);
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 4);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SnsProfile = module.exports.SnsProfile = function(args) {
  this.snsUserId = null;
  this.snsUserName = null;
  this.email = null;
  this.thumbnailUrl = null;
  if (args) {
    if (args.snsUserId !== undefined && args.snsUserId !== null) {
      this.snsUserId = args.snsUserId;
    }
    if (args.snsUserName !== undefined && args.snsUserName !== null) {
      this.snsUserName = args.snsUserName;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
  }
};
SnsProfile.prototype = {};
SnsProfile.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.snsUserName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SnsProfile.prototype.write = function(output) {
  output.writeStructBegin('SnsProfile');
  if (this.snsUserId !== null && this.snsUserId !== undefined) {
    output.writeFieldBegin('snsUserId', Thrift.Type.STRING, 1);
    output.writeString(this.snsUserId);
    output.writeFieldEnd();
  }
  if (this.snsUserName !== null && this.snsUserName !== undefined) {
    output.writeFieldBegin('snsUserName', Thrift.Type.STRING, 2);
    output.writeString(this.snsUserName);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 4);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpotItem = module.exports.SpotItem = function(args) {
  this.name = null;
  this.phone = null;
  this.category = null;
  this.mid = null;
  this.countryAreaCode = null;
  this.freePhoneCallable = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.countryAreaCode !== undefined && args.countryAreaCode !== null) {
      this.countryAreaCode = args.countryAreaCode;
    }
    if (args.freePhoneCallable !== undefined && args.freePhoneCallable !== null) {
      this.freePhoneCallable = args.freePhoneCallable;
    }
  }
};
SpotItem.prototype = {};
SpotItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.countryAreaCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.freePhoneCallable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotItem.prototype.write = function(output) {
  output.writeStructBegin('SpotItem');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 4);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 5);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.countryAreaCode !== null && this.countryAreaCode !== undefined) {
    output.writeFieldBegin('countryAreaCode', Thrift.Type.STRING, 6);
    output.writeString(this.countryAreaCode);
    output.writeFieldEnd();
  }
  if (this.freePhoneCallable !== null && this.freePhoneCallable !== undefined) {
    output.writeFieldBegin('freePhoneCallable', Thrift.Type.BOOL, 10);
    output.writeBool(this.freePhoneCallable);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpotNearbyItem = module.exports.SpotNearbyItem = function(args) {
  this.spotItem = null;
  this.location = null;
  if (args) {
    if (args.spotItem !== undefined && args.spotItem !== null) {
      this.spotItem = new ttypes.SpotItem(args.spotItem);
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = new ttypes.Location(args.location);
    }
  }
};
SpotNearbyItem.prototype = {};
SpotNearbyItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spotItem = new ttypes.SpotItem();
        this.spotItem.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new ttypes.Location();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotNearbyItem.prototype.write = function(output) {
  output.writeStructBegin('SpotNearbyItem');
  if (this.spotItem !== null && this.spotItem !== undefined) {
    output.writeFieldBegin('spotItem', Thrift.Type.STRUCT, 2);
    this.spotItem.write(output);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 11);
    this.location.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpotNearbyResponse = module.exports.SpotNearbyResponse = function(args) {
  this.spotNearbyItems = null;
  if (args) {
    if (args.spotNearbyItems !== undefined && args.spotNearbyItems !== null) {
      this.spotNearbyItems = Thrift.copyList(args.spotNearbyItems, [ttypes.SpotNearbyItem]);
    }
  }
};
SpotNearbyResponse.prototype = {};
SpotNearbyResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size704 = 0;
        var _rtmp3708;
        this.spotNearbyItems = [];
        var _etype707 = 0;
        _rtmp3708 = input.readListBegin();
        _etype707 = _rtmp3708.etype;
        _size704 = _rtmp3708.size;
        for (var _i709 = 0; _i709 < _size704; ++_i709)
        {
          var elem710 = null;
          elem710 = new ttypes.SpotNearbyItem();
          elem710.read(input);
          this.spotNearbyItems.push(elem710);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotNearbyResponse.prototype.write = function(output) {
  output.writeStructBegin('SpotNearbyResponse');
  if (this.spotNearbyItems !== null && this.spotNearbyItems !== undefined) {
    output.writeFieldBegin('spotNearbyItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.spotNearbyItems.length);
    for (var iter711 in this.spotNearbyItems)
    {
      if (this.spotNearbyItems.hasOwnProperty(iter711))
      {
        iter711 = this.spotNearbyItems[iter711];
        iter711.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SpotPhoneNumberResponse = module.exports.SpotPhoneNumberResponse = function(args) {
  this.spotItems = null;
  if (args) {
    if (args.spotItems !== undefined && args.spotItems !== null) {
      this.spotItems = Thrift.copyList(args.spotItems, [ttypes.SpotItem]);
    }
  }
};
SpotPhoneNumberResponse.prototype = {};
SpotPhoneNumberResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size712 = 0;
        var _rtmp3716;
        this.spotItems = [];
        var _etype715 = 0;
        _rtmp3716 = input.readListBegin();
        _etype715 = _rtmp3716.etype;
        _size712 = _rtmp3716.size;
        for (var _i717 = 0; _i717 < _size712; ++_i717)
        {
          var elem718 = null;
          elem718 = new ttypes.SpotItem();
          elem718.read(input);
          this.spotItems.push(elem718);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpotPhoneNumberResponse.prototype.write = function(output) {
  output.writeStructBegin('SpotPhoneNumberResponse');
  if (this.spotItems !== null && this.spotItems !== undefined) {
    output.writeFieldBegin('spotItems', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.spotItems.length);
    for (var iter719 in this.spotItems)
    {
      if (this.spotItems.hasOwnProperty(iter719))
      {
        iter719 = this.spotItems[iter719];
        iter719.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StickerIdRange = module.exports.StickerIdRange = function(args) {
  this.start = null;
  this.size = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
StickerIdRange.prototype = {};
StickerIdRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StickerIdRange.prototype.write = function(output) {
  output.writeStructBegin('StickerIdRange');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 1);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 2);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestDictionary = module.exports.SuggestDictionary = function(args) {
  this.language = null;
  this.name = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
SuggestDictionary.prototype = {};
SuggestDictionary.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionary.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionary');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 1);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestDictionaryIncrements = module.exports.SuggestDictionaryIncrements = function(args) {
  this.itemIncrement = null;
  this.tagIncrements = null;
  if (args) {
    if (args.itemIncrement !== undefined && args.itemIncrement !== null) {
      this.itemIncrement = new ttypes.SuggestItemDictionaryIncrement(args.itemIncrement);
    }
    if (args.tagIncrements !== undefined && args.tagIncrements !== null) {
      this.tagIncrements = Thrift.copyList(args.tagIncrements, [null]);
    }
  }
};
SuggestDictionaryIncrements.prototype = {};
SuggestDictionaryIncrements.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.itemIncrement = new ttypes.SuggestItemDictionaryIncrement();
        this.itemIncrement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size720 = 0;
        var _rtmp3724;
        this.tagIncrements = [];
        var _etype723 = 0;
        _rtmp3724 = input.readListBegin();
        _etype723 = _rtmp3724.etype;
        _size720 = _rtmp3724.size;
        for (var _i725 = 0; _i725 < _size720; ++_i725)
        {
          var elem726 = null;
          elem726 = new ttypes.SuggestTagDictionaryIncrement();
          elem726.read(input);
          this.tagIncrements.push(elem726);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionaryIncrements.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionaryIncrements');
  if (this.itemIncrement !== null && this.itemIncrement !== undefined) {
    output.writeFieldBegin('itemIncrement', Thrift.Type.STRUCT, 1);
    this.itemIncrement.write(output);
    output.writeFieldEnd();
  }
  if (this.tagIncrements !== null && this.tagIncrements !== undefined) {
    output.writeFieldBegin('tagIncrements', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tagIncrements.length);
    for (var iter727 in this.tagIncrements)
    {
      if (this.tagIncrements.hasOwnProperty(iter727))
      {
        iter727 = this.tagIncrements[iter727];
        iter727.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestDictionaryRevisions = module.exports.SuggestDictionaryRevisions = function(args) {
  this.itemRevision = null;
  this.tagRevisions = null;
  if (args) {
    if (args.itemRevision !== undefined && args.itemRevision !== null) {
      this.itemRevision = new ttypes.SuggestItemDictionaryRevision(args.itemRevision);
    }
    if (args.tagRevisions !== undefined && args.tagRevisions !== null) {
      this.tagRevisions = Thrift.copyList(args.tagRevisions, [null]);
    }
  }
};
SuggestDictionaryRevisions.prototype = {};
SuggestDictionaryRevisions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.itemRevision = new ttypes.SuggestItemDictionaryRevision();
        this.itemRevision.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size728 = 0;
        var _rtmp3732;
        this.tagRevisions = [];
        var _etype731 = 0;
        _rtmp3732 = input.readListBegin();
        _etype731 = _rtmp3732.etype;
        _size728 = _rtmp3732.size;
        for (var _i733 = 0; _i733 < _size728; ++_i733)
        {
          var elem734 = null;
          elem734 = new ttypes.SuggestTagDictionaryRevision();
          elem734.read(input);
          this.tagRevisions.push(elem734);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionaryRevisions.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionaryRevisions');
  if (this.itemRevision !== null && this.itemRevision !== undefined) {
    output.writeFieldBegin('itemRevision', Thrift.Type.STRUCT, 1);
    this.itemRevision.write(output);
    output.writeFieldEnd();
  }
  if (this.tagRevisions !== null && this.tagRevisions !== undefined) {
    output.writeFieldBegin('tagRevisions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tagRevisions.length);
    for (var iter735 in this.tagRevisions)
    {
      if (this.tagRevisions.hasOwnProperty(iter735))
      {
        iter735 = this.tagRevisions[iter735];
        iter735.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestDictionarySettings = module.exports.SuggestDictionarySettings = function(args) {
  this.revision = null;
  this.newRevision = null;
  this.dictionaries = null;
  this.preloadedDictionaries = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.newRevision !== undefined && args.newRevision !== null) {
      this.newRevision = args.newRevision;
    }
    if (args.dictionaries !== undefined && args.dictionaries !== null) {
      this.dictionaries = Thrift.copyList(args.dictionaries, [ttypes.SuggestDictionary]);
    }
    if (args.preloadedDictionaries !== undefined && args.preloadedDictionaries !== null) {
      this.preloadedDictionaries = Thrift.copyList(args.preloadedDictionaries, [null]);
    }
  }
};
SuggestDictionarySettings.prototype = {};
SuggestDictionarySettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.newRevision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size736 = 0;
        var _rtmp3740;
        this.dictionaries = [];
        var _etype739 = 0;
        _rtmp3740 = input.readListBegin();
        _etype739 = _rtmp3740.etype;
        _size736 = _rtmp3740.size;
        for (var _i741 = 0; _i741 < _size736; ++_i741)
        {
          var elem742 = null;
          elem742 = new ttypes.SuggestDictionary();
          elem742.read(input);
          this.dictionaries.push(elem742);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size743 = 0;
        var _rtmp3747;
        this.preloadedDictionaries = [];
        var _etype746 = 0;
        _rtmp3747 = input.readListBegin();
        _etype746 = _rtmp3747.etype;
        _size743 = _rtmp3747.size;
        for (var _i748 = 0; _i748 < _size743; ++_i748)
        {
          var elem749 = null;
          elem749 = input.readString();
          this.preloadedDictionaries.push(elem749);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestDictionarySettings.prototype.write = function(output) {
  output.writeStructBegin('SuggestDictionarySettings');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.newRevision !== null && this.newRevision !== undefined) {
    output.writeFieldBegin('newRevision', Thrift.Type.I64, 2);
    output.writeI64(this.newRevision);
    output.writeFieldEnd();
  }
  if (this.dictionaries !== null && this.dictionaries !== undefined) {
    output.writeFieldBegin('dictionaries', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.dictionaries.length);
    for (var iter750 in this.dictionaries)
    {
      if (this.dictionaries.hasOwnProperty(iter750))
      {
        iter750 = this.dictionaries[iter750];
        iter750.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.preloadedDictionaries !== null && this.preloadedDictionaries !== undefined) {
    output.writeFieldBegin('preloadedDictionaries', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.preloadedDictionaries.length);
    for (var iter751 in this.preloadedDictionaries)
    {
      if (this.preloadedDictionaries.hasOwnProperty(iter751))
      {
        iter751 = this.preloadedDictionaries[iter751];
        output.writeString(iter751);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestItemDictionaryIncrement = module.exports.SuggestItemDictionaryIncrement = function(args) {
  this.status = null;
  this.revision = null;
  this.scheme = null;
  this.data = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
SuggestItemDictionaryIncrement.prototype = {};
SuggestItemDictionaryIncrement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestItemDictionaryIncrement.prototype.write = function(output) {
  output.writeStructBegin('SuggestItemDictionaryIncrement');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 3);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 4);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestItemDictionaryRevision = module.exports.SuggestItemDictionaryRevision = function(args) {
  this.revision = null;
  this.scheme = null;
  if (args) {
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
  }
};
SuggestItemDictionaryRevision.prototype = {};
SuggestItemDictionaryRevision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestItemDictionaryRevision.prototype.write = function(output) {
  output.writeStructBegin('SuggestItemDictionaryRevision');
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 1);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 2);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestTagDictionaryIncrement = module.exports.SuggestTagDictionaryIncrement = function(args) {
  this.status = null;
  this.language = null;
  this.revision = null;
  this.scheme = null;
  this.data = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
  }
};
SuggestTagDictionaryIncrement.prototype = {};
SuggestTagDictionaryIncrement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestTagDictionaryIncrement.prototype.write = function(output) {
  output.writeStructBegin('SuggestTagDictionaryIncrement');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 4);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 5);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SuggestTagDictionaryRevision = module.exports.SuggestTagDictionaryRevision = function(args) {
  this.language = null;
  this.revision = null;
  this.scheme = null;
  if (args) {
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.scheme !== undefined && args.scheme !== null) {
      this.scheme = args.scheme;
    }
  }
};
SuggestTagDictionaryRevision.prototype = {};
SuggestTagDictionaryRevision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.scheme = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SuggestTagDictionaryRevision.prototype.write = function(output) {
  output.writeStructBegin('SuggestTagDictionaryRevision');
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 1);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 2);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.scheme !== null && this.scheme !== undefined) {
    output.writeFieldBegin('scheme', Thrift.Type.STRING, 3);
    output.writeString(this.scheme);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncParamContact = module.exports.SyncParamContact = function(args) {
  this.syncParamMid = null;
  this.contactStatus = null;
  if (args) {
    if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
      this.syncParamMid = new ttypes.SyncParamMid(args.syncParamMid);
    }
    if (args.contactStatus !== undefined && args.contactStatus !== null) {
      this.contactStatus = args.contactStatus;
    }
  }
};
SyncParamContact.prototype = {};
SyncParamContact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.syncParamMid = new ttypes.SyncParamMid();
        this.syncParamMid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.contactStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncParamContact.prototype.write = function(output) {
  output.writeStructBegin('SyncParamContact');
  if (this.syncParamMid !== null && this.syncParamMid !== undefined) {
    output.writeFieldBegin('syncParamMid', Thrift.Type.STRUCT, 1);
    this.syncParamMid.write(output);
    output.writeFieldEnd();
  }
  if (this.contactStatus !== null && this.contactStatus !== undefined) {
    output.writeFieldBegin('contactStatus', Thrift.Type.I32, 2);
    output.writeI32(this.contactStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncParamMid = module.exports.SyncParamMid = function(args) {
  this.mid = null;
  this.diff = null;
  this.revision = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.diff !== undefined && args.diff !== null) {
      this.diff = args.diff;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
SyncParamMid.prototype = {};
SyncParamMid.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.diff = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncParamMid.prototype.write = function(output) {
  output.writeStructBegin('SyncParamMid');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.diff !== null && this.diff !== undefined) {
    output.writeFieldBegin('diff', Thrift.Type.I32, 2);
    output.writeI32(this.diff);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 3);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncRelations = module.exports.SyncRelations = function(args) {
  this.syncAll = null;
  this.syncParamContact = null;
  this.syncParamMid = null;
  if (args) {
    if (args.syncAll !== undefined && args.syncAll !== null) {
      this.syncAll = args.syncAll;
    }
    if (args.syncParamContact !== undefined && args.syncParamContact !== null) {
      this.syncParamContact = Thrift.copyList(args.syncParamContact, [ttypes.SyncParamContact]);
    }
    if (args.syncParamMid !== undefined && args.syncParamMid !== null) {
      this.syncParamMid = Thrift.copyList(args.syncParamMid, [ttypes.SyncParamMid]);
    }
  }
};
SyncRelations.prototype = {};
SyncRelations.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.syncAll = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size752 = 0;
        var _rtmp3756;
        this.syncParamContact = [];
        var _etype755 = 0;
        _rtmp3756 = input.readListBegin();
        _etype755 = _rtmp3756.etype;
        _size752 = _rtmp3756.size;
        for (var _i757 = 0; _i757 < _size752; ++_i757)
        {
          var elem758 = null;
          elem758 = new ttypes.SyncParamContact();
          elem758.read(input);
          this.syncParamContact.push(elem758);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size759 = 0;
        var _rtmp3763;
        this.syncParamMid = [];
        var _etype762 = 0;
        _rtmp3763 = input.readListBegin();
        _etype762 = _rtmp3763.etype;
        _size759 = _rtmp3763.size;
        for (var _i764 = 0; _i764 < _size759; ++_i764)
        {
          var elem765 = null;
          elem765 = new ttypes.SyncParamMid();
          elem765.read(input);
          this.syncParamMid.push(elem765);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncRelations.prototype.write = function(output) {
  output.writeStructBegin('SyncRelations');
  if (this.syncAll !== null && this.syncAll !== undefined) {
    output.writeFieldBegin('syncAll', Thrift.Type.BOOL, 1);
    output.writeBool(this.syncAll);
    output.writeFieldEnd();
  }
  if (this.syncParamContact !== null && this.syncParamContact !== undefined) {
    output.writeFieldBegin('syncParamContact', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.syncParamContact.length);
    for (var iter766 in this.syncParamContact)
    {
      if (this.syncParamContact.hasOwnProperty(iter766))
      {
        iter766 = this.syncParamContact[iter766];
        iter766.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.syncParamMid !== null && this.syncParamMid !== undefined) {
    output.writeFieldBegin('syncParamMid', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.syncParamMid.length);
    for (var iter767 in this.syncParamMid)
    {
      if (this.syncParamMid.hasOwnProperty(iter767))
      {
        iter767 = this.syncParamMid[iter767];
        iter767.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SyncScope = module.exports.SyncScope = function(args) {
  this.syncProfile = null;
  this.syncSettings = null;
  this.syncSticker = null;
  this.syncThemeShop = null;
  this.contact = null;
  this.group = null;
  this.room = null;
  this.chat = null;
  if (args) {
    if (args.syncProfile !== undefined && args.syncProfile !== null) {
      this.syncProfile = args.syncProfile;
    }
    if (args.syncSettings !== undefined && args.syncSettings !== null) {
      this.syncSettings = args.syncSettings;
    }
    if (args.syncSticker !== undefined && args.syncSticker !== null) {
      this.syncSticker = args.syncSticker;
    }
    if (args.syncThemeShop !== undefined && args.syncThemeShop !== null) {
      this.syncThemeShop = args.syncThemeShop;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new ttypes.SyncRelations(args.contact);
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = new ttypes.SyncRelations(args.group);
    }
    if (args.room !== undefined && args.room !== null) {
      this.room = new ttypes.SyncRelations(args.room);
    }
    if (args.chat !== undefined && args.chat !== null) {
      this.chat = new ttypes.SyncRelations(args.chat);
    }
  }
};
SyncScope.prototype = {};
SyncScope.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.syncProfile = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.syncSettings = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.syncSticker = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.syncThemeShop = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new ttypes.SyncRelations();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new ttypes.SyncRelations();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.room = new ttypes.SyncRelations();
        this.room.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.chat = new ttypes.SyncRelations();
        this.chat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SyncScope.prototype.write = function(output) {
  output.writeStructBegin('SyncScope');
  if (this.syncProfile !== null && this.syncProfile !== undefined) {
    output.writeFieldBegin('syncProfile', Thrift.Type.BOOL, 1);
    output.writeBool(this.syncProfile);
    output.writeFieldEnd();
  }
  if (this.syncSettings !== null && this.syncSettings !== undefined) {
    output.writeFieldBegin('syncSettings', Thrift.Type.BOOL, 2);
    output.writeBool(this.syncSettings);
    output.writeFieldEnd();
  }
  if (this.syncSticker !== null && this.syncSticker !== undefined) {
    output.writeFieldBegin('syncSticker', Thrift.Type.BOOL, 3);
    output.writeBool(this.syncSticker);
    output.writeFieldEnd();
  }
  if (this.syncThemeShop !== null && this.syncThemeShop !== undefined) {
    output.writeFieldBegin('syncThemeShop', Thrift.Type.BOOL, 4);
    output.writeBool(this.syncThemeShop);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 10);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 11);
    this.group.write(output);
    output.writeFieldEnd();
  }
  if (this.room !== null && this.room !== undefined) {
    output.writeFieldBegin('room', Thrift.Type.STRUCT, 12);
    this.room.write(output);
    output.writeFieldEnd();
  }
  if (this.chat !== null && this.chat !== undefined) {
    output.writeFieldBegin('chat', Thrift.Type.STRUCT, 13);
    this.chat.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemConfiguration = module.exports.SystemConfiguration = function(args) {
  this.endpoint = null;
  this.endpointSsl = null;
  this.updateUrl = null;
  this.c2dmAccount = null;
  this.nniServer = null;
  if (args) {
    if (args.endpoint !== undefined && args.endpoint !== null) {
      this.endpoint = args.endpoint;
    }
    if (args.endpointSsl !== undefined && args.endpointSsl !== null) {
      this.endpointSsl = args.endpointSsl;
    }
    if (args.updateUrl !== undefined && args.updateUrl !== null) {
      this.updateUrl = args.updateUrl;
    }
    if (args.c2dmAccount !== undefined && args.c2dmAccount !== null) {
      this.c2dmAccount = args.c2dmAccount;
    }
    if (args.nniServer !== undefined && args.nniServer !== null) {
      this.nniServer = args.nniServer;
    }
  }
};
SystemConfiguration.prototype = {};
SystemConfiguration.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.endpoint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.endpointSsl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.updateUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.c2dmAccount = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.nniServer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemConfiguration.prototype.write = function(output) {
  output.writeStructBegin('SystemConfiguration');
  if (this.endpoint !== null && this.endpoint !== undefined) {
    output.writeFieldBegin('endpoint', Thrift.Type.STRING, 1);
    output.writeString(this.endpoint);
    output.writeFieldEnd();
  }
  if (this.endpointSsl !== null && this.endpointSsl !== undefined) {
    output.writeFieldBegin('endpointSsl', Thrift.Type.STRING, 2);
    output.writeString(this.endpointSsl);
    output.writeFieldEnd();
  }
  if (this.updateUrl !== null && this.updateUrl !== undefined) {
    output.writeFieldBegin('updateUrl', Thrift.Type.STRING, 3);
    output.writeString(this.updateUrl);
    output.writeFieldEnd();
  }
  if (this.c2dmAccount !== null && this.c2dmAccount !== undefined) {
    output.writeFieldBegin('c2dmAccount', Thrift.Type.STRING, 11);
    output.writeString(this.c2dmAccount);
    output.writeFieldEnd();
  }
  if (this.nniServer !== null && this.nniServer !== undefined) {
    output.writeFieldBegin('nniServer', Thrift.Type.STRING, 12);
    output.writeString(this.nniServer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TalkException = module.exports.TalkException = function(args) {
  Thrift.TException.call(this, "TalkException");
  this.name = "TalkException";
  this.code = null;
  this.reason = null;
  this.parameterMap = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.parameterMap !== undefined && args.parameterMap !== null) {
      this.parameterMap = Thrift.copyMap(args.parameterMap, [null]);
    }
  }
};
Thrift.inherits(TalkException, Thrift.TException);
TalkException.prototype.name = 'TalkException';
TalkException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size768 = 0;
        var _rtmp3772;
        this.parameterMap = {};
        var _ktype769 = 0;
        var _vtype770 = 0;
        _rtmp3772 = input.readMapBegin();
        _ktype769 = _rtmp3772.ktype;
        _vtype770 = _rtmp3772.vtype;
        _size768 = _rtmp3772.size;
        for (var _i773 = 0; _i773 < _size768; ++_i773)
        {
          var key774 = null;
          var val775 = null;
          key774 = input.readString();
          val775 = input.readString();
          this.parameterMap[key774] = val775;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TalkException.prototype.write = function(output) {
  output.writeStructBegin('TalkException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.parameterMap !== null && this.parameterMap !== undefined) {
    output.writeFieldBegin('parameterMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameterMap));
    for (var kiter776 in this.parameterMap)
    {
      if (this.parameterMap.hasOwnProperty(kiter776))
      {
        var viter777 = this.parameterMap[kiter776];
        output.writeString(kiter776);
        output.writeString(viter777);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Ticket = module.exports.Ticket = function(args) {
  this.id = null;
  this.expirationTime = null;
  this.maxUseCount = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.expirationTime !== undefined && args.expirationTime !== null) {
      this.expirationTime = args.expirationTime;
    }
    if (args.maxUseCount !== undefined && args.maxUseCount !== null) {
      this.maxUseCount = args.maxUseCount;
    }
  }
};
Ticket.prototype = {};
Ticket.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.expirationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.maxUseCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Ticket.prototype.write = function(output) {
  output.writeStructBegin('Ticket');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.expirationTime !== null && this.expirationTime !== undefined) {
    output.writeFieldBegin('expirationTime', Thrift.Type.I64, 10);
    output.writeI64(this.expirationTime);
    output.writeFieldEnd();
  }
  if (this.maxUseCount !== null && this.maxUseCount !== undefined) {
    output.writeFieldBegin('maxUseCount', Thrift.Type.I32, 21);
    output.writeI32(this.maxUseCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageBox = module.exports.TMessageBox = function(args) {
  this.id = null;
  this.channelId = null;
  this.lastSeq = null;
  this.unreadCount = null;
  this.lastModifiedTime = null;
  this.status = null;
  this.midType = null;
  this.lastMessages = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.channelId !== undefined && args.channelId !== null) {
      this.channelId = args.channelId;
    }
    if (args.lastSeq !== undefined && args.lastSeq !== null) {
      this.lastSeq = args.lastSeq;
    }
    if (args.unreadCount !== undefined && args.unreadCount !== null) {
      this.unreadCount = args.unreadCount;
    }
    if (args.lastModifiedTime !== undefined && args.lastModifiedTime !== null) {
      this.lastModifiedTime = args.lastModifiedTime;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.midType !== undefined && args.midType !== null) {
      this.midType = args.midType;
    }
    if (args.lastMessages !== undefined && args.lastMessages !== null) {
      this.lastMessages = Thrift.copyList(args.lastMessages, [ttypes.Message]);
    }
  }
};
TMessageBox.prototype = {};
TMessageBox.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channelId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.lastSeq = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.unreadCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModifiedTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.midType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size778 = 0;
        var _rtmp3782;
        this.lastMessages = [];
        var _etype781 = 0;
        _rtmp3782 = input.readListBegin();
        _etype781 = _rtmp3782.etype;
        _size778 = _rtmp3782.size;
        for (var _i783 = 0; _i783 < _size778; ++_i783)
        {
          var elem784 = null;
          elem784 = new ttypes.Message();
          elem784.read(input);
          this.lastMessages.push(elem784);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageBox.prototype.write = function(output) {
  output.writeStructBegin('TMessageBox');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.channelId !== null && this.channelId !== undefined) {
    output.writeFieldBegin('channelId', Thrift.Type.STRING, 2);
    output.writeString(this.channelId);
    output.writeFieldEnd();
  }
  if (this.lastSeq !== null && this.lastSeq !== undefined) {
    output.writeFieldBegin('lastSeq', Thrift.Type.I64, 5);
    output.writeI64(this.lastSeq);
    output.writeFieldEnd();
  }
  if (this.unreadCount !== null && this.unreadCount !== undefined) {
    output.writeFieldBegin('unreadCount', Thrift.Type.I64, 6);
    output.writeI64(this.unreadCount);
    output.writeFieldEnd();
  }
  if (this.lastModifiedTime !== null && this.lastModifiedTime !== undefined) {
    output.writeFieldBegin('lastModifiedTime', Thrift.Type.I64, 7);
    output.writeI64(this.lastModifiedTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 8);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.midType !== null && this.midType !== undefined) {
    output.writeFieldBegin('midType', Thrift.Type.I32, 9);
    output.writeI32(this.midType);
    output.writeFieldEnd();
  }
  if (this.lastMessages !== null && this.lastMessages !== undefined) {
    output.writeFieldBegin('lastMessages', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.lastMessages.length);
    for (var iter785 in this.lastMessages)
    {
      if (this.lastMessages.hasOwnProperty(iter785))
      {
        iter785 = this.lastMessages[iter785];
        iter785.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageBoxWrapUp = module.exports.TMessageBoxWrapUp = function(args) {
  this.messageBox = null;
  this.name = null;
  this.contacts = null;
  this.pictureRevision = null;
  if (args) {
    if (args.messageBox !== undefined && args.messageBox !== null) {
      this.messageBox = new ttypes.TMessageBox(args.messageBox);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.contacts !== undefined && args.contacts !== null) {
      this.contacts = Thrift.copyList(args.contacts, [ttypes.Contact]);
    }
    if (args.pictureRevision !== undefined && args.pictureRevision !== null) {
      this.pictureRevision = args.pictureRevision;
    }
  }
};
TMessageBoxWrapUp.prototype = {};
TMessageBoxWrapUp.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.messageBox = new ttypes.TMessageBox();
        this.messageBox.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size786 = 0;
        var _rtmp3790;
        this.contacts = [];
        var _etype789 = 0;
        _rtmp3790 = input.readListBegin();
        _etype789 = _rtmp3790.etype;
        _size786 = _rtmp3790.size;
        for (var _i791 = 0; _i791 < _size786; ++_i791)
        {
          var elem792 = null;
          elem792 = new ttypes.Contact();
          elem792.read(input);
          this.contacts.push(elem792);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.pictureRevision = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageBoxWrapUp.prototype.write = function(output) {
  output.writeStructBegin('TMessageBoxWrapUp');
  if (this.messageBox !== null && this.messageBox !== undefined) {
    output.writeFieldBegin('messageBox', Thrift.Type.STRUCT, 1);
    this.messageBox.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.contacts !== null && this.contacts !== undefined) {
    output.writeFieldBegin('contacts', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.contacts.length);
    for (var iter793 in this.contacts)
    {
      if (this.contacts.hasOwnProperty(iter793))
      {
        iter793 = this.contacts[iter793];
        iter793.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pictureRevision !== null && this.pictureRevision !== undefined) {
    output.writeFieldBegin('pictureRevision', Thrift.Type.STRING, 4);
    output.writeString(this.pictureRevision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageBoxWrapUpResponse = module.exports.TMessageBoxWrapUpResponse = function(args) {
  this.messageBoxWrapUpList = null;
  this.totalSize = null;
  if (args) {
    if (args.messageBoxWrapUpList !== undefined && args.messageBoxWrapUpList !== null) {
      this.messageBoxWrapUpList = Thrift.copyList(args.messageBoxWrapUpList, [ttypes.TMessageBoxWrapUp]);
    }
    if (args.totalSize !== undefined && args.totalSize !== null) {
      this.totalSize = args.totalSize;
    }
  }
};
TMessageBoxWrapUpResponse.prototype = {};
TMessageBoxWrapUpResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size794 = 0;
        var _rtmp3798;
        this.messageBoxWrapUpList = [];
        var _etype797 = 0;
        _rtmp3798 = input.readListBegin();
        _etype797 = _rtmp3798.etype;
        _size794 = _rtmp3798.size;
        for (var _i799 = 0; _i799 < _size794; ++_i799)
        {
          var elem800 = null;
          elem800 = new ttypes.TMessageBoxWrapUp();
          elem800.read(input);
          this.messageBoxWrapUpList.push(elem800);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageBoxWrapUpResponse.prototype.write = function(output) {
  output.writeStructBegin('TMessageBoxWrapUpResponse');
  if (this.messageBoxWrapUpList !== null && this.messageBoxWrapUpList !== undefined) {
    output.writeFieldBegin('messageBoxWrapUpList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.messageBoxWrapUpList.length);
    for (var iter801 in this.messageBoxWrapUpList)
    {
      if (this.messageBoxWrapUpList.hasOwnProperty(iter801))
      {
        iter801 = this.messageBoxWrapUpList[iter801];
        iter801.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.totalSize !== null && this.totalSize !== undefined) {
    output.writeFieldBegin('totalSize', Thrift.Type.I32, 2);
    output.writeI32(this.totalSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageReadRange = module.exports.TMessageReadRange = function(args) {
  this.chatId = null;
  this.ranges = null;
  if (args) {
    if (args.chatId !== undefined && args.chatId !== null) {
      this.chatId = args.chatId;
    }
    if (args.ranges !== undefined && args.ranges !== null) {
      this.ranges = Thrift.copyMap(args.ranges, [Thrift.copyList, null]);
    }
  }
};
TMessageReadRange.prototype = {};
TMessageReadRange.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size802 = 0;
        var _rtmp3806;
        this.ranges = {};
        var _ktype803 = 0;
        var _vtype804 = 0;
        _rtmp3806 = input.readMapBegin();
        _ktype803 = _rtmp3806.ktype;
        _vtype804 = _rtmp3806.vtype;
        _size802 = _rtmp3806.size;
        for (var _i807 = 0; _i807 < _size802; ++_i807)
        {
          var key808 = null;
          var val809 = null;
          key808 = input.readString();
          var _size810 = 0;
          var _rtmp3814;
          val809 = [];
          var _etype813 = 0;
          _rtmp3814 = input.readListBegin();
          _etype813 = _rtmp3814.etype;
          _size810 = _rtmp3814.size;
          for (var _i815 = 0; _i815 < _size810; ++_i815)
          {
            var elem816 = null;
            elem816 = new ttypes.TMessageReadRangeEntry();
            elem816.read(input);
            val809.push(elem816);
          }
          input.readListEnd();
          this.ranges[key808] = val809;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageReadRange.prototype.write = function(output) {
  output.writeStructBegin('TMessageReadRange');
  if (this.chatId !== null && this.chatId !== undefined) {
    output.writeFieldBegin('chatId', Thrift.Type.STRING, 1);
    output.writeString(this.chatId);
    output.writeFieldEnd();
  }
  if (this.ranges !== null && this.ranges !== undefined) {
    output.writeFieldBegin('ranges', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.ranges));
    for (var kiter817 in this.ranges)
    {
      if (this.ranges.hasOwnProperty(kiter817))
      {
        var viter818 = this.ranges[kiter817];
        output.writeString(kiter817);
        output.writeListBegin(Thrift.Type.STRUCT, viter818.length);
        for (var iter819 in viter818)
        {
          if (viter818.hasOwnProperty(iter819))
          {
            iter819 = viter818[iter819];
            iter819.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TMessageReadRangeEntry = module.exports.TMessageReadRangeEntry = function(args) {
  this.startMessageId = null;
  this.endMessageId = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.startMessageId !== undefined && args.startMessageId !== null) {
      this.startMessageId = args.startMessageId;
    }
    if (args.endMessageId !== undefined && args.endMessageId !== null) {
      this.endMessageId = args.endMessageId;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
  }
};
TMessageReadRangeEntry.prototype = {};
TMessageReadRangeEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.startMessageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.endMessageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TMessageReadRangeEntry.prototype.write = function(output) {
  output.writeStructBegin('TMessageReadRangeEntry');
  if (this.startMessageId !== null && this.startMessageId !== undefined) {
    output.writeFieldBegin('startMessageId', Thrift.Type.I64, 1);
    output.writeI64(this.startMessageId);
    output.writeFieldEnd();
  }
  if (this.endMessageId !== null && this.endMessageId !== undefined) {
    output.writeFieldBegin('endMessageId', Thrift.Type.I64, 2);
    output.writeI64(this.endMessageId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 3);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 4);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UnregisterBuddyResult = module.exports.UnregisterBuddyResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.eventNo = null;
  this.message = null;
  this.timestamp = null;
  this.subscriberCountToRemove = null;
  this.subscriberCountRemoved = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.subscriberCountToRemove !== undefined && args.subscriberCountToRemove !== null) {
      this.subscriberCountToRemove = args.subscriberCountToRemove;
    }
    if (args.subscriberCountRemoved !== undefined && args.subscriberCountRemoved !== null) {
      this.subscriberCountRemoved = args.subscriberCountRemoved;
    }
  }
};
UnregisterBuddyResult.prototype = {};
UnregisterBuddyResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.subscriberCountToRemove = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.subscriberCountRemoved = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UnregisterBuddyResult.prototype.write = function(output) {
  output.writeStructBegin('UnregisterBuddyResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 5);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.subscriberCountToRemove !== null && this.subscriberCountToRemove !== undefined) {
    output.writeFieldBegin('subscriberCountToRemove', Thrift.Type.I64, 6);
    output.writeI64(this.subscriberCountToRemove);
    output.writeFieldEnd();
  }
  if (this.subscriberCountRemoved !== null && this.subscriberCountRemoved !== undefined) {
    output.writeFieldBegin('subscriberCountRemoved', Thrift.Type.I64, 7);
    output.writeI64(this.subscriberCountRemoved);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UpdateBuddyProfileResult = module.exports.UpdateBuddyProfileResult = function(args) {
  this.requestId = null;
  this.state = null;
  this.eventNo = null;
  this.receiverCount = null;
  this.successCount = null;
  this.failCount = null;
  this.cancelCount = null;
  this.unregisterCount = null;
  this.timestamp = null;
  this.message = null;
  this.urlhash = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.eventNo !== undefined && args.eventNo !== null) {
      this.eventNo = args.eventNo;
    }
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
    if (args.cancelCount !== undefined && args.cancelCount !== null) {
      this.cancelCount = args.cancelCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.urlhash !== undefined && args.urlhash !== null) {
      this.urlhash = args.urlhash;
    }
  }
};
UpdateBuddyProfileResult.prototype = {};
UpdateBuddyProfileResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventNo = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.cancelCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.urlhash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UpdateBuddyProfileResult.prototype.write = function(output) {
  output.writeStructBegin('UpdateBuddyProfileResult');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 2);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.eventNo !== null && this.eventNo !== undefined) {
    output.writeFieldBegin('eventNo', Thrift.Type.I32, 3);
    output.writeI32(this.eventNo);
    output.writeFieldEnd();
  }
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 13);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  if (this.cancelCount !== null && this.cancelCount !== undefined) {
    output.writeFieldBegin('cancelCount', Thrift.Type.I64, 14);
    output.writeI64(this.cancelCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 15);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 21);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 22);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.urlhash !== null && this.urlhash !== undefined) {
    output.writeFieldBegin('urlhash', Thrift.Type.STRING, 23);
    output.writeString(this.urlhash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserAuthStatus = module.exports.UserAuthStatus = function(args) {
  this.phoneNumberRegistered = null;
  this.registeredSnsIdTypes = null;
  this.accountMigrationCheckType = null;
  if (args) {
    if (args.phoneNumberRegistered !== undefined && args.phoneNumberRegistered !== null) {
      this.phoneNumberRegistered = args.phoneNumberRegistered;
    }
    if (args.registeredSnsIdTypes !== undefined && args.registeredSnsIdTypes !== null) {
      this.registeredSnsIdTypes = Thrift.copyList(args.registeredSnsIdTypes, [null]);
    }
    if (args.accountMigrationCheckType !== undefined && args.accountMigrationCheckType !== null) {
      this.accountMigrationCheckType = args.accountMigrationCheckType;
    }
  }
};
UserAuthStatus.prototype = {};
UserAuthStatus.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.phoneNumberRegistered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size820 = 0;
        var _rtmp3824;
        this.registeredSnsIdTypes = [];
        var _etype823 = 0;
        _rtmp3824 = input.readListBegin();
        _etype823 = _rtmp3824.etype;
        _size820 = _rtmp3824.size;
        for (var _i825 = 0; _i825 < _size820; ++_i825)
        {
          var elem826 = null;
          elem826 = input.readI32();
          this.registeredSnsIdTypes.push(elem826);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.accountMigrationCheckType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserAuthStatus.prototype.write = function(output) {
  output.writeStructBegin('UserAuthStatus');
  if (this.phoneNumberRegistered !== null && this.phoneNumberRegistered !== undefined) {
    output.writeFieldBegin('phoneNumberRegistered', Thrift.Type.BOOL, 1);
    output.writeBool(this.phoneNumberRegistered);
    output.writeFieldEnd();
  }
  if (this.registeredSnsIdTypes !== null && this.registeredSnsIdTypes !== undefined) {
    output.writeFieldBegin('registeredSnsIdTypes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.registeredSnsIdTypes.length);
    for (var iter827 in this.registeredSnsIdTypes)
    {
      if (this.registeredSnsIdTypes.hasOwnProperty(iter827))
      {
        iter827 = this.registeredSnsIdTypes[iter827];
        output.writeI32(iter827);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.accountMigrationCheckType !== null && this.accountMigrationCheckType !== undefined) {
    output.writeFieldBegin('accountMigrationCheckType', Thrift.Type.I32, 3);
    output.writeI32(this.accountMigrationCheckType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserTicketResponse = module.exports.UserTicketResponse = function(args) {
  this.mid = null;
  this.userTicket = null;
  if (args) {
    if (args.mid !== undefined && args.mid !== null) {
      this.mid = args.mid;
    }
    if (args.userTicket !== undefined && args.userTicket !== null) {
      this.userTicket = args.userTicket;
    }
  }
};
UserTicketResponse.prototype = {};
UserTicketResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.mid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userTicket = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserTicketResponse.prototype.write = function(output) {
  output.writeStructBegin('UserTicketResponse');
  if (this.mid !== null && this.mid !== undefined) {
    output.writeFieldBegin('mid', Thrift.Type.STRING, 1);
    output.writeString(this.mid);
    output.writeFieldEnd();
  }
  if (this.userTicket !== null && this.userTicket !== undefined) {
    output.writeFieldBegin('userTicket', Thrift.Type.STRING, 2);
    output.writeString(this.userTicket);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ValidateContactsResult = module.exports.ValidateContactsResult = function(args) {
  this.receiverCount = null;
  this.successCount = null;
  this.blockCount = null;
  this.unregisterCount = null;
  this.unrelatedCount = null;
  this.failCount = null;
  if (args) {
    if (args.receiverCount !== undefined && args.receiverCount !== null) {
      this.receiverCount = args.receiverCount;
    }
    if (args.successCount !== undefined && args.successCount !== null) {
      this.successCount = args.successCount;
    }
    if (args.blockCount !== undefined && args.blockCount !== null) {
      this.blockCount = args.blockCount;
    }
    if (args.unregisterCount !== undefined && args.unregisterCount !== null) {
      this.unregisterCount = args.unregisterCount;
    }
    if (args.unrelatedCount !== undefined && args.unrelatedCount !== null) {
      this.unrelatedCount = args.unrelatedCount;
    }
    if (args.failCount !== undefined && args.failCount !== null) {
      this.failCount = args.failCount;
    }
  }
};
ValidateContactsResult.prototype = {};
ValidateContactsResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.receiverCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.successCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.blockCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.unregisterCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.unrelatedCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.failCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ValidateContactsResult.prototype.write = function(output) {
  output.writeStructBegin('ValidateContactsResult');
  if (this.receiverCount !== null && this.receiverCount !== undefined) {
    output.writeFieldBegin('receiverCount', Thrift.Type.I64, 11);
    output.writeI64(this.receiverCount);
    output.writeFieldEnd();
  }
  if (this.successCount !== null && this.successCount !== undefined) {
    output.writeFieldBegin('successCount', Thrift.Type.I64, 12);
    output.writeI64(this.successCount);
    output.writeFieldEnd();
  }
  if (this.blockCount !== null && this.blockCount !== undefined) {
    output.writeFieldBegin('blockCount', Thrift.Type.I64, 13);
    output.writeI64(this.blockCount);
    output.writeFieldEnd();
  }
  if (this.unregisterCount !== null && this.unregisterCount !== undefined) {
    output.writeFieldBegin('unregisterCount', Thrift.Type.I64, 14);
    output.writeI64(this.unregisterCount);
    output.writeFieldEnd();
  }
  if (this.unrelatedCount !== null && this.unrelatedCount !== undefined) {
    output.writeFieldBegin('unrelatedCount', Thrift.Type.I64, 15);
    output.writeI64(this.unrelatedCount);
    output.writeFieldEnd();
  }
  if (this.failCount !== null && this.failCount !== undefined) {
    output.writeFieldBegin('failCount', Thrift.Type.I64, 16);
    output.writeI64(this.failCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VerificationSessionData = module.exports.VerificationSessionData = function(args) {
  this.sessionId = null;
  this.method = null;
  this.callback = null;
  this.normalizedPhone = null;
  this.countryCode = null;
  this.nationalSignificantNumber = null;
  this.availableVerificationMethods = null;
  this.callerIdMask = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.callback !== undefined && args.callback !== null) {
      this.callback = args.callback;
    }
    if (args.normalizedPhone !== undefined && args.normalizedPhone !== null) {
      this.normalizedPhone = args.normalizedPhone;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.nationalSignificantNumber !== undefined && args.nationalSignificantNumber !== null) {
      this.nationalSignificantNumber = args.nationalSignificantNumber;
    }
    if (args.availableVerificationMethods !== undefined && args.availableVerificationMethods !== null) {
      this.availableVerificationMethods = Thrift.copyList(args.availableVerificationMethods, [null]);
    }
    if (args.callerIdMask !== undefined && args.callerIdMask !== null) {
      this.callerIdMask = args.callerIdMask;
    }
  }
};
VerificationSessionData.prototype = {};
VerificationSessionData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.callback = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.normalizedPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nationalSignificantNumber = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size828 = 0;
        var _rtmp3832;
        this.availableVerificationMethods = [];
        var _etype831 = 0;
        _rtmp3832 = input.readListBegin();
        _etype831 = _rtmp3832.etype;
        _size828 = _rtmp3832.size;
        for (var _i833 = 0; _i833 < _size828; ++_i833)
        {
          var elem834 = null;
          elem834 = input.readI32();
          this.availableVerificationMethods.push(elem834);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.callerIdMask = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VerificationSessionData.prototype.write = function(output) {
  output.writeStructBegin('VerificationSessionData');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 2);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.callback !== null && this.callback !== undefined) {
    output.writeFieldBegin('callback', Thrift.Type.STRING, 3);
    output.writeString(this.callback);
    output.writeFieldEnd();
  }
  if (this.normalizedPhone !== null && this.normalizedPhone !== undefined) {
    output.writeFieldBegin('normalizedPhone', Thrift.Type.STRING, 4);
    output.writeString(this.normalizedPhone);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 5);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.nationalSignificantNumber !== null && this.nationalSignificantNumber !== undefined) {
    output.writeFieldBegin('nationalSignificantNumber', Thrift.Type.STRING, 6);
    output.writeString(this.nationalSignificantNumber);
    output.writeFieldEnd();
  }
  if (this.availableVerificationMethods !== null && this.availableVerificationMethods !== undefined) {
    output.writeFieldBegin('availableVerificationMethods', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.availableVerificationMethods.length);
    for (var iter835 in this.availableVerificationMethods)
    {
      if (this.availableVerificationMethods.hasOwnProperty(iter835))
      {
        iter835 = this.availableVerificationMethods[iter835];
        output.writeI32(iter835);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.callerIdMask !== null && this.callerIdMask !== undefined) {
    output.writeFieldBegin('callerIdMask', Thrift.Type.STRING, 8);
    output.writeString(this.callerIdMask);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WapInvitation = module.exports.WapInvitation = function(args) {
  this.type = null;
  this.inviteeEmail = null;
  this.inviterMid = null;
  this.roomMid = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.inviteeEmail !== undefined && args.inviteeEmail !== null) {
      this.inviteeEmail = args.inviteeEmail;
    }
    if (args.inviterMid !== undefined && args.inviterMid !== null) {
      this.inviterMid = args.inviterMid;
    }
    if (args.roomMid !== undefined && args.roomMid !== null) {
      this.roomMid = args.roomMid;
    }
  }
};
WapInvitation.prototype = {};
WapInvitation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.inviteeEmail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.inviterMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.roomMid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WapInvitation.prototype.write = function(output) {
  output.writeStructBegin('WapInvitation');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.inviteeEmail !== null && this.inviteeEmail !== undefined) {
    output.writeFieldBegin('inviteeEmail', Thrift.Type.STRING, 10);
    output.writeString(this.inviteeEmail);
    output.writeFieldEnd();
  }
  if (this.inviterMid !== null && this.inviterMid !== undefined) {
    output.writeFieldBegin('inviterMid', Thrift.Type.STRING, 11);
    output.writeString(this.inviterMid);
    output.writeFieldEnd();
  }
  if (this.roomMid !== null && this.roomMid !== undefined) {
    output.writeFieldBegin('roomMid', Thrift.Type.STRING, 12);
    output.writeString(this.roomMid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

